
MultiChannel-ADC-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800ae8c  0800ae8c  0000be8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aec8  0800aec8  0000bec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aed0  0800aed0  0000bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aed4  0800aed4  0000bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  0800aed8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000228  2400002c  0800af04  0000c02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000254  0800af04  0000c254  2**0
                  ALLOC
  9 .nocache      0000001a  00000000  00000000  00001000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0000c02c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b43f  00000000  00000000  0000c05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002e3a  00000000  00000000  00027499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014e0  00000000  00000000  0002a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001053  00000000  00000000  0002b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039eed  00000000  00000000  0002c80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001bd24  00000000  00000000  000666f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017b4e5  00000000  00000000  0008241c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001fd901  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005aa0  00000000  00000000  001fd944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  002033e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ae74 	.word	0x0800ae74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	0800ae74 	.word	0x0800ae74

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *had) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	for (uint8_t index = 0; index<NUM_OF_CONVERSIONS; index++) {
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
 8000610:	e015      	b.n	800063e <HAL_ADC_ConvCpltCallback+0x3a>
		sensorVoltage[index] = ADC_RAW_VOLTAGE * (float) adcData[index];
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <HAL_ADC_ConvCpltCallback+0x50>)
 8000616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061a:	b29b      	uxth	r3, r3
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000658 <HAL_ADC_ConvCpltCallback+0x54>
 800062a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800062e:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <HAL_ADC_ConvCpltCallback+0x58>)
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t index = 0; index<NUM_OF_CONVERSIONS; index++) {
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	3301      	adds	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	2b0c      	cmp	r3, #12
 8000642:	d9e6      	bls.n	8000612 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	00000000 	.word	0x00000000
 8000658:	38533406 	.word	0x38533406
 800065c:	24000180 	.word	0x24000180

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000666:	f000 fb41 	bl	8000cec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800066a:	4b53      	ldr	r3, [pc, #332]	@ (80007b8 <main+0x158>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d11b      	bne.n	80006ae <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000676:	f3bf 8f4f 	dsb	sy
}
 800067a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800067c:	f3bf 8f6f 	isb	sy
}
 8000680:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000682:	4b4d      	ldr	r3, [pc, #308]	@ (80007b8 <main+0x158>)
 8000684:	2200      	movs	r2, #0
 8000686:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000690:	f3bf 8f6f 	isb	sy
}
 8000694:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000696:	4b48      	ldr	r3, [pc, #288]	@ (80007b8 <main+0x158>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a47      	ldr	r2, [pc, #284]	@ (80007b8 <main+0x158>)
 800069c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a2:	f3bf 8f4f 	dsb	sy
}
 80006a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a8:	f3bf 8f6f 	isb	sy
}
 80006ac:	e000      	b.n	80006b0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006b0:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <main+0x158>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d138      	bne.n	800072e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006bc:	4b3e      	ldr	r3, [pc, #248]	@ (80007b8 <main+0x158>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006c4:	f3bf 8f4f 	dsb	sy
}
 80006c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ca:	4b3b      	ldr	r3, [pc, #236]	@ (80007b8 <main+0x158>)
 80006cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006d0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	0b5b      	lsrs	r3, r3, #13
 80006d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006da:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006e4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	015a      	lsls	r2, r3, #5
 80006ea:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006f4:	4930      	ldr	r1, [pc, #192]	@ (80007b8 <main+0x158>)
 80006f6:	4313      	orrs	r3, r2
 80006f8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1ef      	bne.n	80006e6 <main+0x86>
    } while(sets-- != 0U);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1e5a      	subs	r2, r3, #1
 800070a:	60ba      	str	r2, [r7, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1e5      	bne.n	80006dc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000710:	f3bf 8f4f 	dsb	sy
}
 8000714:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000716:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <main+0x158>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <main+0x158>)
 800071c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000720:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000722:	f3bf 8f4f 	dsb	sy
}
 8000726:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000728:	f3bf 8f6f 	isb	sy
}
 800072c:	e000      	b.n	8000730 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800072e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 ff54 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f84a 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 fa82 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 800073c:	f000 fa60 	bl	8000c00 <MX_DMA_Init>
  MX_ADC1_Init();
 8000740:	f000 f8c0 	bl	80008c4 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000744:	f000 fa08 	bl	8000b58 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);//Calibrating ADC before enbaling conversions
 8000748:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800074c:	2100      	movs	r1, #0
 800074e:	481b      	ldr	r0, [pc, #108]	@ (80007bc <main+0x15c>)
 8000750:	f002 fcd6 	bl	8003100 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcData, NUM_OF_CONVERSIONS);//Starting DMA based ADC
 8000754:	220d      	movs	r2, #13
 8000756:	491a      	ldr	r1, [pc, #104]	@ (80007c0 <main+0x160>)
 8000758:	4818      	ldr	r0, [pc, #96]	@ (80007bc <main+0x15c>)
 800075a:	f001 fbe1 	bl	8001f20 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim8); //50Hz sampling frequency
 800075e:	4819      	ldr	r0, [pc, #100]	@ (80007c4 <main+0x164>)
 8000760:	f009 f846 	bl	80097f0 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fd71 	bl	800124c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800076a:	2001      	movs	r0, #1
 800076c:	f000 fd6e 	bl	800124c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000770:	2002      	movs	r0, #2
 8000772:	f000 fd6b 	bl	800124c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000776:	2101      	movs	r1, #1
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fddd 	bl	8001338 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <main+0x168>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <main+0x168>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800078c:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <main+0x168>)
 800078e:	2200      	movs	r2, #0
 8000790:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <main+0x168>)
 8000794:	2200      	movs	r2, #0
 8000796:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <main+0x168>)
 800079a:	2200      	movs	r2, #0
 800079c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800079e:	490a      	ldr	r1, [pc, #40]	@ (80007c8 <main+0x168>)
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fe59 	bl	8001458 <BSP_COM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <main+0x152>
  {
    Error_Handler();
 80007ac:	f000 facb 	bl	8000d46 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <main+0x152>
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	24000058 	.word	0x24000058
 80007c0:	00000000 	.word	0x00000000
 80007c4:	24000134 	.word	0x24000134
 80007c8:	24000048 	.word	0x24000048

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	@ 0x70
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d6:	224c      	movs	r2, #76	@ 0x4c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f00a fb1e 	bl	800ae1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2220      	movs	r2, #32
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00a fb18 	bl	800ae1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007ec:	2002      	movs	r0, #2
 80007ee:	f005 fa89 	bl	8005d04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b31      	ldr	r3, [pc, #196]	@ (80008bc <SystemClock_Config+0xf0>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a30      	ldr	r2, [pc, #192]	@ (80008bc <SystemClock_Config+0xf0>)
 80007fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <SystemClock_Config+0xf0>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <SystemClock_Config+0xf4>)
 800080e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000810:	4a2b      	ldr	r2, [pc, #172]	@ (80008c0 <SystemClock_Config+0xf4>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <SystemClock_Config+0xf4>)
 800081a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000824:	bf00      	nop
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <SystemClock_Config+0xf0>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800082e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000832:	d1f8      	bne.n	8000826 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000838:	2301      	movs	r3, #1
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2340      	movs	r3, #64	@ 0x40
 800083e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800084c:	233c      	movs	r3, #60	@ 0x3c
 800084e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085c:	230c      	movs	r3, #12
 800085e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000860:	2300      	movs	r3, #0
 8000862:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	4618      	mov	r0, r3
 800086e:	f005 fa83 	bl	8005d78 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000878:	f000 fa65 	bl	8000d46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	233f      	movs	r3, #63	@ 0x3f
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2303      	movs	r3, #3
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000888:	2308      	movs	r3, #8
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fec2 	bl	800662c <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80008ae:	f000 fa4a 	bl	8000d46 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3770      	adds	r7, #112	@ 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	58024800 	.word	0x58024800
 80008c0:	58000400 	.word	0x58000400

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e8:	4b8c      	ldr	r3, [pc, #560]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80008ea:	4a8d      	ldr	r2, [pc, #564]	@ (8000b20 <MX_ADC1_Init+0x25c>)
 80008ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80008ee:	4b8b      	ldr	r3, [pc, #556]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80008f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80008f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80008f6:	4b89      	ldr	r3, [pc, #548]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008fc:	4b87      	ldr	r3, [pc, #540]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80008fe:	2201      	movs	r2, #1
 8000900:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000902:	4b86      	ldr	r3, [pc, #536]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000904:	2208      	movs	r2, #8
 8000906:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000908:	4b84      	ldr	r3, [pc, #528]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800090a:	2200      	movs	r2, #0
 800090c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090e:	4b83      	ldr	r3, [pc, #524]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000910:	2200      	movs	r2, #0
 8000912:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000914:	4b81      	ldr	r3, [pc, #516]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000916:	220d      	movs	r2, #13
 8000918:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091a:	4b80      	ldr	r3, [pc, #512]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800091c:	2200      	movs	r2, #0
 800091e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8000920:	4b7e      	ldr	r3, [pc, #504]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000922:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8000926:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000928:	4b7c      	ldr	r3, [pc, #496]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800092a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000930:	4b7a      	ldr	r3, [pc, #488]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000932:	2203      	movs	r2, #3
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000936:	4b79      	ldr	r3, [pc, #484]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800093c:	4b77      	ldr	r3, [pc, #476]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000942:	4b76      	ldr	r3, [pc, #472]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800094a:	4b74      	ldr	r3, [pc, #464]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800094c:	2201      	movs	r2, #1
 800094e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	4872      	ldr	r0, [pc, #456]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000952:	f001 f943 	bl	8001bdc <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800095c:	f000 f9f3 	bl	8000d46 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	486c      	ldr	r0, [pc, #432]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800096c:	f002 fc5e 	bl	800322c <HAL_ADCEx_MultiModeConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000976:	f000 f9e6 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800097a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b24 <MX_ADC1_Init+0x260>)
 800097c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097e:	2306      	movs	r3, #6
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000982:	2306      	movs	r3, #6
 8000984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000986:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	485f      	ldr	r0, [pc, #380]	@ (8000b1c <MX_ADC1_Init+0x258>)
 800099e:	f001 fddb 	bl	8002558 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80009a8:	f000 f9cd 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009ac:	4b5e      	ldr	r3, [pc, #376]	@ (8000b28 <MX_ADC1_Init+0x264>)
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009b0:	230c      	movs	r3, #12
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4858      	ldr	r0, [pc, #352]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80009ba:	f001 fdcd 	bl	8002558 <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80009c4:	f000 f9bf 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009c8:	4b58      	ldr	r3, [pc, #352]	@ (8000b2c <MX_ADC1_Init+0x268>)
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009cc:	2312      	movs	r3, #18
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4851      	ldr	r0, [pc, #324]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80009d6:	f001 fdbf 	bl	8002558 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80009e0:	f000 f9b1 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009e4:	4b52      	ldr	r3, [pc, #328]	@ (8000b30 <MX_ADC1_Init+0x26c>)
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009e8:	2318      	movs	r3, #24
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	484a      	ldr	r0, [pc, #296]	@ (8000b1c <MX_ADC1_Init+0x258>)
 80009f2:	f001 fdb1 	bl	8002558 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 80009fc:	f000 f9a3 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a00:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <MX_ADC1_Init+0x270>)
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4843      	ldr	r0, [pc, #268]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000a10:	f001 fda2 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000a1a:	f000 f994 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a1e:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <MX_ADC1_Init+0x274>)
 8000a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a22:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000a26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	483a      	ldr	r0, [pc, #232]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000a32:	f001 fd91 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a3c:	f000 f983 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a40:	4b3e      	ldr	r3, [pc, #248]	@ (8000b3c <MX_ADC1_Init+0x278>)
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a44:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000a48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4833      	ldr	r0, [pc, #204]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000a50:	f001 fd82 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ADC1_Init+0x19a>
  {
    Error_Handler();
 8000a5a:	f000 f974 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000a5e:	4b38      	ldr	r3, [pc, #224]	@ (8000b40 <MX_ADC1_Init+0x27c>)
 8000a60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a62:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	482b      	ldr	r0, [pc, #172]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000a6e:	f001 fd73 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x1b8>
  {
    Error_Handler();
 8000a78:	f000 f965 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a7c:	4b31      	ldr	r3, [pc, #196]	@ (8000b44 <MX_ADC1_Init+0x280>)
 8000a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a80:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000a84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000a8c:	f001 fd64 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8000a96:	f000 f956 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MX_ADC1_Init+0x284>)
 8000a9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481c      	ldr	r0, [pc, #112]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000aaa:	f001 fd55 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000ab4:	f000 f947 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_ADC1_Init+0x288>)
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000abc:	f240 2306 	movw	r3, #518	@ 0x206
 8000ac0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4815      	ldr	r0, [pc, #84]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000ac8:	f001 fd46 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000ad2:	f000 f938 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_ADC1_Init+0x28c>)
 8000ad8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ada:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000ae6:	f001 fd37 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x230>
  {
    Error_Handler();
 8000af0:	f000 f929 	bl	8000d46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_ADC1_Init+0x290>)
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000af8:	f240 2312 	movw	r3, #530	@ 0x212
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <MX_ADC1_Init+0x258>)
 8000b04:	f001 fd28 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC1_Init+0x24e>
  {
    Error_Handler();
 8000b0e:	f000 f91a 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24000058 	.word	0x24000058
 8000b20:	40022000 	.word	0x40022000
 8000b24:	08600004 	.word	0x08600004
 8000b28:	0c900008 	.word	0x0c900008
 8000b2c:	10c00010 	.word	0x10c00010
 8000b30:	14f00020 	.word	0x14f00020
 8000b34:	19200040 	.word	0x19200040
 8000b38:	1d500080 	.word	0x1d500080
 8000b3c:	21800100 	.word	0x21800100
 8000b40:	3ac04000 	.word	0x3ac04000
 8000b44:	3ef08000 	.word	0x3ef08000
 8000b48:	43210000 	.word	0x43210000
 8000b4c:	47520000 	.word	0x47520000
 8000b50:	4b840000 	.word	0x4b840000
 8000b54:	4fb80000 	.word	0x4fb80000

08000b58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b78:	4a20      	ldr	r2, [pc, #128]	@ (8000bfc <MX_TIM8_Init+0xa4>)
 8000b7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24000-1;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b7e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000b82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 200-1;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b8c:	22c7      	movs	r2, #199	@ 0xc7
 8000b8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ba2:	4815      	ldr	r0, [pc, #84]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000ba4:	f008 fdcc 	bl	8009740 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000bae:	f000 f8ca 	bl	8000d46 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480e      	ldr	r0, [pc, #56]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000bc0:	f008 fe86 	bl	80098d0 <HAL_TIM_ConfigClockSource>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000bca:	f000 f8bc 	bl	8000d46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_TIM8_Init+0xa0>)
 8000be0:	f009 f8ac 	bl	8009d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000bea:	f000 f8ac 	bl	8000d46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000134 	.word	0x24000134
 8000bfc:	40010400 	.word	0x40010400

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <MX_DMA_Init+0x3c>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c3c <MX_DMA_Init+0x3c>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_DMA_Init+0x3c>)
 8000c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	200b      	movs	r0, #11
 8000c2a:	f002 fcb8 	bl	800359e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c2e:	200b      	movs	r0, #11
 8000c30:	f002 fccf 	bl	80035d2 <HAL_NVIC_EnableIRQ>

}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a26      	ldr	r2, [pc, #152]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000cc6:	f043 0320 	orr.w	r3, r3, #32
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cdc:	bf00      	nop
 8000cde:	371c      	adds	r7, #28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	58024400 	.word	0x58024400

08000cec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cfe:	f002 fc83 	bl	8003608 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d0a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000d0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000d10:	230e      	movs	r3, #14
 8000d12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000d14:	2300      	movs	r3, #0
 8000d16:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d20:	2301      	movs	r3, #1
 8000d22:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d30:	463b      	mov	r3, r7
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fca0 	bl	8003678 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d38:	2004      	movs	r0, #4
 8000d3a:	f002 fc7d 	bl	8003638 <HAL_MPU_Enable>

}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4a:	b672      	cpsid	i
}
 8000d4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4e:	bf00      	nop
 8000d50:	e7fd      	b.n	8000d4e <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0be      	sub	sp, #248	@ 0xf8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	22c0      	movs	r2, #192	@ 0xc0
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f00a f837 	bl	800ae1c <memset>
  if(hadc->Instance==ADC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a75      	ldr	r2, [pc, #468]	@ (8000f88 <HAL_ADC_MspInit+0x200>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	f040 80e3 	bne.w	8000f80 <HAL_ADC_MspInit+0x1f8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dda:	23c0      	movs	r3, #192	@ 0xc0
 8000ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f005 ffa7 	bl	8006d44 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000dfc:	f7ff ffa3 	bl	8000d46 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e00:	4b62      	ldr	r3, [pc, #392]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e06:	4a61      	ldr	r2, [pc, #388]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e10:	4b5e      	ldr	r3, [pc, #376]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	4a59      	ldr	r2, [pc, #356]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2e:	4b57      	ldr	r3, [pc, #348]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4b53      	ldr	r3, [pc, #332]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e42:	4a52      	ldr	r2, [pc, #328]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	4a4a      	ldr	r2, [pc, #296]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6a:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e78:	4b44      	ldr	r3, [pc, #272]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	4a43      	ldr	r2, [pc, #268]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e88:	4b40      	ldr	r3, [pc, #256]	@ (8000f8c <HAL_ADC_MspInit+0x204>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ADC1_INP8
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e96:	23ff      	movs	r3, #255	@ 0xff
 8000e98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4838      	ldr	r0, [pc, #224]	@ (8000f90 <HAL_ADC_MspInit+0x208>)
 8000eb0:	f004 fd5e 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eb4:	2330      	movs	r3, #48	@ 0x30
 8000eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4831      	ldr	r0, [pc, #196]	@ (8000f94 <HAL_ADC_MspInit+0x20c>)
 8000ece:	f004 fd4f 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	482b      	ldr	r0, [pc, #172]	@ (8000f98 <HAL_ADC_MspInit+0x210>)
 8000eec:	f004 fd40 	bl	8005970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ef0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f04:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4824      	ldr	r0, [pc, #144]	@ (8000f9c <HAL_ADC_MspInit+0x214>)
 8000f0c:	f004 fd30 	bl	8005970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f12:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <HAL_ADC_MspInit+0x21c>)
 8000f14:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f16:	4b22      	ldr	r3, [pc, #136]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f18:	2209      	movs	r2, #9
 8000f1a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f46:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f54:	4812      	ldr	r0, [pc, #72]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f56:	f002 fbcf 	bl	80036f8 <HAL_DMA_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_ADC_MspInit+0x1dc>
    {
      Error_Handler();
 8000f60:	f7ff fef1 	bl	8000d46 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <HAL_ADC_MspInit+0x218>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2012      	movs	r0, #18
 8000f76:	f002 fb12 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f7a:	2012      	movs	r0, #18
 8000f7c:	f002 fb29 	bl	80035d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f80:	bf00      	nop
 8000f82:	37f8      	adds	r7, #248	@ 0xf8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40022000 	.word	0x40022000
 8000f8c:	58024400 	.word	0x58024400
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	58021400 	.word	0x58021400
 8000fa0:	240000bc 	.word	0x240000bc
 8000fa4:	40020010 	.word	0x40020010

08000fa8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x3c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10e      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x40>)
 8000fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fc0:	4a09      	ldr	r2, [pc, #36]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x40>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <HAL_TIM_Base_MspInit+0x40>)
 8000fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40010400 	.word	0x40010400
 8000fe8:	58024400 	.word	0x58024400

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 fb3d 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <DMA1_Stream0_IRQHandler+0x10>)
 8001052:	f003 f917 	bl	8004284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	240000bc 	.word	0x240000bc

08001060 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <ADC_IRQHandler+0x10>)
 8001066:	f001 f81f 	bl	80020a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	24000058 	.word	0x24000058

08001074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001078:	2000      	movs	r0, #0
 800107a:	f000 f9cf 	bl	800141c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <SystemInit+0x114>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108e:	4a42      	ldr	r2, [pc, #264]	@ (8001198 <SystemInit+0x114>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001098:	4b40      	ldr	r3, [pc, #256]	@ (800119c <SystemInit+0x118>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d807      	bhi.n	80010b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a4:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <SystemInit+0x118>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 030f 	bic.w	r3, r3, #15
 80010ac:	4a3b      	ldr	r2, [pc, #236]	@ (800119c <SystemInit+0x118>)
 80010ae:	f043 0307 	orr.w	r3, r3, #7
 80010b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010b4:	4b3a      	ldr	r3, [pc, #232]	@ (80011a0 <SystemInit+0x11c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a39      	ldr	r2, [pc, #228]	@ (80011a0 <SystemInit+0x11c>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010c0:	4b37      	ldr	r3, [pc, #220]	@ (80011a0 <SystemInit+0x11c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010c6:	4b36      	ldr	r3, [pc, #216]	@ (80011a0 <SystemInit+0x11c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4935      	ldr	r1, [pc, #212]	@ (80011a0 <SystemInit+0x11c>)
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <SystemInit+0x120>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010d2:	4b32      	ldr	r3, [pc, #200]	@ (800119c <SystemInit+0x118>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010de:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <SystemInit+0x118>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 030f 	bic.w	r3, r3, #15
 80010e6:	4a2d      	ldr	r2, [pc, #180]	@ (800119c <SystemInit+0x118>)
 80010e8:	f043 0307 	orr.w	r3, r3, #7
 80010ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <SystemInit+0x11c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <SystemInit+0x11c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <SystemInit+0x11c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <SystemInit+0x11c>)
 8001102:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <SystemInit+0x124>)
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <SystemInit+0x11c>)
 8001108:	4a28      	ldr	r2, [pc, #160]	@ (80011ac <SystemInit+0x128>)
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <SystemInit+0x11c>)
 800110e:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <SystemInit+0x12c>)
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <SystemInit+0x11c>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <SystemInit+0x11c>)
 800111a:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <SystemInit+0x12c>)
 800111c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <SystemInit+0x11c>)
 8001120:	2200      	movs	r2, #0
 8001122:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <SystemInit+0x11c>)
 8001126:	4a22      	ldr	r2, [pc, #136]	@ (80011b0 <SystemInit+0x12c>)
 8001128:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <SystemInit+0x11c>)
 800112c:	2200      	movs	r2, #0
 800112e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <SystemInit+0x11c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1a      	ldr	r2, [pc, #104]	@ (80011a0 <SystemInit+0x11c>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <SystemInit+0x11c>)
 800113e:	2200      	movs	r2, #0
 8001140:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001142:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <SystemInit+0x130>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <SystemInit+0x134>)
 8001148:	4013      	ands	r3, r2
 800114a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800114e:	d202      	bcs.n	8001156 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <SystemInit+0x138>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <SystemInit+0x11c>)
 8001158:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800115c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d113      	bne.n	800118c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <SystemInit+0x11c>)
 8001166:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800116a:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <SystemInit+0x11c>)
 800116c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001170:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <SystemInit+0x13c>)
 8001176:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800117a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <SystemInit+0x11c>)
 800117e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001182:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <SystemInit+0x11c>)
 8001184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001188:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	52002000 	.word	0x52002000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011a8:	02020200 	.word	0x02020200
 80011ac:	01ff0000 	.word	0x01ff0000
 80011b0:	01010280 	.word	0x01010280
 80011b4:	5c001000 	.word	0x5c001000
 80011b8:	ffff0000 	.word	0xffff0000
 80011bc:	51008108 	.word	0x51008108
 80011c0:	52004000 	.word	0x52004000

080011c4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <ExitRun0Mode+0x2c>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <ExitRun0Mode+0x2c>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80011d4:	bf00      	nop
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <ExitRun0Mode+0x2c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f9      	beq.n	80011d6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	58024800 	.word	0x58024800

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001230 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80011f8:	f7ff ffe4 	bl	80011c4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f7ff ff42 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	@ (8001238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	@ (8001244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f009 fe01 	bl	800ae2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fa19 	bl	8000660 <main>
  bx  lr
 800122e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001234:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001238:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 800123c:	0800aed8 	.word	0x0800aed8
  ldr r2, =_sbss
 8001240:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8001244:	24000254 	.word	0x24000254

08001248 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC3_IRQHandler>
	...

0800124c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	@ 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <BSP_LED_Init+0x28>
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d006      	beq.n	8001274 <BSP_LED_Init+0x28>
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d003      	beq.n	8001274 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800126c:	f06f 0301 	mvn.w	r3, #1
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001272:	e055      	b.n	8001320 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800127a:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <BSP_LED_Init+0xe0>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	4a2a      	ldr	r2, [pc, #168]	@ (800132c <BSP_LED_Init+0xe0>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <BSP_LED_Init+0xe0>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	e021      	b.n	80012de <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10f      	bne.n	80012c0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80012a0:	4b22      	ldr	r3, [pc, #136]	@ (800132c <BSP_LED_Init+0xe0>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	4a21      	ldr	r2, [pc, #132]	@ (800132c <BSP_LED_Init+0xe0>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <BSP_LED_Init+0xe0>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	e00e      	b.n	80012de <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80012c0:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <BSP_LED_Init+0xe0>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c6:	4a19      	ldr	r2, [pc, #100]	@ (800132c <BSP_LED_Init+0xe0>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <BSP_LED_Init+0xe0>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <BSP_LED_Init+0xe4>)
 80012e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <BSP_LED_Init+0xe8>)
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	f107 0218 	add.w	r2, r7, #24
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fb34 	bl	8005970 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <BSP_LED_Init+0xe8>)
 800130c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <BSP_LED_Init+0xe4>)
 8001314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	f004 fcd8 	bl	8005cd0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001322:	4618      	mov	r0, r3
 8001324:	3730      	adds	r7, #48	@ 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	58024400 	.word	0x58024400
 8001330:	0800ae9c 	.word	0x0800ae9c
 8001334:	2400000c 	.word	0x2400000c

08001338 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001348:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <BSP_PB_Init+0xcc>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134e:	4a2d      	ldr	r2, [pc, #180]	@ (8001404 <BSP_PB_Init+0xcc>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001358:	4b2a      	ldr	r3, [pc, #168]	@ (8001404 <BSP_PB_Init+0xcc>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800136c:	2302      	movs	r3, #2
 800136e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001374:	79bb      	ldrb	r3, [r7, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10c      	bne.n	8001394 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <BSP_PB_Init+0xd0>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f004 faef 	bl	8005970 <HAL_GPIO_Init>
 8001392:	e031      	b.n	80013f8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001394:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001398:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <BSP_PB_Init+0xd0>)
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	f107 020c 	add.w	r2, r7, #12
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 fae1 	bl	8005970 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4a16      	ldr	r2, [pc, #88]	@ (800140c <BSP_PB_Init+0xd4>)
 80013b4:	441a      	add	r2, r3
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4915      	ldr	r1, [pc, #84]	@ (8001410 <BSP_PB_Init+0xd8>)
 80013ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f004 fa90 	bl	80058e6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4a10      	ldr	r2, [pc, #64]	@ (800140c <BSP_PB_Init+0xd4>)
 80013cc:	1898      	adds	r0, r3, r2
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <BSP_PB_Init+0xdc>)
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	461a      	mov	r2, r3
 80013d8:	2100      	movs	r1, #0
 80013da:	f004 fa65 	bl	80058a8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80013de:	2028      	movs	r0, #40	@ 0x28
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <BSP_PB_Init+0xe0>)
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	f002 f8d7 	bl	800359e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80013f0:	2328      	movs	r3, #40	@ 0x28
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f8ed 	bl	80035d2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	58024400 	.word	0x58024400
 8001408:	24000018 	.word	0x24000018
 800140c:	240001b4 	.word	0x240001b4
 8001410:	0800aea4 	.word	0x0800aea4
 8001414:	2400001c 	.word	0x2400001c
 8001418:	24000020 	.word	0x24000020

0800141c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <BSP_PB_IRQHandler+0x20>)
 800142c:	4413      	add	r3, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fa6e 	bl	8005910 <HAL_EXTI_IRQHandler>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	240001b4 	.word	0x240001b4

08001440 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800146e:	f06f 0301 	mvn.w	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e018      	b.n	80014a8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	2294      	movs	r2, #148	@ 0x94
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <BSP_COM_Init+0x5c>)
 8001480:	4413      	add	r3, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f852 	bl	800152c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2294      	movs	r2, #148	@ 0x94
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <BSP_COM_Init+0x5c>)
 8001492:	4413      	add	r3, r2
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f80e 	bl	80014b8 <MX_USART3_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80014a2:	f06f 0303 	mvn.w	r3, #3
 80014a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240001bc 	.word	0x240001bc

080014b8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_USART3_Init+0x60>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	220c      	movs	r2, #12
 80014d6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	895b      	ldrh	r3, [r3, #10]
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	891b      	ldrh	r3, [r3, #8]
 80014ee:	461a      	mov	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	899b      	ldrh	r3, [r3, #12]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001504:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f008 fca6 	bl	8009e58 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000008 	.word	0x24000008

0800151c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ff8d 	bl	8001440 <BSP_PB_Callback>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153a:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <COM1_MspInit+0xa8>)
 800153c:	f043 0308 	orr.w	r3, r3, #8
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001544:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	4a1e      	ldr	r2, [pc, #120]	@ (80015d4 <COM1_MspInit+0xa8>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <COM1_MspInit+0xa8>)
 8001582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800158e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001592:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	480b      	ldr	r0, [pc, #44]	@ (80015d8 <COM1_MspInit+0xac>)
 80015ac:	f004 f9e0 	bl	8005970 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80015b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80015ba:	2307      	movs	r3, #7
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <COM1_MspInit+0xac>)
 80015c6:	f004 f9d3 	bl	8005970 <HAL_GPIO_Init>
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	@ 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020c00 	.word	0x58020c00

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e2:	2003      	movs	r0, #3
 80015e4:	f001 ffd0 	bl	8003588 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015e8:	f005 f9d6 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_Init+0x68>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4913      	ldr	r1, [pc, #76]	@ (8001648 <HAL_Init+0x6c>)
 80015fa:	5ccb      	ldrb	r3, [r1, r3]
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	fa22 f303 	lsr.w	r3, r2, r3
 8001604:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_Init+0x68>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_Init+0x6c>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_Init+0x70>)
 800161e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_Init+0x74>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f814 	bl	8001654 <HAL_InitTick>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e002      	b.n	800163c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001636:	f7ff fb8d 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58024400 	.word	0x58024400
 8001648:	0800ae8c 	.word	0x0800ae8c
 800164c:	24000004 	.word	0x24000004
 8001650:	24000000 	.word	0x24000000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_InitTick+0x60>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e021      	b.n	80016ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_InitTick+0x64>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f001 ffb5 	bl	80035ee <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f001 ff7f 	bl	800359e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_InitTick+0x68>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24000028 	.word	0x24000028
 80016b8:	24000000 	.word	0x24000000
 80016bc:	24000024 	.word	0x24000024

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	@ (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	24000028 	.word	0x24000028
 80016e4:	24000250 	.word	0x24000250

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	24000250 	.word	0x24000250

08001700 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetREVID+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0c1b      	lsrs	r3, r3, #16
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	5c001000 	.word	0x5c001000

08001718 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <LL_ADC_SetChannelPreselection+0x24>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	0e9b      	lsrs	r3, r3, #26
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2201      	movs	r2, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	e015      	b.n	80017d0 <LL_ADC_SetChannelPreselection+0x50>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80017ba:	2320      	movs	r3, #32
 80017bc:	e003      	b.n	80017c6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	2201      	movs	r2, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	69d2      	ldr	r2, [r2, #28]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b087      	sub	sp, #28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3360      	adds	r3, #96	@ 0x60
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	430b      	orrs	r3, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	611a      	str	r2, [r3, #16]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3360      	adds	r3, #96	@ 0x60
 8001868:	461a      	mov	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]
  }
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3330      	adds	r3, #48	@ 0x30
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	211f      	movs	r1, #31
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 011f 	and.w	r1, r3, #31
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001900:	bf00      	nop
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f023 0203 	bic.w	r2, r3, #3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60da      	str	r2, [r3, #12]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3314      	adds	r3, #20
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0e5b      	lsrs	r3, r3, #25
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	0d1b      	lsrs	r3, r3, #20
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	2107      	movs	r1, #7
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	401a      	ands	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	0d1b      	lsrs	r3, r3, #20
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	431a      	orrs	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0318 	and.w	r3, r3, #24
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019d4:	40d9      	lsrs	r1, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	400b      	ands	r3, r1
 80019da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	000fffff 	.word	0x000fffff

080019f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 031f 	and.w	r3, r3, #31
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6093      	str	r3, [r2, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	5fffffc0 	.word	0x5fffffc0

08001a54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a68:	d101      	bne.n	8001a6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	6fffffc0 	.word	0x6fffffc0

08001aa4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <LL_ADC_Enable+0x24>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	7fffffc0 	.word	0x7fffffc0

08001af4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <LL_ADC_Disable+0x24>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	f043 0202 	orr.w	r2, r3, #2
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	7fffffc0 	.word	0x7fffffc0

08001b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_IsEnabled+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_IsEnabled+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsDisableOngoing+0x18>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsDisableOngoing+0x1a>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <LL_ADC_REG_StartConversion+0x24>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	7fffffc0 	.word	0x7fffffc0

08001b90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d101      	bne.n	8001bce <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e18f      	b.n	8001f16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff f8bf 	bl	8000d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff19 	bl	8001a54 <LL_ADC_IsDeepPowerDownEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff feff 	bl	8001a30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff34 	bl	8001aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d114      	bne.n	8001c6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff18 	bl	8001a7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c4c:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <HAL_ADC_Init+0x290>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	4a87      	ldr	r2, [pc, #540]	@ (8001e70 <HAL_ADC_Init+0x294>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c5e:	e002      	b.n	8001c66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff17 	bl	8001aa4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff77 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8001ca2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 8129 	bne.w	8001f04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 8125 	bne.w	8001f04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff24 	bl	8001b1c <LL_ADC_IsEnabled>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d136      	bne.n	8001d48 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a65      	ldr	r2, [pc, #404]	@ (8001e74 <HAL_ADC_Init+0x298>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_ADC_Init+0x112>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a63      	ldr	r2, [pc, #396]	@ (8001e78 <HAL_ADC_Init+0x29c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10e      	bne.n	8001d0c <HAL_ADC_Init+0x130>
 8001cee:	4861      	ldr	r0, [pc, #388]	@ (8001e74 <HAL_ADC_Init+0x298>)
 8001cf0:	f7ff ff14 	bl	8001b1c <LL_ADC_IsEnabled>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4860      	ldr	r0, [pc, #384]	@ (8001e78 <HAL_ADC_Init+0x29c>)
 8001cf8:	f7ff ff10 	bl	8001b1c <LL_ADC_IsEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4323      	orrs	r3, r4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e008      	b.n	8001d1e <HAL_ADC_Init+0x142>
 8001d0c:	485b      	ldr	r0, [pc, #364]	@ (8001e7c <HAL_ADC_Init+0x2a0>)
 8001d0e:	f7ff ff05 	bl	8001b1c <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a53      	ldr	r2, [pc, #332]	@ (8001e74 <HAL_ADC_Init+0x298>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_Init+0x15a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a51      	ldr	r2, [pc, #324]	@ (8001e78 <HAL_ADC_Init+0x29c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_Init+0x15e>
 8001d36:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <HAL_ADC_Init+0x2a4>)
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_Init+0x160>
 8001d3a:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_ADC_Init+0x2a8>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff fce8 	bl	8001718 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d48:	f7ff fcda 	bl	8001700 <HAL_GetREVID>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d914      	bls.n	8001d80 <HAL_ADC_Init+0x1a4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d110      	bne.n	8001d80 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7d5b      	ldrb	r3, [r3, #21]
 8001d62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d68:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d6e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7f1b      	ldrb	r3, [r3, #28]
 8001d74:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d76:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d78:	f043 030c 	orr.w	r3, r3, #12
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	e00d      	b.n	8001d9c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7d5b      	ldrb	r3, [r3, #21]
 8001d84:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d8a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d90:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7f1b      	ldrb	r3, [r3, #28]
 8001d96:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7f1b      	ldrb	r3, [r3, #28]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	045b      	lsls	r3, r3, #17
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_ADC_Init+0x2ac>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fed2 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8001dec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fedf 	bl	8001bb6 <LL_ADC_INJ_IsConversionOngoing>
 8001df8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d15f      	bne.n	8001ec0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d15c      	bne.n	8001ec0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7d1b      	ldrb	r3, [r3, #20]
 8001e0a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <HAL_ADC_Init+0x2b0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d130      	bne.n	8001e94 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_ADC_Init+0x2b4>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0411      	lsls	r1, r2, #16
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	611a      	str	r2, [r3, #16]
 8001e68:	e01c      	b.n	8001ea4 <HAL_ADC_Init+0x2c8>
 8001e6a:	bf00      	nop
 8001e6c:	24000000 	.word	0x24000000
 8001e70:	053e2d63 	.word	0x053e2d63
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40022100 	.word	0x40022100
 8001e7c:	58026000 	.word	0x58026000
 8001e80:	40022300 	.word	0x40022300
 8001e84:	58026300 	.word	0x58026300
 8001e88:	fff0c003 	.word	0xfff0c003
 8001e8c:	ffffbffc 	.word	0xffffbffc
 8001e90:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 ffba 	bl	8002e34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f023 010f 	bic.w	r1, r3, #15
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	1e5a      	subs	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee0:	e007      	b.n	8001ef2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 020f 	bic.w	r2, r2, #15
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f02:	e007      	b.n	8001f14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	f043 0210 	orr.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	bf00      	nop

08001f20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a55      	ldr	r2, [pc, #340]	@ (8002088 <HAL_ADC_Start_DMA+0x168>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_Start_DMA+0x20>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a54      	ldr	r2, [pc, #336]	@ (800208c <HAL_ADC_Start_DMA+0x16c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_Start_DMA+0x24>
 8001f40:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_ADC_Start_DMA+0x170>)
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_Start_DMA+0x26>
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_ADC_Start_DMA+0x174>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fd56 	bl	80019f8 <LL_ADC_GetMultimode>
 8001f4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fe1c 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 808c 	bne.w	8002078 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Start_DMA+0x4e>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e087      	b.n	800207e <HAL_ADC_Start_DMA+0x15e>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d002      	beq.n	8001f88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d170      	bne.n	800206a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fdd5 	bl	8002b38 <ADC_Enable>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d163      	bne.n	8002060 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_ADC_Start_DMA+0x178>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a37      	ldr	r2, [pc, #220]	@ (800208c <HAL_ADC_Start_DMA+0x16c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d002      	beq.n	8001fb8 <HAL_ADC_Start_DMA+0x98>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_Start_DMA+0x9a>
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_ADC_Start_DMA+0x168>)
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d002      	beq.n	8001fc8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f023 0206 	bic.w	r2, r3, #6
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fec:	e002      	b.n	8001ff4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	4a28      	ldr	r2, [pc, #160]	@ (800209c <HAL_ADC_Start_DMA+0x17c>)
 8001ffa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <HAL_ADC_Start_DMA+0x180>)
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	4a26      	ldr	r2, [pc, #152]	@ (80020a4 <HAL_ADC_Start_DMA+0x184>)
 800200a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	221c      	movs	r2, #28
 8002012:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0210 	orr.w	r2, r2, #16
 800202a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f7ff fc68 	bl	800190c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3340      	adds	r3, #64	@ 0x40
 8002046:	4619      	mov	r1, r3
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f001 feb0 	bl	8003db0 <HAL_DMA_Start_IT>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fd85 	bl	8001b68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800205e:	e00d      	b.n	800207c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002068:	e008      	b.n	800207c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002076:	e001      	b.n	800207c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800207c:	7dfb      	ldrb	r3, [r7, #23]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000
 800208c:	40022100 	.word	0x40022100
 8002090:	40022300 	.word	0x40022300
 8002094:	58026300 	.word	0x58026300
 8002098:	fffff0fe 	.word	0xfffff0fe
 800209c:	08002d0b 	.word	0x08002d0b
 80020a0:	08002de3 	.word	0x08002de3
 80020a4:	08002dff 	.word	0x08002dff

080020a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a87      	ldr	r2, [pc, #540]	@ (80022e8 <HAL_ADC_IRQHandler+0x240>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x30>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a86      	ldr	r2, [pc, #536]	@ (80022ec <HAL_ADC_IRQHandler+0x244>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_IRQHandler+0x34>
 80020d8:	4b85      	ldr	r3, [pc, #532]	@ (80022f0 <HAL_ADC_IRQHandler+0x248>)
 80020da:	e000      	b.n	80020de <HAL_ADC_IRQHandler+0x36>
 80020dc:	4b85      	ldr	r3, [pc, #532]	@ (80022f4 <HAL_ADC_IRQHandler+0x24c>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fc8a 	bl	80019f8 <LL_ADC_GetMultimode>
 80020e4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d017      	beq.n	8002120 <HAL_ADC_IRQHandler+0x78>
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f001 f880 	bl	8003218 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2202      	movs	r2, #2
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <HAL_ADC_IRQHandler+0x8c>
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8083 	beq.w	8002246 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07d      	beq.n	8002246 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fb91 	bl	800188e <LL_ADC_REG_IsTriggerSourceSWStart>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d062      	beq.n	8002238 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5d      	ldr	r2, [pc, #372]	@ (80022ec <HAL_ADC_IRQHandler+0x244>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d002      	beq.n	8002182 <HAL_ADC_IRQHandler+0xda>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	e000      	b.n	8002184 <HAL_ADC_IRQHandler+0xdc>
 8002182:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <HAL_ADC_IRQHandler+0x240>)
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	4293      	cmp	r3, r2
 800218a:	d008      	beq.n	800219e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d002      	beq.n	800219e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b09      	cmp	r3, #9
 800219c:	d104      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	e00c      	b.n	80021c2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	@ (80022ec <HAL_ADC_IRQHandler+0x244>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d002      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x110>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e000      	b.n	80021ba <HAL_ADC_IRQHandler+0x112>
 80021b8:	4b4b      	ldr	r3, [pc, #300]	@ (80022e8 <HAL_ADC_IRQHandler+0x240>)
 80021ba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d135      	bne.n	8002238 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d12e      	bne.n	8002238 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fcd6 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11a      	bne.n	8002220 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020c 	bic.w	r2, r2, #12
 80021f8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d112      	bne.n	8002238 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54
 800221e:	e00b      	b.n	8002238 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe f9e3 	bl	8000604 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <HAL_ADC_IRQHandler+0x1b2>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80a0 	beq.w	80023a6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 809a 	beq.w	80023a6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fb4f 	bl	8001932 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002294:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff faf7 	bl	800188e <LL_ADC_REG_IsTriggerSourceSWStart>
 80022a0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <HAL_ADC_IRQHandler+0x244>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d002      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x20a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	e000      	b.n	80022b4 <HAL_ADC_IRQHandler+0x20c>
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_ADC_IRQHandler+0x240>)
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d008      	beq.n	80022ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b06      	cmp	r3, #6
 80022c6:	d002      	beq.n	80022ce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b07      	cmp	r3, #7
 80022cc:	d104      	bne.n	80022d8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	e014      	b.n	8002302 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a03      	ldr	r2, [pc, #12]	@ (80022ec <HAL_ADC_IRQHandler+0x244>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00a      	beq.n	80022f8 <HAL_ADC_IRQHandler+0x250>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e008      	b.n	80022fa <HAL_ADC_IRQHandler+0x252>
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40022100 	.word	0x40022100
 80022f0:	40022300 	.word	0x40022300
 80022f4:	58026300 	.word	0x58026300
 80022f8:	4b84      	ldr	r3, [pc, #528]	@ (800250c <HAL_ADC_IRQHandler+0x464>)
 80022fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d047      	beq.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_ADC_IRQHandler+0x27a>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03f      	beq.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13a      	bne.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232c:	2b40      	cmp	r3, #64	@ 0x40
 800232e:	d133      	bne.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d12e      	bne.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fc39 	bl	8001bb6 <LL_ADC_INJ_IsConversionOngoing>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11a      	bne.n	8002380 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002358:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d112      	bne.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54
 800237e:	e00b      	b.n	8002398 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 ff15 	bl	80031c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2260      	movs	r2, #96	@ 0x60
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d011      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x32c>
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8b2 	bl	8002530 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2280      	movs	r2, #128	@ 0x80
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_ADC_IRQHandler+0x35c>
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fefb 	bl	80031f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002402:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <HAL_ADC_IRQHandler+0x38c>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 feed 	bl	8003204 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002432:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d043      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x41e>
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d03e      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
 8002454:	e021      	b.n	800249a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2a      	ldr	r2, [pc, #168]	@ (800250c <HAL_ADC_IRQHandler+0x464>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_ADC_IRQHandler+0x3c8>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a29      	ldr	r2, [pc, #164]	@ (8002510 <HAL_ADC_IRQHandler+0x468>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_ADC_IRQHandler+0x3cc>
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_ADC_IRQHandler+0x46c>)
 8002472:	e000      	b.n	8002476 <HAL_ADC_IRQHandler+0x3ce>
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_ADC_IRQHandler+0x470>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff facc 	bl	8001a14 <LL_ADC_GetMultiDMATransfer>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002482:	2301      	movs	r3, #1
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
 8002486:	e008      	b.n	800249a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10e      	bne.n	80024be <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	f043 0202 	orr.w	r2, r3, #2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f843 	bl	8002544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2210      	movs	r2, #16
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d018      	beq.n	8002502 <HAL_ADC_IRQHandler+0x45a>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d013      	beq.n	8002502 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fe6d 	bl	80031dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	@ 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000
 8002510:	40022100 	.word	0x40022100
 8002514:	40022300 	.word	0x40022300
 8002518:	58026300 	.word	0x58026300

0800251c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b08d      	sub	sp, #52	@ 0x34
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <HAL_ADC_ConfigChannel+0x1b0>)
 8002572:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x2a>
 800257e:	2302      	movs	r3, #2
 8002580:	e2c7      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x5ba>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fafe 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 82ac 	bne.w	8002af4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db2c      	blt.n	80025fe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x6a>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0e9b      	lsrs	r3, r3, #26
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2201      	movs	r2, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	e016      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x98>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	613b      	str	r3, [r7, #16]
  return result;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2201      	movs	r2, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	69d1      	ldr	r1, [r2, #28]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f7ff f952 	bl	80018b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fabb 	bl	8001b90 <LL_ADC_REG_IsConversionOngoing>
 800261a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fac8 	bl	8001bb6 <LL_ADC_INJ_IsConversionOngoing>
 8002626:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 80b8 	bne.w	80027a0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 80b4 	bne.w	80027a0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	461a      	mov	r2, r3
 8002646:	f7ff f987 	bl	8001958 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800264a:	4b30      	ldr	r3, [pc, #192]	@ (800270c <HAL_ADC_ConfigChannel+0x1b4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002656:	d10b      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x118>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	e01d      	b.n	80026ac <HAL_ADC_ConfigChannel+0x154>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x13e>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	e00a      	b.n	80026ac <HAL_ADC_ConfigChannel+0x154>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d02c      	beq.n	8002710 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f7ff f88f 	bl	80017e6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6919      	ldr	r1, [r3, #16]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7e5b      	ldrb	r3, [r3, #25]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_ADC_ConfigChannel+0x186>
 80026d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80026dc:	e000      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x188>
 80026de:	2300      	movs	r3, #0
 80026e0:	461a      	mov	r2, r3
 80026e2:	f7ff f8b9 	bl	8001858 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6919      	ldr	r1, [r3, #16]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	7e1b      	ldrb	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1a4>
 80026f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026fa:	e000      	b.n	80026fe <HAL_ADC_ConfigChannel+0x1a6>
 80026fc:	2300      	movs	r3, #0
 80026fe:	461a      	mov	r2, r3
 8002700:	f7ff f891 	bl	8001826 <LL_ADC_SetDataRightShift>
 8002704:	e04c      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x248>
 8002706:	bf00      	nop
 8002708:	47ff0000 	.word	0x47ff0000
 800270c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	069b      	lsls	r3, r3, #26
 8002720:	429a      	cmp	r2, r3
 8002722:	d107      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002732:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800273a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	429a      	cmp	r2, r3
 8002746:	d107      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002756:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800275e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800277a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002782:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800279e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff f9b9 	bl	8001b1c <LL_ADC_IsEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 81aa 	bne.w	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f7ff f8f6 	bl	80019b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4a87      	ldr	r2, [pc, #540]	@ (80029e8 <HAL_ADC_ConfigChannel+0x490>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f040 809a 	bne.w	8002904 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4984      	ldr	r1, [pc, #528]	@ (80029ec <HAL_ADC_ConfigChannel+0x494>)
 80027da:	428b      	cmp	r3, r1
 80027dc:	d147      	bne.n	800286e <HAL_ADC_ConfigChannel+0x316>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4983      	ldr	r1, [pc, #524]	@ (80029f0 <HAL_ADC_ConfigChannel+0x498>)
 80027e4:	428b      	cmp	r3, r1
 80027e6:	d040      	beq.n	800286a <HAL_ADC_ConfigChannel+0x312>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4981      	ldr	r1, [pc, #516]	@ (80029f4 <HAL_ADC_ConfigChannel+0x49c>)
 80027ee:	428b      	cmp	r3, r1
 80027f0:	d039      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x30e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4980      	ldr	r1, [pc, #512]	@ (80029f8 <HAL_ADC_ConfigChannel+0x4a0>)
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d032      	beq.n	8002862 <HAL_ADC_ConfigChannel+0x30a>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	497e      	ldr	r1, [pc, #504]	@ (80029fc <HAL_ADC_ConfigChannel+0x4a4>)
 8002802:	428b      	cmp	r3, r1
 8002804:	d02b      	beq.n	800285e <HAL_ADC_ConfigChannel+0x306>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	497d      	ldr	r1, [pc, #500]	@ (8002a00 <HAL_ADC_ConfigChannel+0x4a8>)
 800280c:	428b      	cmp	r3, r1
 800280e:	d024      	beq.n	800285a <HAL_ADC_ConfigChannel+0x302>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	497b      	ldr	r1, [pc, #492]	@ (8002a04 <HAL_ADC_ConfigChannel+0x4ac>)
 8002816:	428b      	cmp	r3, r1
 8002818:	d01d      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x2fe>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	497a      	ldr	r1, [pc, #488]	@ (8002a08 <HAL_ADC_ConfigChannel+0x4b0>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d016      	beq.n	8002852 <HAL_ADC_ConfigChannel+0x2fa>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4978      	ldr	r1, [pc, #480]	@ (8002a0c <HAL_ADC_ConfigChannel+0x4b4>)
 800282a:	428b      	cmp	r3, r1
 800282c:	d00f      	beq.n	800284e <HAL_ADC_ConfigChannel+0x2f6>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4977      	ldr	r1, [pc, #476]	@ (8002a10 <HAL_ADC_ConfigChannel+0x4b8>)
 8002834:	428b      	cmp	r3, r1
 8002836:	d008      	beq.n	800284a <HAL_ADC_ConfigChannel+0x2f2>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4975      	ldr	r1, [pc, #468]	@ (8002a14 <HAL_ADC_ConfigChannel+0x4bc>)
 800283e:	428b      	cmp	r3, r1
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2ee>
 8002842:	4b75      	ldr	r3, [pc, #468]	@ (8002a18 <HAL_ADC_ConfigChannel+0x4c0>)
 8002844:	e05a      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 8002846:	2300      	movs	r3, #0
 8002848:	e058      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 800284a:	4b74      	ldr	r3, [pc, #464]	@ (8002a1c <HAL_ADC_ConfigChannel+0x4c4>)
 800284c:	e056      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 800284e:	4b74      	ldr	r3, [pc, #464]	@ (8002a20 <HAL_ADC_ConfigChannel+0x4c8>)
 8002850:	e054      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 8002852:	4b6e      	ldr	r3, [pc, #440]	@ (8002a0c <HAL_ADC_ConfigChannel+0x4b4>)
 8002854:	e052      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 8002856:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_ADC_ConfigChannel+0x4b0>)
 8002858:	e050      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 800285a:	4b72      	ldr	r3, [pc, #456]	@ (8002a24 <HAL_ADC_ConfigChannel+0x4cc>)
 800285c:	e04e      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 800285e:	4b72      	ldr	r3, [pc, #456]	@ (8002a28 <HAL_ADC_ConfigChannel+0x4d0>)
 8002860:	e04c      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 8002862:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <HAL_ADC_ConfigChannel+0x4d4>)
 8002864:	e04a      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 8002866:	4b72      	ldr	r3, [pc, #456]	@ (8002a30 <HAL_ADC_ConfigChannel+0x4d8>)
 8002868:	e048      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 800286a:	2301      	movs	r3, #1
 800286c:	e046      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4970      	ldr	r1, [pc, #448]	@ (8002a34 <HAL_ADC_ConfigChannel+0x4dc>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d140      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x3a2>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	495c      	ldr	r1, [pc, #368]	@ (80029f0 <HAL_ADC_ConfigChannel+0x498>)
 800287e:	428b      	cmp	r3, r1
 8002880:	d039      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x39e>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	495b      	ldr	r1, [pc, #364]	@ (80029f4 <HAL_ADC_ConfigChannel+0x49c>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d032      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x39a>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4959      	ldr	r1, [pc, #356]	@ (80029f8 <HAL_ADC_ConfigChannel+0x4a0>)
 8002892:	428b      	cmp	r3, r1
 8002894:	d02b      	beq.n	80028ee <HAL_ADC_ConfigChannel+0x396>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4958      	ldr	r1, [pc, #352]	@ (80029fc <HAL_ADC_ConfigChannel+0x4a4>)
 800289c:	428b      	cmp	r3, r1
 800289e:	d024      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x392>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4956      	ldr	r1, [pc, #344]	@ (8002a00 <HAL_ADC_ConfigChannel+0x4a8>)
 80028a6:	428b      	cmp	r3, r1
 80028a8:	d01d      	beq.n	80028e6 <HAL_ADC_ConfigChannel+0x38e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4955      	ldr	r1, [pc, #340]	@ (8002a04 <HAL_ADC_ConfigChannel+0x4ac>)
 80028b0:	428b      	cmp	r3, r1
 80028b2:	d016      	beq.n	80028e2 <HAL_ADC_ConfigChannel+0x38a>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4953      	ldr	r1, [pc, #332]	@ (8002a08 <HAL_ADC_ConfigChannel+0x4b0>)
 80028ba:	428b      	cmp	r3, r1
 80028bc:	d00f      	beq.n	80028de <HAL_ADC_ConfigChannel+0x386>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4952      	ldr	r1, [pc, #328]	@ (8002a0c <HAL_ADC_ConfigChannel+0x4b4>)
 80028c4:	428b      	cmp	r3, r1
 80028c6:	d008      	beq.n	80028da <HAL_ADC_ConfigChannel+0x382>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4951      	ldr	r1, [pc, #324]	@ (8002a14 <HAL_ADC_ConfigChannel+0x4bc>)
 80028ce:	428b      	cmp	r3, r1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x37e>
 80028d2:	4b51      	ldr	r3, [pc, #324]	@ (8002a18 <HAL_ADC_ConfigChannel+0x4c0>)
 80028d4:	e012      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028d6:	2300      	movs	r3, #0
 80028d8:	e010      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028da:	4b51      	ldr	r3, [pc, #324]	@ (8002a20 <HAL_ADC_ConfigChannel+0x4c8>)
 80028dc:	e00e      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028de:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_ADC_ConfigChannel+0x4b4>)
 80028e0:	e00c      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028e2:	4b49      	ldr	r3, [pc, #292]	@ (8002a08 <HAL_ADC_ConfigChannel+0x4b0>)
 80028e4:	e00a      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a24 <HAL_ADC_ConfigChannel+0x4cc>)
 80028e8:	e008      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002a28 <HAL_ADC_ConfigChannel+0x4d0>)
 80028ec:	e006      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028ee:	4b4f      	ldr	r3, [pc, #316]	@ (8002a2c <HAL_ADC_ConfigChannel+0x4d4>)
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a30 <HAL_ADC_ConfigChannel+0x4d8>)
 80028f4:	e002      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3a4>
 80028fa:	2300      	movs	r3, #0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f7fe ff3e 	bl	8001780 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f280 80fc 	bge.w	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a36      	ldr	r2, [pc, #216]	@ (80029ec <HAL_ADC_ConfigChannel+0x494>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_ADC_ConfigChannel+0x3ca>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a45      	ldr	r2, [pc, #276]	@ (8002a34 <HAL_ADC_ConfigChannel+0x4dc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x3ce>
 8002922:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <HAL_ADC_ConfigChannel+0x4e0>)
 8002924:	e000      	b.n	8002928 <HAL_ADC_ConfigChannel+0x3d0>
 8002926:	4b45      	ldr	r3, [pc, #276]	@ (8002a3c <HAL_ADC_ConfigChannel+0x4e4>)
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe ff1b 	bl	8001764 <LL_ADC_GetCommonPathInternalCh>
 800292e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2d      	ldr	r2, [pc, #180]	@ (80029ec <HAL_ADC_ConfigChannel+0x494>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x3ec>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a34 <HAL_ADC_ConfigChannel+0x4dc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10e      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x40a>
 8002944:	4829      	ldr	r0, [pc, #164]	@ (80029ec <HAL_ADC_ConfigChannel+0x494>)
 8002946:	f7ff f8e9 	bl	8001b1c <LL_ADC_IsEnabled>
 800294a:	4604      	mov	r4, r0
 800294c:	4839      	ldr	r0, [pc, #228]	@ (8002a34 <HAL_ADC_ConfigChannel+0x4dc>)
 800294e:	f7ff f8e5 	bl	8001b1c <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	4323      	orrs	r3, r4
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e008      	b.n	8002974 <HAL_ADC_ConfigChannel+0x41c>
 8002962:	4837      	ldr	r0, [pc, #220]	@ (8002a40 <HAL_ADC_ConfigChannel+0x4e8>)
 8002964:	f7ff f8da 	bl	8001b1c <LL_ADC_IsEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b3 	beq.w	8002ae0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <HAL_ADC_ConfigChannel+0x4ec>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d165      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x4f8>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d160      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2b      	ldr	r2, [pc, #172]	@ (8002a40 <HAL_ADC_ConfigChannel+0x4e8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 80b6 	bne.w	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a13      	ldr	r2, [pc, #76]	@ (80029ec <HAL_ADC_ConfigChannel+0x494>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d004      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x456>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <HAL_ADC_ConfigChannel+0x4dc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x45a>
 80029ae:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <HAL_ADC_ConfigChannel+0x4e0>)
 80029b0:	e000      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x45c>
 80029b2:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <HAL_ADC_ConfigChannel+0x4e4>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029ba:	4619      	mov	r1, r3
 80029bc:	4610      	mov	r0, r2
 80029be:	f7fe febe 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c2:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_ADC_ConfigChannel+0x4f0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	4a20      	ldr	r2, [pc, #128]	@ (8002a4c <HAL_ADC_ConfigChannel+0x4f4>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	3301      	adds	r3, #1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80029d6:	e002      	b.n	80029de <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b01      	subs	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f9      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029e4:	e08f      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
 80029e6:	bf00      	nop
 80029e8:	47ff0000 	.word	0x47ff0000
 80029ec:	40022000 	.word	0x40022000
 80029f0:	04300002 	.word	0x04300002
 80029f4:	08600004 	.word	0x08600004
 80029f8:	0c900008 	.word	0x0c900008
 80029fc:	10c00010 	.word	0x10c00010
 8002a00:	14f00020 	.word	0x14f00020
 8002a04:	2a000400 	.word	0x2a000400
 8002a08:	2e300800 	.word	0x2e300800
 8002a0c:	32601000 	.word	0x32601000
 8002a10:	43210000 	.word	0x43210000
 8002a14:	4b840000 	.word	0x4b840000
 8002a18:	4fb80000 	.word	0x4fb80000
 8002a1c:	47520000 	.word	0x47520000
 8002a20:	36902000 	.word	0x36902000
 8002a24:	25b00200 	.word	0x25b00200
 8002a28:	21800100 	.word	0x21800100
 8002a2c:	1d500080 	.word	0x1d500080
 8002a30:	19200040 	.word	0x19200040
 8002a34:	40022100 	.word	0x40022100
 8002a38:	40022300 	.word	0x40022300
 8002a3c:	58026300 	.word	0x58026300
 8002a40:	58026000 	.word	0x58026000
 8002a44:	cb840000 	.word	0xcb840000
 8002a48:	24000000 	.word	0x24000000
 8002a4c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a31      	ldr	r2, [pc, #196]	@ (8002b1c <HAL_ADC_ConfigChannel+0x5c4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d11e      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x540>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d119      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a2d      	ldr	r2, [pc, #180]	@ (8002b20 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d14b      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2c      	ldr	r2, [pc, #176]	@ (8002b24 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x52a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b28 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x52e>
 8002a82:	4a2a      	ldr	r2, [pc, #168]	@ (8002b2c <HAL_ADC_ConfigChannel+0x5d4>)
 8002a84:	e000      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x530>
 8002a86:	4a2a      	ldr	r2, [pc, #168]	@ (8002b30 <HAL_ADC_ConfigChannel+0x5d8>)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7fe fe54 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a96:	e036      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	@ (8002b34 <HAL_ADC_ConfigChannel+0x5dc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d131      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d12c      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d127      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_ADC_ConfigChannel+0x5cc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x572>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x576>
 8002aca:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_ADC_ConfigChannel+0x5d4>)
 8002acc:	e000      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x578>
 8002ace:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <HAL_ADC_ConfigChannel+0x5d8>)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f7fe fe30 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
 8002ade:	e012      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002af2:	e008      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3734      	adds	r7, #52	@ 0x34
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	c7520000 	.word	0xc7520000
 8002b20:	58026000 	.word	0x58026000
 8002b24:	40022000 	.word	0x40022000
 8002b28:	40022100 	.word	0x40022100
 8002b2c:	40022300 	.word	0x40022300
 8002b30:	58026300 	.word	0x58026300
 8002b34:	cfb80000 	.word	0xcfb80000

08002b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe ffe9 	bl	8001b1c <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d16e      	bne.n	8002c2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <ADC_Enable+0x100>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e05a      	b.n	8002c30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe ffa4 	bl	8001acc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b84:	f7fe fdb0 	bl	80016e8 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <ADC_Enable+0x104>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <ADC_Enable+0x66>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a29      	ldr	r2, [pc, #164]	@ (8002c40 <ADC_Enable+0x108>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <ADC_Enable+0x6a>
 8002b9e:	4b29      	ldr	r3, [pc, #164]	@ (8002c44 <ADC_Enable+0x10c>)
 8002ba0:	e000      	b.n	8002ba4 <ADC_Enable+0x6c>
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <ADC_Enable+0x110>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe ff27 	bl	80019f8 <LL_ADC_GetMultimode>
 8002baa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <ADC_Enable+0x108>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d002      	beq.n	8002bbc <ADC_Enable+0x84>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e000      	b.n	8002bbe <ADC_Enable+0x86>
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <ADC_Enable+0x104>)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02c      	beq.n	8002c20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d130      	bne.n	8002c2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bcc:	e028      	b.n	8002c20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe ffa2 	bl	8001b1c <LL_ADC_IsEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe ff72 	bl	8001acc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be8:	f7fe fd7e 	bl	80016e8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d914      	bls.n	8002c20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d00d      	beq.n	8002c20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d1cf      	bne.n	8002bce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	8000003f 	.word	0x8000003f
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40022100 	.word	0x40022100
 8002c44:	40022300 	.word	0x40022300
 8002c48:	58026300 	.word	0x58026300

08002c4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe ff72 	bl	8001b42 <LL_ADC_IsDisableOngoing>
 8002c5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ff59 	bl	8001b1c <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d047      	beq.n	8002d00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d144      	bne.n	8002d00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030d 	and.w	r3, r3, #13
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10c      	bne.n	8002c9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ff33 	bl	8001af4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2203      	movs	r2, #3
 8002c94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c96:	f7fe fd27 	bl	80016e8 <HAL_GetTick>
 8002c9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c9c:	e029      	b.n	8002cf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e023      	b.n	8002d02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cba:	f7fe fd15 	bl	80016e8 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d914      	bls.n	8002cf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1dc      	bne.n	8002cba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d14b      	bne.n	8002dbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fda3 	bl	800188e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d032      	beq.n	8002db4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12b      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d80:	e018      	b.n	8002db4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7fd fc25 	bl	8000604 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dba:	e00e      	b.n	8002dda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fbbb 	bl	8002544 <HAL_ADC_ErrorCallback>
}
 8002dce:	e004      	b.n	8002dda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fb93 	bl	800251c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fb8d 	bl	8002544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a7a      	ldr	r2, [pc, #488]	@ (800302c <ADC_ConfigureBoostMode+0x1f8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <ADC_ConfigureBoostMode+0x1c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a79      	ldr	r2, [pc, #484]	@ (8003030 <ADC_ConfigureBoostMode+0x1fc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d109      	bne.n	8002e64 <ADC_ConfigureBoostMode+0x30>
 8002e50:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <ADC_ConfigureBoostMode+0x200>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e008      	b.n	8002e76 <ADC_ConfigureBoostMode+0x42>
 8002e64:	4b74      	ldr	r3, [pc, #464]	@ (8003038 <ADC_ConfigureBoostMode+0x204>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01c      	beq.n	8002eb4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e7a:	f003 ff07 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8002e7e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e88:	d010      	beq.n	8002eac <ADC_ConfigureBoostMode+0x78>
 8002e8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002e8e:	d873      	bhi.n	8002f78 <ADC_ConfigureBoostMode+0x144>
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d002      	beq.n	8002e9c <ADC_ConfigureBoostMode+0x68>
 8002e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e9a:	d16d      	bne.n	8002f78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
        break;
 8002eaa:	e068      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	60fb      	str	r3, [r7, #12]
        break;
 8002eb2:	e064      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002eb4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	f005 f94c 	bl	8008158 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ec0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002eca:	d051      	beq.n	8002f70 <ADC_ConfigureBoostMode+0x13c>
 8002ecc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ed0:	d854      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002ed2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002ed6:	d047      	beq.n	8002f68 <ADC_ConfigureBoostMode+0x134>
 8002ed8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002edc:	d84e      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002ede:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ee2:	d03d      	beq.n	8002f60 <ADC_ConfigureBoostMode+0x12c>
 8002ee4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002ee8:	d848      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eee:	d033      	beq.n	8002f58 <ADC_ConfigureBoostMode+0x124>
 8002ef0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ef4:	d842      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002ef6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002efa:	d029      	beq.n	8002f50 <ADC_ConfigureBoostMode+0x11c>
 8002efc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f00:	d83c      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002f02:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f06:	d01a      	beq.n	8002f3e <ADC_ConfigureBoostMode+0x10a>
 8002f08:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002f0c:	d836      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002f0e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f12:	d014      	beq.n	8002f3e <ADC_ConfigureBoostMode+0x10a>
 8002f14:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002f18:	d830      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1e:	d00e      	beq.n	8002f3e <ADC_ConfigureBoostMode+0x10a>
 8002f20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f24:	d82a      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002f26:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f2a:	d008      	beq.n	8002f3e <ADC_ConfigureBoostMode+0x10a>
 8002f2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f30:	d824      	bhi.n	8002f7c <ADC_ConfigureBoostMode+0x148>
 8002f32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f36:	d002      	beq.n	8002f3e <ADC_ConfigureBoostMode+0x10a>
 8002f38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f3c:	d11e      	bne.n	8002f7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
        break;
 8002f4e:	e016      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
        break;
 8002f56:	e012      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	60fb      	str	r3, [r7, #12]
        break;
 8002f5e:	e00e      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	60fb      	str	r3, [r7, #12]
        break;
 8002f66:	e00a      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	09db      	lsrs	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
        break;
 8002f6e:	e006      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	60fb      	str	r3, [r7, #12]
        break;
 8002f76:	e002      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002f7c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f7e:	f7fe fbbf 	bl	8001700 <HAL_GetREVID>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d815      	bhi.n	8002fb8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <ADC_ConfigureBoostMode+0x208>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d908      	bls.n	8002fa6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fa2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002fa4:	e03e      	b.n	8003024 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb4:	609a      	str	r2, [r3, #8]
}
 8002fb6:	e035      	b.n	8003024 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003040 <ADC_ConfigureBoostMode+0x20c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d808      	bhi.n	8002fd8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002fd4:	609a      	str	r2, [r3, #8]
}
 8002fd6:	e025      	b.n	8003024 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a1a      	ldr	r2, [pc, #104]	@ (8003044 <ADC_ConfigureBoostMode+0x210>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d80a      	bhi.n	8002ff6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	e016      	b.n	8003024 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a13      	ldr	r2, [pc, #76]	@ (8003048 <ADC_ConfigureBoostMode+0x214>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d80a      	bhi.n	8003014 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	e007      	b.n	8003024 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003022:	609a      	str	r2, [r3, #8]
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40022000 	.word	0x40022000
 8003030:	40022100 	.word	0x40022100
 8003034:	40022300 	.word	0x40022300
 8003038:	58026300 	.word	0x58026300
 800303c:	01312d00 	.word	0x01312d00
 8003040:	005f5e10 	.word	0x005f5e10
 8003044:	00bebc20 	.word	0x00bebc20
 8003048:	017d7840 	.word	0x017d7840

0800304c <LL_ADC_IsEnabled>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <LL_ADC_IsEnabled+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_ADC_IsEnabled+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <LL_ADC_StartCalibration>:
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <LL_ADC_StartCalibration+0x38>)
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003094:	430a      	orrs	r2, r1
 8003096:	4313      	orrs	r3, r2
 8003098:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	3ffeffc0 	.word	0x3ffeffc0

080030b0 <LL_ADC_IsCalibrationOnGoing>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030c4:	d101      	bne.n	80030ca <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <LL_ADC_REG_IsConversionOngoing>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d101      	bne.n	80030f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_ADCEx_Calibration_Start+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e04c      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff fd90 	bl	8002c4c <ADC_Disable>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d135      	bne.n	80031a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313a:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800313c:	4013      	ands	r3, r2
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff90 	bl	8003074 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003154:	e014      	b.n	8003180 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d30d      	bcc.n	8003180 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f023 0312 	bic.w	r3, r3, #18
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e01b      	b.n	80031b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff93 	bl	80030b0 <LL_ADC_IsCalibrationOnGoing>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e2      	bne.n	8003156 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
 80031a0:	e005      	b.n	80031ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	ffffeefd 	.word	0xffffeefd
 80031c4:	25c3f800 	.word	0x25c3f800

080031c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b09f      	sub	sp, #124	@ 0x7c
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003246:	2302      	movs	r3, #2
 8003248:	e0be      	b.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003256:	2300      	movs	r3, #0
 8003258:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a5c      	ldr	r2, [pc, #368]	@ (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d102      	bne.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003264:	4b5b      	ldr	r3, [pc, #364]	@ (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	e001      	b.n	800326e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e09d      	b.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff22 	bl	80030d8 <LL_ADC_REG_IsConversionOngoing>
 8003294:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff1c 	bl	80030d8 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d17f      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d17c      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a47      	ldr	r2, [pc, #284]	@ (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a46      	ldr	r2, [pc, #280]	@ (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032c0:	4b45      	ldr	r3, [pc, #276]	@ (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032c4:	4b45      	ldr	r3, [pc, #276]	@ (80033dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d039      	beq.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80032d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	431a      	orrs	r2, r3
 80032de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a3a      	ldr	r2, [pc, #232]	@ (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a38      	ldr	r2, [pc, #224]	@ (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10e      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032f6:	4836      	ldr	r0, [pc, #216]	@ (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032f8:	f7ff fea8 	bl	800304c <LL_ADC_IsEnabled>
 80032fc:	4604      	mov	r4, r0
 80032fe:	4835      	ldr	r0, [pc, #212]	@ (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003300:	f7ff fea4 	bl	800304c <LL_ADC_IsEnabled>
 8003304:	4603      	mov	r3, r0
 8003306:	4323      	orrs	r3, r4
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e008      	b.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003314:	4832      	ldr	r0, [pc, #200]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003316:	f7ff fe99 	bl	800304c <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d047      	beq.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800332a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b2d      	ldr	r3, [pc, #180]	@ (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003330:	4013      	ands	r3, r2
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6811      	ldr	r1, [r2, #0]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	6892      	ldr	r2, [r2, #8]
 800333a:	430a      	orrs	r2, r1
 800333c:	431a      	orrs	r2, r3
 800333e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003340:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003342:	e03a      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800334c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1d      	ldr	r2, [pc, #116]	@ (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10e      	bne.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003364:	481a      	ldr	r0, [pc, #104]	@ (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003366:	f7ff fe71 	bl	800304c <LL_ADC_IsEnabled>
 800336a:	4604      	mov	r4, r0
 800336c:	4819      	ldr	r0, [pc, #100]	@ (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800336e:	f7ff fe6d 	bl	800304c <LL_ADC_IsEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	4323      	orrs	r3, r4
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	e008      	b.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003382:	4817      	ldr	r0, [pc, #92]	@ (80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003384:	f7ff fe62 	bl	800304c <LL_ADC_IsEnabled>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b11      	ldr	r3, [pc, #68]	@ (80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800339e:	4013      	ands	r3, r2
 80033a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033a4:	e009      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80033b8:	e000      	b.n	80033bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	377c      	adds	r7, #124	@ 0x7c
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	40022000 	.word	0x40022000
 80033d4:	40022100 	.word	0x40022100
 80033d8:	40022300 	.word	0x40022300
 80033dc:	58026300 	.word	0x58026300
 80033e0:	58026000 	.word	0x58026000
 80033e4:	fffff0e0 	.word	0xfffff0e0

080033e8 <__NVIC_SetPriorityGrouping>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <__NVIC_SetPriorityGrouping+0x40>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003404:	4013      	ands	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <__NVIC_SetPriorityGrouping+0x44>)
 8003412:	4313      	orrs	r3, r2
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <__NVIC_SetPriorityGrouping+0x40>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00
 800342c:	05fa0000 	.word	0x05fa0000

08003430 <__NVIC_GetPriorityGrouping>:
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <__NVIC_GetPriorityGrouping+0x18>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 0307 	and.w	r3, r3, #7
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_EnableIRQ>:
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0b      	blt.n	8003476 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4907      	ldr	r1, [pc, #28]	@ (8003484 <__NVIC_EnableIRQ+0x38>)
 8003466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_SetPriority>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0a      	blt.n	80034b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	490c      	ldr	r1, [pc, #48]	@ (80034d4 <__NVIC_SetPriority+0x4c>)
 80034a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034b0:	e00a      	b.n	80034c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4908      	ldr	r1, [pc, #32]	@ (80034d8 <__NVIC_SetPriority+0x50>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3b04      	subs	r3, #4
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <NVIC_EncodePriority>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf28      	it	cs
 80034fa:	2304      	movcs	r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3304      	adds	r3, #4
 8003502:	2b06      	cmp	r3, #6
 8003504:	d902      	bls.n	800350c <NVIC_EncodePriority+0x30>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b03      	subs	r3, #3
 800350a:	e000      	b.n	800350e <NVIC_EncodePriority+0x32>
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	f04f 32ff 	mov.w	r2, #4294967295
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003524:	f04f 31ff 	mov.w	r1, #4294967295
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43d9      	mvns	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	4313      	orrs	r3, r2
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	@ 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3b01      	subs	r3, #1
 8003550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003554:	d301      	bcc.n	800355a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003556:	2301      	movs	r3, #1
 8003558:	e00f      	b.n	800357a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355a:	4a0a      	ldr	r2, [pc, #40]	@ (8003584 <SysTick_Config+0x40>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3b01      	subs	r3, #1
 8003560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003562:	210f      	movs	r1, #15
 8003564:	f04f 30ff 	mov.w	r0, #4294967295
 8003568:	f7ff ff8e 	bl	8003488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800356c:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <SysTick_Config+0x40>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003572:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <SysTick_Config+0x40>)
 8003574:	2207      	movs	r2, #7
 8003576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000e010 	.word	0xe000e010

08003588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff29 	bl	80033e8 <__NVIC_SetPriorityGrouping>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035ac:	f7ff ff40 	bl	8003430 <__NVIC_GetPriorityGrouping>
 80035b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	6978      	ldr	r0, [r7, #20]
 80035b8:	f7ff ff90 	bl	80034dc <NVIC_EncodePriority>
 80035bc:	4602      	mov	r2, r0
 80035be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff5f 	bl	8003488 <__NVIC_SetPriority>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff33 	bl	800344c <__NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ffa4 	bl	8003544 <SysTick_Config>
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800360c:	f3bf 8f5f 	dmb	sy
}
 8003610:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_MPU_Disable+0x28>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	4a06      	ldr	r2, [pc, #24]	@ (8003630 <HAL_MPU_Disable+0x28>)
 8003618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_MPU_Disable+0x2c>)
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00
 8003634:	e000ed90 	.word	0xe000ed90

08003638 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003640:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <HAL_MPU_Enable+0x38>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800364a:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <HAL_MPU_Enable+0x3c>)
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <HAL_MPU_Enable+0x3c>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003654:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003656:	f3bf 8f4f 	dsb	sy
}
 800365a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800365c:	f3bf 8f6f 	isb	sy
}
 8003660:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed90 	.word	0xe000ed90
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	785a      	ldrb	r2, [r3, #1]
 8003684:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_MPU_ConfigRegion+0x7c>)
 8003686:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003688:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <HAL_MPU_ConfigRegion+0x7c>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	4a19      	ldr	r2, [pc, #100]	@ (80036f4 <HAL_MPU_ConfigRegion+0x7c>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003694:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <HAL_MPU_ConfigRegion+0x7c>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7b1b      	ldrb	r3, [r3, #12]
 80036a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7adb      	ldrb	r3, [r3, #11]
 80036a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7a9b      	ldrb	r3, [r3, #10]
 80036ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80036b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7b5b      	ldrb	r3, [r3, #13]
 80036b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80036b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7b9b      	ldrb	r3, [r3, #14]
 80036be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80036c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7bdb      	ldrb	r3, [r3, #15]
 80036c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80036c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7a5b      	ldrb	r3, [r3, #9]
 80036ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80036d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7a1b      	ldrb	r3, [r3, #8]
 80036d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80036d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80036e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036e4:	6113      	str	r3, [r2, #16]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000ed90 	.word	0xe000ed90

080036f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003700:	f7fd fff2 	bl	80016e8 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e316      	b.n	8003d3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a66      	ldr	r2, [pc, #408]	@ (80038b0 <HAL_DMA_Init+0x1b8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d04a      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a65      	ldr	r2, [pc, #404]	@ (80038b4 <HAL_DMA_Init+0x1bc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d045      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a63      	ldr	r2, [pc, #396]	@ (80038b8 <HAL_DMA_Init+0x1c0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d040      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a62      	ldr	r2, [pc, #392]	@ (80038bc <HAL_DMA_Init+0x1c4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d03b      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a60      	ldr	r2, [pc, #384]	@ (80038c0 <HAL_DMA_Init+0x1c8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d036      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a5f      	ldr	r2, [pc, #380]	@ (80038c4 <HAL_DMA_Init+0x1cc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d031      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a5d      	ldr	r2, [pc, #372]	@ (80038c8 <HAL_DMA_Init+0x1d0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02c      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a5c      	ldr	r2, [pc, #368]	@ (80038cc <HAL_DMA_Init+0x1d4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d027      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5a      	ldr	r2, [pc, #360]	@ (80038d0 <HAL_DMA_Init+0x1d8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d022      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a59      	ldr	r2, [pc, #356]	@ (80038d4 <HAL_DMA_Init+0x1dc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d01d      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a57      	ldr	r2, [pc, #348]	@ (80038d8 <HAL_DMA_Init+0x1e0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d018      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a56      	ldr	r2, [pc, #344]	@ (80038dc <HAL_DMA_Init+0x1e4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a54      	ldr	r2, [pc, #336]	@ (80038e0 <HAL_DMA_Init+0x1e8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00e      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a53      	ldr	r2, [pc, #332]	@ (80038e4 <HAL_DMA_Init+0x1ec>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d009      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a51      	ldr	r2, [pc, #324]	@ (80038e8 <HAL_DMA_Init+0x1f0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_DMA_Init+0xb8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a50      	ldr	r2, [pc, #320]	@ (80038ec <HAL_DMA_Init+0x1f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_DMA_Init+0xbc>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_DMA_Init+0xbe>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 813b 	beq.w	8003a32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a37      	ldr	r2, [pc, #220]	@ (80038b0 <HAL_DMA_Init+0x1b8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d04a      	beq.n	800386c <HAL_DMA_Init+0x174>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a36      	ldr	r2, [pc, #216]	@ (80038b4 <HAL_DMA_Init+0x1bc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d045      	beq.n	800386c <HAL_DMA_Init+0x174>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a34      	ldr	r2, [pc, #208]	@ (80038b8 <HAL_DMA_Init+0x1c0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d040      	beq.n	800386c <HAL_DMA_Init+0x174>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a33      	ldr	r2, [pc, #204]	@ (80038bc <HAL_DMA_Init+0x1c4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d03b      	beq.n	800386c <HAL_DMA_Init+0x174>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a31      	ldr	r2, [pc, #196]	@ (80038c0 <HAL_DMA_Init+0x1c8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d036      	beq.n	800386c <HAL_DMA_Init+0x174>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a30      	ldr	r2, [pc, #192]	@ (80038c4 <HAL_DMA_Init+0x1cc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d031      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2e      	ldr	r2, [pc, #184]	@ (80038c8 <HAL_DMA_Init+0x1d0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02c      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a2d      	ldr	r2, [pc, #180]	@ (80038cc <HAL_DMA_Init+0x1d4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d027      	beq.n	800386c <HAL_DMA_Init+0x174>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2b      	ldr	r2, [pc, #172]	@ (80038d0 <HAL_DMA_Init+0x1d8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <HAL_DMA_Init+0x1dc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a28      	ldr	r2, [pc, #160]	@ (80038d8 <HAL_DMA_Init+0x1e0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <HAL_DMA_Init+0x174>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a27      	ldr	r2, [pc, #156]	@ (80038dc <HAL_DMA_Init+0x1e4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a25      	ldr	r2, [pc, #148]	@ (80038e0 <HAL_DMA_Init+0x1e8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_DMA_Init+0x174>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a24      	ldr	r2, [pc, #144]	@ (80038e4 <HAL_DMA_Init+0x1ec>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a22      	ldr	r2, [pc, #136]	@ (80038e8 <HAL_DMA_Init+0x1f0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_DMA_Init+0x174>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a21      	ldr	r2, [pc, #132]	@ (80038ec <HAL_DMA_Init+0x1f4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <HAL_DMA_Init+0x186>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0201 	bic.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e007      	b.n	800388e <HAL_DMA_Init+0x196>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800388e:	e02f      	b.n	80038f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003890:	f7fd ff2a 	bl	80016e8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b05      	cmp	r3, #5
 800389c:	d928      	bls.n	80038f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2203      	movs	r2, #3
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e246      	b.n	8003d3e <HAL_DMA_Init+0x646>
 80038b0:	40020010 	.word	0x40020010
 80038b4:	40020028 	.word	0x40020028
 80038b8:	40020040 	.word	0x40020040
 80038bc:	40020058 	.word	0x40020058
 80038c0:	40020070 	.word	0x40020070
 80038c4:	40020088 	.word	0x40020088
 80038c8:	400200a0 	.word	0x400200a0
 80038cc:	400200b8 	.word	0x400200b8
 80038d0:	40020410 	.word	0x40020410
 80038d4:	40020428 	.word	0x40020428
 80038d8:	40020440 	.word	0x40020440
 80038dc:	40020458 	.word	0x40020458
 80038e0:	40020470 	.word	0x40020470
 80038e4:	40020488 	.word	0x40020488
 80038e8:	400204a0 	.word	0x400204a0
 80038ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1c8      	bne.n	8003890 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4b83      	ldr	r3, [pc, #524]	@ (8003b18 <HAL_DMA_Init+0x420>)
 800390a:	4013      	ands	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003916:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003922:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	2b04      	cmp	r3, #4
 8003942:	d107      	bne.n	8003954 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	4313      	orrs	r3, r2
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003954:	4b71      	ldr	r3, [pc, #452]	@ (8003b1c <HAL_DMA_Init+0x424>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b71      	ldr	r3, [pc, #452]	@ (8003b20 <HAL_DMA_Init+0x428>)
 800395a:	4013      	ands	r3, r2
 800395c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003960:	d328      	bcc.n	80039b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b28      	cmp	r3, #40	@ 0x28
 8003968:	d903      	bls.n	8003972 <HAL_DMA_Init+0x27a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003970:	d917      	bls.n	80039a2 <HAL_DMA_Init+0x2aa>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b3e      	cmp	r3, #62	@ 0x3e
 8003978:	d903      	bls.n	8003982 <HAL_DMA_Init+0x28a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b42      	cmp	r3, #66	@ 0x42
 8003980:	d90f      	bls.n	80039a2 <HAL_DMA_Init+0x2aa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b46      	cmp	r3, #70	@ 0x46
 8003988:	d903      	bls.n	8003992 <HAL_DMA_Init+0x29a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b48      	cmp	r3, #72	@ 0x48
 8003990:	d907      	bls.n	80039a2 <HAL_DMA_Init+0x2aa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b4e      	cmp	r3, #78	@ 0x4e
 8003998:	d905      	bls.n	80039a6 <HAL_DMA_Init+0x2ae>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b52      	cmp	r3, #82	@ 0x52
 80039a0:	d801      	bhi.n	80039a6 <HAL_DMA_Init+0x2ae>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_DMA_Init+0x2b0>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d117      	bne.n	8003a0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f001 fdcf 	bl	8005594 <DMA_CheckFifoParam>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2240      	movs	r2, #64	@ 0x40
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e197      	b.n	8003d3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 fd0a 	bl	8005430 <DMA_CalcBaseAndBitshift>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	223f      	movs	r2, #63	@ 0x3f
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	e0cd      	b.n	8003bce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3b      	ldr	r2, [pc, #236]	@ (8003b24 <HAL_DMA_Init+0x42c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a39      	ldr	r2, [pc, #228]	@ (8003b28 <HAL_DMA_Init+0x430>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d01d      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a38      	ldr	r2, [pc, #224]	@ (8003b2c <HAL_DMA_Init+0x434>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a36      	ldr	r2, [pc, #216]	@ (8003b30 <HAL_DMA_Init+0x438>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a35      	ldr	r2, [pc, #212]	@ (8003b34 <HAL_DMA_Init+0x43c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a33      	ldr	r2, [pc, #204]	@ (8003b38 <HAL_DMA_Init+0x440>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a32      	ldr	r2, [pc, #200]	@ (8003b3c <HAL_DMA_Init+0x444>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_DMA_Init+0x38a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	@ (8003b40 <HAL_DMA_Init+0x448>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <HAL_DMA_Init+0x38e>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_DMA_Init+0x390>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8097 	beq.w	8003bbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <HAL_DMA_Init+0x42c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d021      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a22      	ldr	r2, [pc, #136]	@ (8003b28 <HAL_DMA_Init+0x430>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01c      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a21      	ldr	r2, [pc, #132]	@ (8003b2c <HAL_DMA_Init+0x434>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d017      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b30 <HAL_DMA_Init+0x438>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d012      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1e      	ldr	r2, [pc, #120]	@ (8003b34 <HAL_DMA_Init+0x43c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00d      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <HAL_DMA_Init+0x440>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d008      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1b      	ldr	r2, [pc, #108]	@ (8003b3c <HAL_DMA_Init+0x444>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_Init+0x3e4>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <HAL_DMA_Init+0x448>)
 8003ada:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <HAL_DMA_Init+0x44c>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b40      	cmp	r3, #64	@ 0x40
 8003b02:	d021      	beq.n	8003b48 <HAL_DMA_Init+0x450>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b80      	cmp	r3, #128	@ 0x80
 8003b0a:	d102      	bne.n	8003b12 <HAL_DMA_Init+0x41a>
 8003b0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b10:	e01b      	b.n	8003b4a <HAL_DMA_Init+0x452>
 8003b12:	2300      	movs	r3, #0
 8003b14:	e019      	b.n	8003b4a <HAL_DMA_Init+0x452>
 8003b16:	bf00      	nop
 8003b18:	fe10803f 	.word	0xfe10803f
 8003b1c:	5c001000 	.word	0x5c001000
 8003b20:	ffff0000 	.word	0xffff0000
 8003b24:	58025408 	.word	0x58025408
 8003b28:	5802541c 	.word	0x5802541c
 8003b2c:	58025430 	.word	0x58025430
 8003b30:	58025444 	.word	0x58025444
 8003b34:	58025458 	.word	0x58025458
 8003b38:	5802546c 	.word	0x5802546c
 8003b3c:	58025480 	.word	0x58025480
 8003b40:	58025494 	.word	0x58025494
 8003b44:	fffe000f 	.word	0xfffe000f
 8003b48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68d2      	ldr	r2, [r2, #12]
 8003b4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003d48 <HAL_DMA_Init+0x650>)
 8003b90:	4413      	add	r3, r2
 8003b92:	4a6e      	ldr	r2, [pc, #440]	@ (8003d4c <HAL_DMA_Init+0x654>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	009a      	lsls	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f001 fc45 	bl	8005430 <DMA_CalcBaseAndBitshift>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	e008      	b.n	8003bce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2240      	movs	r2, #64	@ 0x40
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0b7      	b.n	8003d3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8003d50 <HAL_DMA_Init+0x658>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d072      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d54 <HAL_DMA_Init+0x65c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d06d      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d58 <HAL_DMA_Init+0x660>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d068      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d5c <HAL_DMA_Init+0x664>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d063      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a59      	ldr	r2, [pc, #356]	@ (8003d60 <HAL_DMA_Init+0x668>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d05e      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a57      	ldr	r2, [pc, #348]	@ (8003d64 <HAL_DMA_Init+0x66c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d059      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a56      	ldr	r2, [pc, #344]	@ (8003d68 <HAL_DMA_Init+0x670>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d054      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a54      	ldr	r2, [pc, #336]	@ (8003d6c <HAL_DMA_Init+0x674>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04f      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a53      	ldr	r2, [pc, #332]	@ (8003d70 <HAL_DMA_Init+0x678>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04a      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	@ (8003d74 <HAL_DMA_Init+0x67c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d045      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a50      	ldr	r2, [pc, #320]	@ (8003d78 <HAL_DMA_Init+0x680>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a4e      	ldr	r2, [pc, #312]	@ (8003d7c <HAL_DMA_Init+0x684>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a4d      	ldr	r2, [pc, #308]	@ (8003d80 <HAL_DMA_Init+0x688>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d036      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a4b      	ldr	r2, [pc, #300]	@ (8003d84 <HAL_DMA_Init+0x68c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d88 <HAL_DMA_Init+0x690>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02c      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a48      	ldr	r2, [pc, #288]	@ (8003d8c <HAL_DMA_Init+0x694>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a47      	ldr	r2, [pc, #284]	@ (8003d90 <HAL_DMA_Init+0x698>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a45      	ldr	r2, [pc, #276]	@ (8003d94 <HAL_DMA_Init+0x69c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a44      	ldr	r2, [pc, #272]	@ (8003d98 <HAL_DMA_Init+0x6a0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a42      	ldr	r2, [pc, #264]	@ (8003d9c <HAL_DMA_Init+0x6a4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a41      	ldr	r2, [pc, #260]	@ (8003da0 <HAL_DMA_Init+0x6a8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8003da4 <HAL_DMA_Init+0x6ac>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3e      	ldr	r2, [pc, #248]	@ (8003da8 <HAL_DMA_Init+0x6b0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_DMA_Init+0x5c6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dac <HAL_DMA_Init+0x6b4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_DMA_Init+0x5ca>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_DMA_Init+0x5cc>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d032      	beq.n	8003d2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f001 fcdf 	bl	800568c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b80      	cmp	r3, #128	@ 0x80
 8003cd4:	d102      	bne.n	8003cdc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cf0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_DMA_Init+0x624>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d80c      	bhi.n	8003d1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f001 fd5c 	bl	80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e008      	b.n	8003d2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	a7fdabf8 	.word	0xa7fdabf8
 8003d4c:	cccccccd 	.word	0xcccccccd
 8003d50:	40020010 	.word	0x40020010
 8003d54:	40020028 	.word	0x40020028
 8003d58:	40020040 	.word	0x40020040
 8003d5c:	40020058 	.word	0x40020058
 8003d60:	40020070 	.word	0x40020070
 8003d64:	40020088 	.word	0x40020088
 8003d68:	400200a0 	.word	0x400200a0
 8003d6c:	400200b8 	.word	0x400200b8
 8003d70:	40020410 	.word	0x40020410
 8003d74:	40020428 	.word	0x40020428
 8003d78:	40020440 	.word	0x40020440
 8003d7c:	40020458 	.word	0x40020458
 8003d80:	40020470 	.word	0x40020470
 8003d84:	40020488 	.word	0x40020488
 8003d88:	400204a0 	.word	0x400204a0
 8003d8c:	400204b8 	.word	0x400204b8
 8003d90:	58025408 	.word	0x58025408
 8003d94:	5802541c 	.word	0x5802541c
 8003d98:	58025430 	.word	0x58025430
 8003d9c:	58025444 	.word	0x58025444
 8003da0:	58025458 	.word	0x58025458
 8003da4:	5802546c 	.word	0x5802546c
 8003da8:	58025480 	.word	0x58025480
 8003dac:	58025494 	.word	0x58025494

08003db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e226      	b.n	800421a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_DMA_Start_IT+0x2a>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e21f      	b.n	800421a <HAL_DMA_Start_IT+0x46a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 820a 	bne.w	8004204 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a68      	ldr	r2, [pc, #416]	@ (8003fa4 <HAL_DMA_Start_IT+0x1f4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d04a      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a66      	ldr	r2, [pc, #408]	@ (8003fa8 <HAL_DMA_Start_IT+0x1f8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d045      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a65      	ldr	r2, [pc, #404]	@ (8003fac <HAL_DMA_Start_IT+0x1fc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d040      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a63      	ldr	r2, [pc, #396]	@ (8003fb0 <HAL_DMA_Start_IT+0x200>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d03b      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a62      	ldr	r2, [pc, #392]	@ (8003fb4 <HAL_DMA_Start_IT+0x204>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d036      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a60      	ldr	r2, [pc, #384]	@ (8003fb8 <HAL_DMA_Start_IT+0x208>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d031      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8003fbc <HAL_DMA_Start_IT+0x20c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d02c      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a5d      	ldr	r2, [pc, #372]	@ (8003fc0 <HAL_DMA_Start_IT+0x210>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d027      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc4 <HAL_DMA_Start_IT+0x214>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc8 <HAL_DMA_Start_IT+0x218>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01d      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a59      	ldr	r2, [pc, #356]	@ (8003fcc <HAL_DMA_Start_IT+0x21c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a57      	ldr	r2, [pc, #348]	@ (8003fd0 <HAL_DMA_Start_IT+0x220>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a56      	ldr	r2, [pc, #344]	@ (8003fd4 <HAL_DMA_Start_IT+0x224>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a54      	ldr	r2, [pc, #336]	@ (8003fd8 <HAL_DMA_Start_IT+0x228>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a53      	ldr	r2, [pc, #332]	@ (8003fdc <HAL_DMA_Start_IT+0x22c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_DMA_Start_IT+0xee>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a51      	ldr	r2, [pc, #324]	@ (8003fe0 <HAL_DMA_Start_IT+0x230>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <HAL_DMA_Start_IT+0x100>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e007      	b.n	8003ec0 <HAL_DMA_Start_IT+0x110>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f001 f906 	bl	80050d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a34      	ldr	r2, [pc, #208]	@ (8003fa4 <HAL_DMA_Start_IT+0x1f4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d04a      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <HAL_DMA_Start_IT+0x1f8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d045      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a31      	ldr	r2, [pc, #196]	@ (8003fac <HAL_DMA_Start_IT+0x1fc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d040      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a30      	ldr	r2, [pc, #192]	@ (8003fb0 <HAL_DMA_Start_IT+0x200>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d03b      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb4 <HAL_DMA_Start_IT+0x204>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d036      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb8 <HAL_DMA_Start_IT+0x208>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d031      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fbc <HAL_DMA_Start_IT+0x20c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02c      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc0 <HAL_DMA_Start_IT+0x210>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d027      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a28      	ldr	r2, [pc, #160]	@ (8003fc4 <HAL_DMA_Start_IT+0x214>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d022      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a27      	ldr	r2, [pc, #156]	@ (8003fc8 <HAL_DMA_Start_IT+0x218>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01d      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a25      	ldr	r2, [pc, #148]	@ (8003fcc <HAL_DMA_Start_IT+0x21c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d018      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <HAL_DMA_Start_IT+0x220>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a22      	ldr	r2, [pc, #136]	@ (8003fd4 <HAL_DMA_Start_IT+0x224>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00e      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a21      	ldr	r2, [pc, #132]	@ (8003fd8 <HAL_DMA_Start_IT+0x228>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fdc <HAL_DMA_Start_IT+0x22c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_DMA_Start_IT+0x1bc>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe0 <HAL_DMA_Start_IT+0x230>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_DMA_Start_IT+0x1c0>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_DMA_Start_IT+0x1c2>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d036      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 021e 	bic.w	r2, r3, #30
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0216 	orr.w	r2, r2, #22
 8003f88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d03e      	beq.n	8004010 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0208 	orr.w	r2, r2, #8
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e035      	b.n	8004010 <HAL_DMA_Start_IT+0x260>
 8003fa4:	40020010 	.word	0x40020010
 8003fa8:	40020028 	.word	0x40020028
 8003fac:	40020040 	.word	0x40020040
 8003fb0:	40020058 	.word	0x40020058
 8003fb4:	40020070 	.word	0x40020070
 8003fb8:	40020088 	.word	0x40020088
 8003fbc:	400200a0 	.word	0x400200a0
 8003fc0:	400200b8 	.word	0x400200b8
 8003fc4:	40020410 	.word	0x40020410
 8003fc8:	40020428 	.word	0x40020428
 8003fcc:	40020440 	.word	0x40020440
 8003fd0:	40020458 	.word	0x40020458
 8003fd4:	40020470 	.word	0x40020470
 8003fd8:	40020488 	.word	0x40020488
 8003fdc:	400204a0 	.word	0x400204a0
 8003fe0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 020e 	bic.w	r2, r3, #14
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 020a 	orr.w	r2, r2, #10
 8003ff6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0204 	orr.w	r2, r2, #4
 800400e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a83      	ldr	r2, [pc, #524]	@ (8004224 <HAL_DMA_Start_IT+0x474>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d072      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a82      	ldr	r2, [pc, #520]	@ (8004228 <HAL_DMA_Start_IT+0x478>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d06d      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a80      	ldr	r2, [pc, #512]	@ (800422c <HAL_DMA_Start_IT+0x47c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d068      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7f      	ldr	r2, [pc, #508]	@ (8004230 <HAL_DMA_Start_IT+0x480>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d063      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a7d      	ldr	r2, [pc, #500]	@ (8004234 <HAL_DMA_Start_IT+0x484>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d05e      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7c      	ldr	r2, [pc, #496]	@ (8004238 <HAL_DMA_Start_IT+0x488>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d059      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a7a      	ldr	r2, [pc, #488]	@ (800423c <HAL_DMA_Start_IT+0x48c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d054      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a79      	ldr	r2, [pc, #484]	@ (8004240 <HAL_DMA_Start_IT+0x490>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04f      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a77      	ldr	r2, [pc, #476]	@ (8004244 <HAL_DMA_Start_IT+0x494>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d04a      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a76      	ldr	r2, [pc, #472]	@ (8004248 <HAL_DMA_Start_IT+0x498>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d045      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a74      	ldr	r2, [pc, #464]	@ (800424c <HAL_DMA_Start_IT+0x49c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d040      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a73      	ldr	r2, [pc, #460]	@ (8004250 <HAL_DMA_Start_IT+0x4a0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d03b      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a71      	ldr	r2, [pc, #452]	@ (8004254 <HAL_DMA_Start_IT+0x4a4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d036      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a70      	ldr	r2, [pc, #448]	@ (8004258 <HAL_DMA_Start_IT+0x4a8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d031      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6e      	ldr	r2, [pc, #440]	@ (800425c <HAL_DMA_Start_IT+0x4ac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02c      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004260 <HAL_DMA_Start_IT+0x4b0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d027      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004264 <HAL_DMA_Start_IT+0x4b4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6a      	ldr	r2, [pc, #424]	@ (8004268 <HAL_DMA_Start_IT+0x4b8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d01d      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a68      	ldr	r2, [pc, #416]	@ (800426c <HAL_DMA_Start_IT+0x4bc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a67      	ldr	r2, [pc, #412]	@ (8004270 <HAL_DMA_Start_IT+0x4c0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a65      	ldr	r2, [pc, #404]	@ (8004274 <HAL_DMA_Start_IT+0x4c4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a64      	ldr	r2, [pc, #400]	@ (8004278 <HAL_DMA_Start_IT+0x4c8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a62      	ldr	r2, [pc, #392]	@ (800427c <HAL_DMA_Start_IT+0x4cc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_DMA_Start_IT+0x350>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a61      	ldr	r2, [pc, #388]	@ (8004280 <HAL_DMA_Start_IT+0x4d0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_DMA_Start_IT+0x354>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_DMA_Start_IT+0x356>
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01a      	beq.n	8004140 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004122:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004126:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a37      	ldr	r2, [pc, #220]	@ (8004224 <HAL_DMA_Start_IT+0x474>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d04a      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <HAL_DMA_Start_IT+0x478>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d045      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a34      	ldr	r2, [pc, #208]	@ (800422c <HAL_DMA_Start_IT+0x47c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d040      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <HAL_DMA_Start_IT+0x480>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d03b      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a31      	ldr	r2, [pc, #196]	@ (8004234 <HAL_DMA_Start_IT+0x484>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d036      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a30      	ldr	r2, [pc, #192]	@ (8004238 <HAL_DMA_Start_IT+0x488>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d031      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2e      	ldr	r2, [pc, #184]	@ (800423c <HAL_DMA_Start_IT+0x48c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d02c      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2d      	ldr	r2, [pc, #180]	@ (8004240 <HAL_DMA_Start_IT+0x490>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d027      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <HAL_DMA_Start_IT+0x494>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d022      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <HAL_DMA_Start_IT+0x498>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01d      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a28      	ldr	r2, [pc, #160]	@ (800424c <HAL_DMA_Start_IT+0x49c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d018      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a27      	ldr	r2, [pc, #156]	@ (8004250 <HAL_DMA_Start_IT+0x4a0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a25      	ldr	r2, [pc, #148]	@ (8004254 <HAL_DMA_Start_IT+0x4a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <HAL_DMA_Start_IT+0x4a8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a22      	ldr	r2, [pc, #136]	@ (800425c <HAL_DMA_Start_IT+0x4ac>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_Start_IT+0x430>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a21      	ldr	r2, [pc, #132]	@ (8004260 <HAL_DMA_Start_IT+0x4b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <HAL_DMA_Start_IT+0x442>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e012      	b.n	8004218 <HAL_DMA_Start_IT+0x468>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e009      	b.n	8004218 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800420a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
 8004264:	58025408 	.word	0x58025408
 8004268:	5802541c 	.word	0x5802541c
 800426c:	58025430 	.word	0x58025430
 8004270:	58025444 	.word	0x58025444
 8004274:	58025458 	.word	0x58025458
 8004278:	5802546c 	.word	0x5802546c
 800427c:	58025480 	.word	0x58025480
 8004280:	58025494 	.word	0x58025494

08004284 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	@ 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004290:	4b67      	ldr	r3, [pc, #412]	@ (8004430 <HAL_DMA_IRQHandler+0x1ac>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a67      	ldr	r2, [pc, #412]	@ (8004434 <HAL_DMA_IRQHandler+0x1b0>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	0a9b      	lsrs	r3, r3, #10
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004438 <HAL_DMA_IRQHandler+0x1b4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a5d      	ldr	r2, [pc, #372]	@ (800443c <HAL_DMA_IRQHandler+0x1b8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004440 <HAL_DMA_IRQHandler+0x1bc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004444 <HAL_DMA_IRQHandler+0x1c0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a59      	ldr	r2, [pc, #356]	@ (8004448 <HAL_DMA_IRQHandler+0x1c4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a57      	ldr	r2, [pc, #348]	@ (800444c <HAL_DMA_IRQHandler+0x1c8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a56      	ldr	r2, [pc, #344]	@ (8004450 <HAL_DMA_IRQHandler+0x1cc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a54      	ldr	r2, [pc, #336]	@ (8004454 <HAL_DMA_IRQHandler+0x1d0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a53      	ldr	r2, [pc, #332]	@ (8004458 <HAL_DMA_IRQHandler+0x1d4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a51      	ldr	r2, [pc, #324]	@ (800445c <HAL_DMA_IRQHandler+0x1d8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a50      	ldr	r2, [pc, #320]	@ (8004460 <HAL_DMA_IRQHandler+0x1dc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a4e      	ldr	r2, [pc, #312]	@ (8004464 <HAL_DMA_IRQHandler+0x1e0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a4d      	ldr	r2, [pc, #308]	@ (8004468 <HAL_DMA_IRQHandler+0x1e4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a4b      	ldr	r2, [pc, #300]	@ (800446c <HAL_DMA_IRQHandler+0x1e8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a4a      	ldr	r2, [pc, #296]	@ (8004470 <HAL_DMA_IRQHandler+0x1ec>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_IRQHandler+0xd2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a48      	ldr	r2, [pc, #288]	@ (8004474 <HAL_DMA_IRQHandler+0x1f0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_DMA_IRQHandler+0xd6>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_DMA_IRQHandler+0xd8>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 842b 	beq.w	8004bb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2208      	movs	r2, #8
 800436c:	409a      	lsls	r2, r3
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 80a2 	beq.w	80044bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2e      	ldr	r2, [pc, #184]	@ (8004438 <HAL_DMA_IRQHandler+0x1b4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d04a      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2d      	ldr	r2, [pc, #180]	@ (800443c <HAL_DMA_IRQHandler+0x1b8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d045      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <HAL_DMA_IRQHandler+0x1bc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d040      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2a      	ldr	r2, [pc, #168]	@ (8004444 <HAL_DMA_IRQHandler+0x1c0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d03b      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a28      	ldr	r2, [pc, #160]	@ (8004448 <HAL_DMA_IRQHandler+0x1c4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d036      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a27      	ldr	r2, [pc, #156]	@ (800444c <HAL_DMA_IRQHandler+0x1c8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d031      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a25      	ldr	r2, [pc, #148]	@ (8004450 <HAL_DMA_IRQHandler+0x1cc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d02c      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a24      	ldr	r2, [pc, #144]	@ (8004454 <HAL_DMA_IRQHandler+0x1d0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d027      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	@ (8004458 <HAL_DMA_IRQHandler+0x1d4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d022      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	@ (800445c <HAL_DMA_IRQHandler+0x1d8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d01d      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <HAL_DMA_IRQHandler+0x1dc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d018      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004464 <HAL_DMA_IRQHandler+0x1e0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004468 <HAL_DMA_IRQHandler+0x1e4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <HAL_DMA_IRQHandler+0x1e8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d009      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <HAL_DMA_IRQHandler+0x1ec>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_DMA_IRQHandler+0x194>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a18      	ldr	r2, [pc, #96]	@ (8004474 <HAL_DMA_IRQHandler+0x1f0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d12f      	bne.n	8004478 <HAL_DMA_IRQHandler+0x1f4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2301      	movne	r3, #1
 8004428:	2300      	moveq	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	e02e      	b.n	800448c <HAL_DMA_IRQHandler+0x208>
 800442e:	bf00      	nop
 8004430:	24000000 	.word	0x24000000
 8004434:	1b4e81b5 	.word	0x1b4e81b5
 8004438:	40020010 	.word	0x40020010
 800443c:	40020028 	.word	0x40020028
 8004440:	40020040 	.word	0x40020040
 8004444:	40020058 	.word	0x40020058
 8004448:	40020070 	.word	0x40020070
 800444c:	40020088 	.word	0x40020088
 8004450:	400200a0 	.word	0x400200a0
 8004454:	400200b8 	.word	0x400200b8
 8004458:	40020410 	.word	0x40020410
 800445c:	40020428 	.word	0x40020428
 8004460:	40020440 	.word	0x40020440
 8004464:	40020458 	.word	0x40020458
 8004468:	40020470 	.word	0x40020470
 800446c:	40020488 	.word	0x40020488
 8004470:	400204a0 	.word	0x400204a0
 8004474:	400204b8 	.word	0x400204b8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0204 	bic.w	r2, r2, #4
 800449e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2208      	movs	r2, #8
 80044aa:	409a      	lsls	r2, r3
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	f043 0201 	orr.w	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d06e      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a69      	ldr	r2, [pc, #420]	@ (800467c <HAL_DMA_IRQHandler+0x3f8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d04a      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a67      	ldr	r2, [pc, #412]	@ (8004680 <HAL_DMA_IRQHandler+0x3fc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d045      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a66      	ldr	r2, [pc, #408]	@ (8004684 <HAL_DMA_IRQHandler+0x400>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d040      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a64      	ldr	r2, [pc, #400]	@ (8004688 <HAL_DMA_IRQHandler+0x404>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d03b      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a63      	ldr	r2, [pc, #396]	@ (800468c <HAL_DMA_IRQHandler+0x408>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d036      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a61      	ldr	r2, [pc, #388]	@ (8004690 <HAL_DMA_IRQHandler+0x40c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d031      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a60      	ldr	r2, [pc, #384]	@ (8004694 <HAL_DMA_IRQHandler+0x410>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d02c      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a5e      	ldr	r2, [pc, #376]	@ (8004698 <HAL_DMA_IRQHandler+0x414>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d027      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a5d      	ldr	r2, [pc, #372]	@ (800469c <HAL_DMA_IRQHandler+0x418>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d022      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a5b      	ldr	r2, [pc, #364]	@ (80046a0 <HAL_DMA_IRQHandler+0x41c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01d      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a5a      	ldr	r2, [pc, #360]	@ (80046a4 <HAL_DMA_IRQHandler+0x420>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a58      	ldr	r2, [pc, #352]	@ (80046a8 <HAL_DMA_IRQHandler+0x424>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a57      	ldr	r2, [pc, #348]	@ (80046ac <HAL_DMA_IRQHandler+0x428>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a55      	ldr	r2, [pc, #340]	@ (80046b0 <HAL_DMA_IRQHandler+0x42c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a54      	ldr	r2, [pc, #336]	@ (80046b4 <HAL_DMA_IRQHandler+0x430>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_DMA_IRQHandler+0x2ee>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a52      	ldr	r2, [pc, #328]	@ (80046b8 <HAL_DMA_IRQHandler+0x434>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10a      	bne.n	8004588 <HAL_DMA_IRQHandler+0x304>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e003      	b.n	8004590 <HAL_DMA_IRQHandler+0x30c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2201      	movs	r2, #1
 800459e:	409a      	lsls	r2, r3
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	f043 0202 	orr.w	r2, r3, #2
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2204      	movs	r2, #4
 80045ba:	409a      	lsls	r2, r3
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 808f 	beq.w	80046e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	@ (800467c <HAL_DMA_IRQHandler+0x3f8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004680 <HAL_DMA_IRQHandler+0x3fc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a29      	ldr	r2, [pc, #164]	@ (8004684 <HAL_DMA_IRQHandler+0x400>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a27      	ldr	r2, [pc, #156]	@ (8004688 <HAL_DMA_IRQHandler+0x404>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a26      	ldr	r2, [pc, #152]	@ (800468c <HAL_DMA_IRQHandler+0x408>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a24      	ldr	r2, [pc, #144]	@ (8004690 <HAL_DMA_IRQHandler+0x40c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a23      	ldr	r2, [pc, #140]	@ (8004694 <HAL_DMA_IRQHandler+0x410>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a21      	ldr	r2, [pc, #132]	@ (8004698 <HAL_DMA_IRQHandler+0x414>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a20      	ldr	r2, [pc, #128]	@ (800469c <HAL_DMA_IRQHandler+0x418>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <HAL_DMA_IRQHandler+0x41c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <HAL_DMA_IRQHandler+0x420>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1b      	ldr	r2, [pc, #108]	@ (80046a8 <HAL_DMA_IRQHandler+0x424>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1a      	ldr	r2, [pc, #104]	@ (80046ac <HAL_DMA_IRQHandler+0x428>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a18      	ldr	r2, [pc, #96]	@ (80046b0 <HAL_DMA_IRQHandler+0x42c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a17      	ldr	r2, [pc, #92]	@ (80046b4 <HAL_DMA_IRQHandler+0x430>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_DMA_IRQHandler+0x3e2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a15      	ldr	r2, [pc, #84]	@ (80046b8 <HAL_DMA_IRQHandler+0x434>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d12a      	bne.n	80046bc <HAL_DMA_IRQHandler+0x438>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e023      	b.n	80046c4 <HAL_DMA_IRQHandler+0x440>
 800467c:	40020010 	.word	0x40020010
 8004680:	40020028 	.word	0x40020028
 8004684:	40020040 	.word	0x40020040
 8004688:	40020058 	.word	0x40020058
 800468c:	40020070 	.word	0x40020070
 8004690:	40020088 	.word	0x40020088
 8004694:	400200a0 	.word	0x400200a0
 8004698:	400200b8 	.word	0x400200b8
 800469c:	40020410 	.word	0x40020410
 80046a0:	40020428 	.word	0x40020428
 80046a4:	40020440 	.word	0x40020440
 80046a8:	40020458 	.word	0x40020458
 80046ac:	40020470 	.word	0x40020470
 80046b0:	40020488 	.word	0x40020488
 80046b4:	400204a0 	.word	0x400204a0
 80046b8:	400204b8 	.word	0x400204b8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2204      	movs	r2, #4
 80046d2:	409a      	lsls	r2, r3
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046dc:	f043 0204 	orr.w	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2210      	movs	r2, #16
 80046ee:	409a      	lsls	r2, r3
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a6 	beq.w	8004846 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a85      	ldr	r2, [pc, #532]	@ (8004914 <HAL_DMA_IRQHandler+0x690>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a83      	ldr	r2, [pc, #524]	@ (8004918 <HAL_DMA_IRQHandler+0x694>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a82      	ldr	r2, [pc, #520]	@ (800491c <HAL_DMA_IRQHandler+0x698>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a80      	ldr	r2, [pc, #512]	@ (8004920 <HAL_DMA_IRQHandler+0x69c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a7f      	ldr	r2, [pc, #508]	@ (8004924 <HAL_DMA_IRQHandler+0x6a0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a7d      	ldr	r2, [pc, #500]	@ (8004928 <HAL_DMA_IRQHandler+0x6a4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7c      	ldr	r2, [pc, #496]	@ (800492c <HAL_DMA_IRQHandler+0x6a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a7a      	ldr	r2, [pc, #488]	@ (8004930 <HAL_DMA_IRQHandler+0x6ac>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a79      	ldr	r2, [pc, #484]	@ (8004934 <HAL_DMA_IRQHandler+0x6b0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a77      	ldr	r2, [pc, #476]	@ (8004938 <HAL_DMA_IRQHandler+0x6b4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a76      	ldr	r2, [pc, #472]	@ (800493c <HAL_DMA_IRQHandler+0x6b8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a74      	ldr	r2, [pc, #464]	@ (8004940 <HAL_DMA_IRQHandler+0x6bc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a73      	ldr	r2, [pc, #460]	@ (8004944 <HAL_DMA_IRQHandler+0x6c0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a71      	ldr	r2, [pc, #452]	@ (8004948 <HAL_DMA_IRQHandler+0x6c4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a70      	ldr	r2, [pc, #448]	@ (800494c <HAL_DMA_IRQHandler+0x6c8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_IRQHandler+0x516>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a6e      	ldr	r2, [pc, #440]	@ (8004950 <HAL_DMA_IRQHandler+0x6cc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10a      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x52c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e009      	b.n	80047c4 <HAL_DMA_IRQHandler+0x540>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03e      	beq.n	8004846 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	2210      	movs	r2, #16
 80047d2:	409a      	lsls	r2, r3
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d024      	beq.n	8004846 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
 8004804:	e01f      	b.n	8004846 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01b      	beq.n	8004846 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
 8004816:	e016      	b.n	8004846 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d107      	bne.n	8004836 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0208 	bic.w	r2, r2, #8
 8004834:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2220      	movs	r2, #32
 8004850:	409a      	lsls	r2, r3
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8110 	beq.w	8004a7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2c      	ldr	r2, [pc, #176]	@ (8004914 <HAL_DMA_IRQHandler+0x690>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d04a      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2b      	ldr	r2, [pc, #172]	@ (8004918 <HAL_DMA_IRQHandler+0x694>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d045      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a29      	ldr	r2, [pc, #164]	@ (800491c <HAL_DMA_IRQHandler+0x698>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d040      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <HAL_DMA_IRQHandler+0x69c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d03b      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a26      	ldr	r2, [pc, #152]	@ (8004924 <HAL_DMA_IRQHandler+0x6a0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d036      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a25      	ldr	r2, [pc, #148]	@ (8004928 <HAL_DMA_IRQHandler+0x6a4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d031      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a23      	ldr	r2, [pc, #140]	@ (800492c <HAL_DMA_IRQHandler+0x6a8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02c      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_DMA_IRQHandler+0x6ac>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d027      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a20      	ldr	r2, [pc, #128]	@ (8004934 <HAL_DMA_IRQHandler+0x6b0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <HAL_DMA_IRQHandler+0x6b4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d01d      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1d      	ldr	r2, [pc, #116]	@ (800493c <HAL_DMA_IRQHandler+0x6b8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_DMA_IRQHandler+0x6bc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004944 <HAL_DMA_IRQHandler+0x6c0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a19      	ldr	r2, [pc, #100]	@ (8004948 <HAL_DMA_IRQHandler+0x6c4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a17      	ldr	r2, [pc, #92]	@ (800494c <HAL_DMA_IRQHandler+0x6c8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_DMA_IRQHandler+0x678>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <HAL_DMA_IRQHandler+0x6cc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d12b      	bne.n	8004954 <HAL_DMA_IRQHandler+0x6d0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e02a      	b.n	8004968 <HAL_DMA_IRQHandler+0x6e4>
 8004912:	bf00      	nop
 8004914:	40020010 	.word	0x40020010
 8004918:	40020028 	.word	0x40020028
 800491c:	40020040 	.word	0x40020040
 8004920:	40020058 	.word	0x40020058
 8004924:	40020070 	.word	0x40020070
 8004928:	40020088 	.word	0x40020088
 800492c:	400200a0 	.word	0x400200a0
 8004930:	400200b8 	.word	0x400200b8
 8004934:	40020410 	.word	0x40020410
 8004938:	40020428 	.word	0x40020428
 800493c:	40020440 	.word	0x40020440
 8004940:	40020458 	.word	0x40020458
 8004944:	40020470 	.word	0x40020470
 8004948:	40020488 	.word	0x40020488
 800494c:	400204a0 	.word	0x400204a0
 8004950:	400204b8 	.word	0x400204b8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf14      	ite	ne
 8004962:	2301      	movne	r3, #1
 8004964:	2300      	moveq	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8087 	beq.w	8004a7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2220      	movs	r2, #32
 8004978:	409a      	lsls	r2, r3
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b04      	cmp	r3, #4
 8004988:	d139      	bne.n	80049fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0216 	bic.w	r2, r2, #22
 8004998:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695a      	ldr	r2, [r3, #20]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_DMA_IRQHandler+0x736>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0208 	bic.w	r2, r2, #8
 80049c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	223f      	movs	r2, #63	@ 0x3f
 80049d4:	409a      	lsls	r2, r3
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 834a 	beq.w	8005088 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
          }
          return;
 80049fc:	e344      	b.n	8005088 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d018      	beq.n	8004a3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e027      	b.n	8004a7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d023      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e01e      	b.n	8004a7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10f      	bne.n	8004a6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0210 	bic.w	r2, r2, #16
 8004a5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8306 	beq.w	8005092 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8088 	beq.w	8004ba4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7a      	ldr	r2, [pc, #488]	@ (8004c8c <HAL_DMA_IRQHandler+0xa08>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d04a      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a79      	ldr	r2, [pc, #484]	@ (8004c90 <HAL_DMA_IRQHandler+0xa0c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d045      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a77      	ldr	r2, [pc, #476]	@ (8004c94 <HAL_DMA_IRQHandler+0xa10>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d040      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a76      	ldr	r2, [pc, #472]	@ (8004c98 <HAL_DMA_IRQHandler+0xa14>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d03b      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a74      	ldr	r2, [pc, #464]	@ (8004c9c <HAL_DMA_IRQHandler+0xa18>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d036      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a73      	ldr	r2, [pc, #460]	@ (8004ca0 <HAL_DMA_IRQHandler+0xa1c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d031      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a71      	ldr	r2, [pc, #452]	@ (8004ca4 <HAL_DMA_IRQHandler+0xa20>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d02c      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a70      	ldr	r2, [pc, #448]	@ (8004ca8 <HAL_DMA_IRQHandler+0xa24>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d027      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6e      	ldr	r2, [pc, #440]	@ (8004cac <HAL_DMA_IRQHandler+0xa28>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6d      	ldr	r2, [pc, #436]	@ (8004cb0 <HAL_DMA_IRQHandler+0xa2c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d01d      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb4 <HAL_DMA_IRQHandler+0xa30>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb8 <HAL_DMA_IRQHandler+0xa34>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a68      	ldr	r2, [pc, #416]	@ (8004cbc <HAL_DMA_IRQHandler+0xa38>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a67      	ldr	r2, [pc, #412]	@ (8004cc0 <HAL_DMA_IRQHandler+0xa3c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a65      	ldr	r2, [pc, #404]	@ (8004cc4 <HAL_DMA_IRQHandler+0xa40>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x8b8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a64      	ldr	r2, [pc, #400]	@ (8004cc8 <HAL_DMA_IRQHandler+0xa44>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <HAL_DMA_IRQHandler+0x8ca>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e007      	b.n	8004b5e <HAL_DMA_IRQHandler+0x8da>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d307      	bcc.n	8004b7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f2      	bne.n	8004b5e <HAL_DMA_IRQHandler+0x8da>
 8004b78:	e000      	b.n	8004b7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004b92:	e003      	b.n	8004b9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8272 	beq.w	8005092 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
 8004bb6:	e26c      	b.n	8005092 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a43      	ldr	r2, [pc, #268]	@ (8004ccc <HAL_DMA_IRQHandler+0xa48>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d022      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a42      	ldr	r2, [pc, #264]	@ (8004cd0 <HAL_DMA_IRQHandler+0xa4c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d01d      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a40      	ldr	r2, [pc, #256]	@ (8004cd4 <HAL_DMA_IRQHandler+0xa50>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d018      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3f      	ldr	r2, [pc, #252]	@ (8004cd8 <HAL_DMA_IRQHandler+0xa54>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d013      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3d      	ldr	r2, [pc, #244]	@ (8004cdc <HAL_DMA_IRQHandler+0xa58>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00e      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3c      	ldr	r2, [pc, #240]	@ (8004ce0 <HAL_DMA_IRQHandler+0xa5c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d009      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ce4 <HAL_DMA_IRQHandler+0xa60>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d004      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x984>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a39      	ldr	r2, [pc, #228]	@ (8004ce8 <HAL_DMA_IRQHandler+0xa64>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x988>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_DMA_IRQHandler+0x98a>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 823f 	beq.w	8005092 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	2204      	movs	r2, #4
 8004c26:	409a      	lsls	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80cd 	beq.w	8004dcc <HAL_DMA_IRQHandler+0xb48>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80c7 	beq.w	8004dcc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	2204      	movs	r2, #4
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d049      	beq.n	8004cec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8210 	beq.w	800508c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c74:	e20a      	b.n	800508c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8206 	beq.w	800508c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c88:	e200      	b.n	800508c <HAL_DMA_IRQHandler+0xe08>
 8004c8a:	bf00      	nop
 8004c8c:	40020010 	.word	0x40020010
 8004c90:	40020028 	.word	0x40020028
 8004c94:	40020040 	.word	0x40020040
 8004c98:	40020058 	.word	0x40020058
 8004c9c:	40020070 	.word	0x40020070
 8004ca0:	40020088 	.word	0x40020088
 8004ca4:	400200a0 	.word	0x400200a0
 8004ca8:	400200b8 	.word	0x400200b8
 8004cac:	40020410 	.word	0x40020410
 8004cb0:	40020428 	.word	0x40020428
 8004cb4:	40020440 	.word	0x40020440
 8004cb8:	40020458 	.word	0x40020458
 8004cbc:	40020470 	.word	0x40020470
 8004cc0:	40020488 	.word	0x40020488
 8004cc4:	400204a0 	.word	0x400204a0
 8004cc8:	400204b8 	.word	0x400204b8
 8004ccc:	58025408 	.word	0x58025408
 8004cd0:	5802541c 	.word	0x5802541c
 8004cd4:	58025430 	.word	0x58025430
 8004cd8:	58025444 	.word	0x58025444
 8004cdc:	58025458 	.word	0x58025458
 8004ce0:	5802546c 	.word	0x5802546c
 8004ce4:	58025480 	.word	0x58025480
 8004ce8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d160      	bne.n	8004db8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a7f      	ldr	r2, [pc, #508]	@ (8004ef8 <HAL_DMA_IRQHandler+0xc74>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04a      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7d      	ldr	r2, [pc, #500]	@ (8004efc <HAL_DMA_IRQHandler+0xc78>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d045      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f00 <HAL_DMA_IRQHandler+0xc7c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7a      	ldr	r2, [pc, #488]	@ (8004f04 <HAL_DMA_IRQHandler+0xc80>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d03b      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a79      	ldr	r2, [pc, #484]	@ (8004f08 <HAL_DMA_IRQHandler+0xc84>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d036      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a77      	ldr	r2, [pc, #476]	@ (8004f0c <HAL_DMA_IRQHandler+0xc88>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d031      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a76      	ldr	r2, [pc, #472]	@ (8004f10 <HAL_DMA_IRQHandler+0xc8c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d02c      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a74      	ldr	r2, [pc, #464]	@ (8004f14 <HAL_DMA_IRQHandler+0xc90>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d027      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a73      	ldr	r2, [pc, #460]	@ (8004f18 <HAL_DMA_IRQHandler+0xc94>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a71      	ldr	r2, [pc, #452]	@ (8004f1c <HAL_DMA_IRQHandler+0xc98>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a70      	ldr	r2, [pc, #448]	@ (8004f20 <HAL_DMA_IRQHandler+0xc9c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6e      	ldr	r2, [pc, #440]	@ (8004f24 <HAL_DMA_IRQHandler+0xca0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a6d      	ldr	r2, [pc, #436]	@ (8004f28 <HAL_DMA_IRQHandler+0xca4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8004f2c <HAL_DMA_IRQHandler+0xca8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6a      	ldr	r2, [pc, #424]	@ (8004f30 <HAL_DMA_IRQHandler+0xcac>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xb12>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a68      	ldr	r2, [pc, #416]	@ (8004f34 <HAL_DMA_IRQHandler+0xcb0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <HAL_DMA_IRQHandler+0xb24>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0208 	bic.w	r2, r2, #8
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <HAL_DMA_IRQHandler+0xb34>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0204 	bic.w	r2, r2, #4
 8004db6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8165 	beq.w	800508c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dca:	e15f      	b.n	800508c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd0:	f003 031f 	and.w	r3, r3, #31
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80c5 	beq.w	8004f6c <HAL_DMA_IRQHandler+0xce8>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80bf 	beq.w	8004f6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2202      	movs	r2, #2
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 813a 	beq.w	8005090 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e24:	e134      	b.n	8005090 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8130 	beq.w	8005090 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e38:	e12a      	b.n	8005090 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 8089 	bne.w	8004f58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef8 <HAL_DMA_IRQHandler+0xc74>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d04a      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a29      	ldr	r2, [pc, #164]	@ (8004efc <HAL_DMA_IRQHandler+0xc78>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d045      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a28      	ldr	r2, [pc, #160]	@ (8004f00 <HAL_DMA_IRQHandler+0xc7c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d040      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <HAL_DMA_IRQHandler+0xc80>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d03b      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a25      	ldr	r2, [pc, #148]	@ (8004f08 <HAL_DMA_IRQHandler+0xc84>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d036      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a23      	ldr	r2, [pc, #140]	@ (8004f0c <HAL_DMA_IRQHandler+0xc88>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d031      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_DMA_IRQHandler+0xc8c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d02c      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <HAL_DMA_IRQHandler+0xc90>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d027      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <HAL_DMA_IRQHandler+0xc94>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d022      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f1c <HAL_DMA_IRQHandler+0xc98>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	@ (8004f20 <HAL_DMA_IRQHandler+0xc9c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d018      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f24 <HAL_DMA_IRQHandler+0xca0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a19      	ldr	r2, [pc, #100]	@ (8004f28 <HAL_DMA_IRQHandler+0xca4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	@ (8004f2c <HAL_DMA_IRQHandler+0xca8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <HAL_DMA_IRQHandler+0xcac>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0xc62>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <HAL_DMA_IRQHandler+0xcb0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d128      	bne.n	8004f38 <HAL_DMA_IRQHandler+0xcb4>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0214 	bic.w	r2, r2, #20
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e027      	b.n	8004f48 <HAL_DMA_IRQHandler+0xcc4>
 8004ef8:	40020010 	.word	0x40020010
 8004efc:	40020028 	.word	0x40020028
 8004f00:	40020040 	.word	0x40020040
 8004f04:	40020058 	.word	0x40020058
 8004f08:	40020070 	.word	0x40020070
 8004f0c:	40020088 	.word	0x40020088
 8004f10:	400200a0 	.word	0x400200a0
 8004f14:	400200b8 	.word	0x400200b8
 8004f18:	40020410 	.word	0x40020410
 8004f1c:	40020428 	.word	0x40020428
 8004f20:	40020440 	.word	0x40020440
 8004f24:	40020458 	.word	0x40020458
 8004f28:	40020470 	.word	0x40020470
 8004f2c:	40020488 	.word	0x40020488
 8004f30:	400204a0 	.word	0x400204a0
 8004f34:	400204b8 	.word	0x400204b8
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 020a 	bic.w	r2, r2, #10
 8004f46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8097 	beq.w	8005090 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f6a:	e091      	b.n	8005090 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2208      	movs	r2, #8
 8004f76:	409a      	lsls	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8088 	beq.w	8005092 <HAL_DMA_IRQHandler+0xe0e>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8082 	beq.w	8005092 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a41      	ldr	r2, [pc, #260]	@ (8005098 <HAL_DMA_IRQHandler+0xe14>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d04a      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800509c <HAL_DMA_IRQHandler+0xe18>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d045      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80050a0 <HAL_DMA_IRQHandler+0xe1c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d040      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80050a4 <HAL_DMA_IRQHandler+0xe20>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d03b      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a3b      	ldr	r2, [pc, #236]	@ (80050a8 <HAL_DMA_IRQHandler+0xe24>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d036      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a39      	ldr	r2, [pc, #228]	@ (80050ac <HAL_DMA_IRQHandler+0xe28>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d031      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a38      	ldr	r2, [pc, #224]	@ (80050b0 <HAL_DMA_IRQHandler+0xe2c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d02c      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a36      	ldr	r2, [pc, #216]	@ (80050b4 <HAL_DMA_IRQHandler+0xe30>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d027      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a35      	ldr	r2, [pc, #212]	@ (80050b8 <HAL_DMA_IRQHandler+0xe34>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a33      	ldr	r2, [pc, #204]	@ (80050bc <HAL_DMA_IRQHandler+0xe38>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01d      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <HAL_DMA_IRQHandler+0xe3c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <HAL_DMA_IRQHandler+0xe40>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <HAL_DMA_IRQHandler+0xe44>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <HAL_DMA_IRQHandler+0xe48>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <HAL_DMA_IRQHandler+0xe4c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_DMA_IRQHandler+0xdaa>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <HAL_DMA_IRQHandler+0xe50>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <HAL_DMA_IRQHandler+0xdbc>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 021c 	bic.w	r2, r2, #28
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e007      	b.n	8005050 <HAL_DMA_IRQHandler+0xdcc>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 020e 	bic.w	r2, r2, #14
 800504e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	2201      	movs	r2, #1
 800505a:	409a      	lsls	r2, r3
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	e004      	b.n	8005092 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005088:	bf00      	nop
 800508a:	e002      	b.n	8005092 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005090:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005092:	3728      	adds	r7, #40	@ 0x28
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40020010 	.word	0x40020010
 800509c:	40020028 	.word	0x40020028
 80050a0:	40020040 	.word	0x40020040
 80050a4:	40020058 	.word	0x40020058
 80050a8:	40020070 	.word	0x40020070
 80050ac:	40020088 	.word	0x40020088
 80050b0:	400200a0 	.word	0x400200a0
 80050b4:	400200b8 	.word	0x400200b8
 80050b8:	40020410 	.word	0x40020410
 80050bc:	40020428 	.word	0x40020428
 80050c0:	40020440 	.word	0x40020440
 80050c4:	40020458 	.word	0x40020458
 80050c8:	40020470 	.word	0x40020470
 80050cc:	40020488 	.word	0x40020488
 80050d0:	400204a0 	.word	0x400204a0
 80050d4:	400204b8 	.word	0x400204b8

080050d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a7f      	ldr	r2, [pc, #508]	@ (80052f4 <DMA_SetConfig+0x21c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d072      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a7d      	ldr	r2, [pc, #500]	@ (80052f8 <DMA_SetConfig+0x220>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d06d      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7c      	ldr	r2, [pc, #496]	@ (80052fc <DMA_SetConfig+0x224>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d068      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a7a      	ldr	r2, [pc, #488]	@ (8005300 <DMA_SetConfig+0x228>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d063      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a79      	ldr	r2, [pc, #484]	@ (8005304 <DMA_SetConfig+0x22c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d05e      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a77      	ldr	r2, [pc, #476]	@ (8005308 <DMA_SetConfig+0x230>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d059      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a76      	ldr	r2, [pc, #472]	@ (800530c <DMA_SetConfig+0x234>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d054      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a74      	ldr	r2, [pc, #464]	@ (8005310 <DMA_SetConfig+0x238>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d04f      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a73      	ldr	r2, [pc, #460]	@ (8005314 <DMA_SetConfig+0x23c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a71      	ldr	r2, [pc, #452]	@ (8005318 <DMA_SetConfig+0x240>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a70      	ldr	r2, [pc, #448]	@ (800531c <DMA_SetConfig+0x244>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a6e      	ldr	r2, [pc, #440]	@ (8005320 <DMA_SetConfig+0x248>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6d      	ldr	r2, [pc, #436]	@ (8005324 <DMA_SetConfig+0x24c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a6b      	ldr	r2, [pc, #428]	@ (8005328 <DMA_SetConfig+0x250>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a6a      	ldr	r2, [pc, #424]	@ (800532c <DMA_SetConfig+0x254>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a68      	ldr	r2, [pc, #416]	@ (8005330 <DMA_SetConfig+0x258>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a67      	ldr	r2, [pc, #412]	@ (8005334 <DMA_SetConfig+0x25c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a65      	ldr	r2, [pc, #404]	@ (8005338 <DMA_SetConfig+0x260>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a64      	ldr	r2, [pc, #400]	@ (800533c <DMA_SetConfig+0x264>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a62      	ldr	r2, [pc, #392]	@ (8005340 <DMA_SetConfig+0x268>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a61      	ldr	r2, [pc, #388]	@ (8005344 <DMA_SetConfig+0x26c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a5f      	ldr	r2, [pc, #380]	@ (8005348 <DMA_SetConfig+0x270>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a5e      	ldr	r2, [pc, #376]	@ (800534c <DMA_SetConfig+0x274>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <DMA_SetConfig+0x10a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a5c      	ldr	r2, [pc, #368]	@ (8005350 <DMA_SetConfig+0x278>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d101      	bne.n	80051e6 <DMA_SetConfig+0x10e>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <DMA_SetConfig+0x110>
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005206:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a39      	ldr	r2, [pc, #228]	@ (80052f4 <DMA_SetConfig+0x21c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d04a      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a38      	ldr	r2, [pc, #224]	@ (80052f8 <DMA_SetConfig+0x220>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d045      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a36      	ldr	r2, [pc, #216]	@ (80052fc <DMA_SetConfig+0x224>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d040      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a35      	ldr	r2, [pc, #212]	@ (8005300 <DMA_SetConfig+0x228>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d03b      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a33      	ldr	r2, [pc, #204]	@ (8005304 <DMA_SetConfig+0x22c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d036      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a32      	ldr	r2, [pc, #200]	@ (8005308 <DMA_SetConfig+0x230>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d031      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a30      	ldr	r2, [pc, #192]	@ (800530c <DMA_SetConfig+0x234>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d02c      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2f      	ldr	r2, [pc, #188]	@ (8005310 <DMA_SetConfig+0x238>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d027      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <DMA_SetConfig+0x23c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d022      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2c      	ldr	r2, [pc, #176]	@ (8005318 <DMA_SetConfig+0x240>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d01d      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2a      	ldr	r2, [pc, #168]	@ (800531c <DMA_SetConfig+0x244>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d018      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a29      	ldr	r2, [pc, #164]	@ (8005320 <DMA_SetConfig+0x248>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a27      	ldr	r2, [pc, #156]	@ (8005324 <DMA_SetConfig+0x24c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00e      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a26      	ldr	r2, [pc, #152]	@ (8005328 <DMA_SetConfig+0x250>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d009      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a24      	ldr	r2, [pc, #144]	@ (800532c <DMA_SetConfig+0x254>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <DMA_SetConfig+0x1d0>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a23      	ldr	r2, [pc, #140]	@ (8005330 <DMA_SetConfig+0x258>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <DMA_SetConfig+0x1d4>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <DMA_SetConfig+0x1d6>
 80052ac:	2300      	movs	r3, #0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d059      	beq.n	8005366 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	223f      	movs	r2, #63	@ 0x3f
 80052bc:	409a      	lsls	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d138      	bne.n	8005354 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052f2:	e086      	b.n	8005402 <DMA_SetConfig+0x32a>
 80052f4:	40020010 	.word	0x40020010
 80052f8:	40020028 	.word	0x40020028
 80052fc:	40020040 	.word	0x40020040
 8005300:	40020058 	.word	0x40020058
 8005304:	40020070 	.word	0x40020070
 8005308:	40020088 	.word	0x40020088
 800530c:	400200a0 	.word	0x400200a0
 8005310:	400200b8 	.word	0x400200b8
 8005314:	40020410 	.word	0x40020410
 8005318:	40020428 	.word	0x40020428
 800531c:	40020440 	.word	0x40020440
 8005320:	40020458 	.word	0x40020458
 8005324:	40020470 	.word	0x40020470
 8005328:	40020488 	.word	0x40020488
 800532c:	400204a0 	.word	0x400204a0
 8005330:	400204b8 	.word	0x400204b8
 8005334:	58025408 	.word	0x58025408
 8005338:	5802541c 	.word	0x5802541c
 800533c:	58025430 	.word	0x58025430
 8005340:	58025444 	.word	0x58025444
 8005344:	58025458 	.word	0x58025458
 8005348:	5802546c 	.word	0x5802546c
 800534c:	58025480 	.word	0x58025480
 8005350:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	60da      	str	r2, [r3, #12]
}
 8005364:	e04d      	b.n	8005402 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a29      	ldr	r2, [pc, #164]	@ (8005410 <DMA_SetConfig+0x338>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a27      	ldr	r2, [pc, #156]	@ (8005414 <DMA_SetConfig+0x33c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01d      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a26      	ldr	r2, [pc, #152]	@ (8005418 <DMA_SetConfig+0x340>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a24      	ldr	r2, [pc, #144]	@ (800541c <DMA_SetConfig+0x344>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a23      	ldr	r2, [pc, #140]	@ (8005420 <DMA_SetConfig+0x348>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a21      	ldr	r2, [pc, #132]	@ (8005424 <DMA_SetConfig+0x34c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a20      	ldr	r2, [pc, #128]	@ (8005428 <DMA_SetConfig+0x350>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <DMA_SetConfig+0x2de>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1e      	ldr	r2, [pc, #120]	@ (800542c <DMA_SetConfig+0x354>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d101      	bne.n	80053ba <DMA_SetConfig+0x2e2>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <DMA_SetConfig+0x2e4>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	2201      	movs	r2, #1
 80053ca:	409a      	lsls	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b40      	cmp	r3, #64	@ 0x40
 80053de:	d108      	bne.n	80053f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	60da      	str	r2, [r3, #12]
}
 80053f0:	e007      	b.n	8005402 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	58025408 	.word	0x58025408
 8005414:	5802541c 	.word	0x5802541c
 8005418:	58025430 	.word	0x58025430
 800541c:	58025444 	.word	0x58025444
 8005420:	58025458 	.word	0x58025458
 8005424:	5802546c 	.word	0x5802546c
 8005428:	58025480 	.word	0x58025480
 800542c:	58025494 	.word	0x58025494

08005430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a42      	ldr	r2, [pc, #264]	@ (8005548 <DMA_CalcBaseAndBitshift+0x118>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d04a      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a41      	ldr	r2, [pc, #260]	@ (800554c <DMA_CalcBaseAndBitshift+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d045      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3f      	ldr	r2, [pc, #252]	@ (8005550 <DMA_CalcBaseAndBitshift+0x120>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d040      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3e      	ldr	r2, [pc, #248]	@ (8005554 <DMA_CalcBaseAndBitshift+0x124>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d03b      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3c      	ldr	r2, [pc, #240]	@ (8005558 <DMA_CalcBaseAndBitshift+0x128>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d036      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a3b      	ldr	r2, [pc, #236]	@ (800555c <DMA_CalcBaseAndBitshift+0x12c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d031      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a39      	ldr	r2, [pc, #228]	@ (8005560 <DMA_CalcBaseAndBitshift+0x130>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02c      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a38      	ldr	r2, [pc, #224]	@ (8005564 <DMA_CalcBaseAndBitshift+0x134>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d027      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a36      	ldr	r2, [pc, #216]	@ (8005568 <DMA_CalcBaseAndBitshift+0x138>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a35      	ldr	r2, [pc, #212]	@ (800556c <DMA_CalcBaseAndBitshift+0x13c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a33      	ldr	r2, [pc, #204]	@ (8005570 <DMA_CalcBaseAndBitshift+0x140>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a32      	ldr	r2, [pc, #200]	@ (8005574 <DMA_CalcBaseAndBitshift+0x144>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a30      	ldr	r2, [pc, #192]	@ (8005578 <DMA_CalcBaseAndBitshift+0x148>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2f      	ldr	r2, [pc, #188]	@ (800557c <DMA_CalcBaseAndBitshift+0x14c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005580 <DMA_CalcBaseAndBitshift+0x150>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <DMA_CalcBaseAndBitshift+0xa8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005584 <DMA_CalcBaseAndBitshift+0x154>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <DMA_CalcBaseAndBitshift+0xac>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <DMA_CalcBaseAndBitshift+0xae>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d024      	beq.n	800552c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	3b10      	subs	r3, #16
 80054ea:	4a27      	ldr	r2, [pc, #156]	@ (8005588 <DMA_CalcBaseAndBitshift+0x158>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	4a24      	ldr	r2, [pc, #144]	@ (800558c <DMA_CalcBaseAndBitshift+0x15c>)
 80054fc:	5cd3      	ldrb	r3, [r2, r3]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d908      	bls.n	800551c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	4b1f      	ldr	r3, [pc, #124]	@ (8005590 <DMA_CalcBaseAndBitshift+0x160>)
 8005512:	4013      	ands	r3, r2
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	659a      	str	r2, [r3, #88]	@ 0x58
 800551a:	e00d      	b.n	8005538 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	4b1b      	ldr	r3, [pc, #108]	@ (8005590 <DMA_CalcBaseAndBitshift+0x160>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6593      	str	r3, [r2, #88]	@ 0x58
 800552a:	e005      	b.n	8005538 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40020010 	.word	0x40020010
 800554c:	40020028 	.word	0x40020028
 8005550:	40020040 	.word	0x40020040
 8005554:	40020058 	.word	0x40020058
 8005558:	40020070 	.word	0x40020070
 800555c:	40020088 	.word	0x40020088
 8005560:	400200a0 	.word	0x400200a0
 8005564:	400200b8 	.word	0x400200b8
 8005568:	40020410 	.word	0x40020410
 800556c:	40020428 	.word	0x40020428
 8005570:	40020440 	.word	0x40020440
 8005574:	40020458 	.word	0x40020458
 8005578:	40020470 	.word	0x40020470
 800557c:	40020488 	.word	0x40020488
 8005580:	400204a0 	.word	0x400204a0
 8005584:	400204b8 	.word	0x400204b8
 8005588:	aaaaaaab 	.word	0xaaaaaaab
 800558c:	0800aea8 	.word	0x0800aea8
 8005590:	fffffc00 	.word	0xfffffc00

08005594 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d120      	bne.n	80055ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d858      	bhi.n	8005662 <DMA_CheckFifoParam+0xce>
 80055b0:	a201      	add	r2, pc, #4	@ (adr r2, 80055b8 <DMA_CheckFifoParam+0x24>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055c9 	.word	0x080055c9
 80055c4:	08005663 	.word	0x08005663
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d048      	beq.n	8005666 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055d8:	e045      	b.n	8005666 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055e2:	d142      	bne.n	800566a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055e8:	e03f      	b.n	800566a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f2:	d123      	bne.n	800563c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d838      	bhi.n	800566e <DMA_CheckFifoParam+0xda>
 80055fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <DMA_CheckFifoParam+0x70>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005615 	.word	0x08005615
 8005608:	0800561b 	.word	0x0800561b
 800560c:	08005615 	.word	0x08005615
 8005610:	0800562d 	.word	0x0800562d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
        break;
 8005618:	e030      	b.n	800567c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d025      	beq.n	8005672 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800562a:	e022      	b.n	8005672 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005634:	d11f      	bne.n	8005676 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800563a:	e01c      	b.n	8005676 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005640:	2b02      	cmp	r3, #2
 8005642:	d902      	bls.n	800564a <DMA_CheckFifoParam+0xb6>
 8005644:	2b03      	cmp	r3, #3
 8005646:	d003      	beq.n	8005650 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005648:	e018      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
        break;
 800564e:	e015      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
    break;
 8005660:	e00b      	b.n	800567a <DMA_CheckFifoParam+0xe6>
        break;
 8005662:	bf00      	nop
 8005664:	e00a      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 8005666:	bf00      	nop
 8005668:	e008      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 800566a:	bf00      	nop
 800566c:	e006      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 800566e:	bf00      	nop
 8005670:	e004      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <DMA_CheckFifoParam+0xe8>
        break;
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <DMA_CheckFifoParam+0xe8>
    break;
 800567a:	bf00      	nop
    }
  }

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop

0800568c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a38      	ldr	r2, [pc, #224]	@ (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a36      	ldr	r2, [pc, #216]	@ (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01d      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a35      	ldr	r2, [pc, #212]	@ (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a33      	ldr	r2, [pc, #204]	@ (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a32      	ldr	r2, [pc, #200]	@ (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a30      	ldr	r2, [pc, #192]	@ (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2f      	ldr	r2, [pc, #188]	@ (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	@ (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	3b08      	subs	r3, #8
 80056fc:	4a28      	ldr	r2, [pc, #160]	@ (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4b26      	ldr	r3, [pc, #152]	@ (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a24      	ldr	r2, [pc, #144]	@ (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005718:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 031f 	and.w	r3, r3, #31
 8005720:	2201      	movs	r2, #1
 8005722:	409a      	lsls	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005728:	e024      	b.n	8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3b10      	subs	r3, #16
 8005732:	4a1e      	ldr	r2, [pc, #120]	@ (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a1c      	ldr	r2, [pc, #112]	@ (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d806      	bhi.n	8005752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4a1b      	ldr	r2, [pc, #108]	@ (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d902      	bls.n	8005752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3308      	adds	r3, #8
 8005750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4b18      	ldr	r3, [pc, #96]	@ (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005764:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	2201      	movs	r2, #1
 800576e:	409a      	lsls	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	58025408 	.word	0x58025408
 8005784:	5802541c 	.word	0x5802541c
 8005788:	58025430 	.word	0x58025430
 800578c:	58025444 	.word	0x58025444
 8005790:	58025458 	.word	0x58025458
 8005794:	5802546c 	.word	0x5802546c
 8005798:	58025480 	.word	0x58025480
 800579c:	58025494 	.word	0x58025494
 80057a0:	cccccccd 	.word	0xcccccccd
 80057a4:	16009600 	.word	0x16009600
 80057a8:	58025880 	.word	0x58025880
 80057ac:	aaaaaaab 	.word	0xaaaaaaab
 80057b0:	400204b8 	.word	0x400204b8
 80057b4:	4002040f 	.word	0x4002040f
 80057b8:	10008200 	.word	0x10008200
 80057bc:	40020880 	.word	0x40020880

080057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d04a      	beq.n	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d847      	bhi.n	800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a25      	ldr	r2, [pc, #148]	@ (8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d022      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a24      	ldr	r2, [pc, #144]	@ (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d01d      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a22      	ldr	r2, [pc, #136]	@ (8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d018      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a21      	ldr	r2, [pc, #132]	@ (8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1f      	ldr	r2, [pc, #124]	@ (8005888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00e      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1e      	ldr	r2, [pc, #120]	@ (800588c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d009      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1c      	ldr	r2, [pc, #112]	@ (8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1b      	ldr	r2, [pc, #108]	@ (8005894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4b17      	ldr	r3, [pc, #92]	@ (8005898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a15      	ldr	r2, [pc, #84]	@ (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005848:	671a      	str	r2, [r3, #112]	@ 0x70
 800584a:	e009      	b.n	8005860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	461a      	mov	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a11      	ldr	r2, [pc, #68]	@ (80058a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800585e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b01      	subs	r3, #1
 8005864:	2201      	movs	r2, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	58025408 	.word	0x58025408
 800587c:	5802541c 	.word	0x5802541c
 8005880:	58025430 	.word	0x58025430
 8005884:	58025444 	.word	0x58025444
 8005888:	58025458 	.word	0x58025458
 800588c:	5802546c 	.word	0x5802546c
 8005890:	58025480 	.word	0x58025480
 8005894:	58025494 	.word	0x58025494
 8005898:	1600963f 	.word	0x1600963f
 800589c:	58025940 	.word	0x58025940
 80058a0:	1000823f 	.word	0x1000823f
 80058a4:	40020940 	.word	0x40020940

080058a8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e00a      	b.n	80058da <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d103      	bne.n	80058d2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	605a      	str	r2, [r3, #4]
      break;
 80058d0:	e002      	b.n	80058d8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
      break;
 80058d6:	bf00      	nop
  }

  return status;
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e003      	b.n	8005902 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005900:	2300      	movs	r3, #0
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2201      	movs	r2, #1
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	011a      	lsls	r2, r3, #4
 8005938:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <HAL_EXTI_IRQHandler+0x5c>)
 800593a:	4413      	add	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4013      	ands	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4798      	blx	r3
    }
  }
}
 8005962:	bf00      	nop
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	58000088 	.word	0x58000088

08005970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800597e:	4b89      	ldr	r3, [pc, #548]	@ (8005ba4 <HAL_GPIO_Init+0x234>)
 8005980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005982:	e194      	b.n	8005cae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2101      	movs	r1, #1
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa01 f303 	lsl.w	r3, r1, r3
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8186 	beq.w	8005ca8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d005      	beq.n	80059b4 <HAL_GPIO_Init+0x44>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d130      	bne.n	8005a16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	2203      	movs	r2, #3
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ea:	2201      	movs	r2, #1
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4013      	ands	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0201 	and.w	r2, r3, #1
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d017      	beq.n	8005a52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d123      	bne.n	8005aa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	08da      	lsrs	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3208      	adds	r2, #8
 8005a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	220f      	movs	r2, #15
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	08da      	lsrs	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3208      	adds	r2, #8
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43db      	mvns	r3, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4013      	ands	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0203 	and.w	r2, r3, #3
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80e0 	beq.w	8005ca8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba8 <HAL_GPIO_Init+0x238>)
 8005aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aee:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <HAL_GPIO_Init+0x238>)
 8005af0:	f043 0302 	orr.w	r3, r3, #2
 8005af4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005af8:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba8 <HAL_GPIO_Init+0x238>)
 8005afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b06:	4a29      	ldr	r2, [pc, #164]	@ (8005bac <HAL_GPIO_Init+0x23c>)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4013      	ands	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	@ (8005bb0 <HAL_GPIO_Init+0x240>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d052      	beq.n	8005bd8 <HAL_GPIO_Init+0x268>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <HAL_GPIO_Init+0x244>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_GPIO_Init+0x22e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_GPIO_Init+0x248>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d02b      	beq.n	8005b9a <HAL_GPIO_Init+0x22a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <HAL_GPIO_Init+0x24c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d025      	beq.n	8005b96 <HAL_GPIO_Init+0x226>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_GPIO_Init+0x250>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d01f      	beq.n	8005b92 <HAL_GPIO_Init+0x222>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_GPIO_Init+0x254>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d019      	beq.n	8005b8e <HAL_GPIO_Init+0x21e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <HAL_GPIO_Init+0x258>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_GPIO_Init+0x21a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <HAL_GPIO_Init+0x25c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00d      	beq.n	8005b86 <HAL_GPIO_Init+0x216>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <HAL_GPIO_Init+0x260>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <HAL_GPIO_Init+0x212>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a17      	ldr	r2, [pc, #92]	@ (8005bd4 <HAL_GPIO_Init+0x264>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <HAL_GPIO_Init+0x20e>
 8005b7a:	2309      	movs	r3, #9
 8005b7c:	e02d      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e02b      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b82:	2308      	movs	r3, #8
 8005b84:	e029      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b86:	2307      	movs	r3, #7
 8005b88:	e027      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b8a:	2306      	movs	r3, #6
 8005b8c:	e025      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b8e:	2305      	movs	r3, #5
 8005b90:	e023      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b92:	2304      	movs	r3, #4
 8005b94:	e021      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b96:	2303      	movs	r3, #3
 8005b98:	e01f      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e01d      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01b      	b.n	8005bda <HAL_GPIO_Init+0x26a>
 8005ba2:	bf00      	nop
 8005ba4:	58000080 	.word	0x58000080
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	58000400 	.word	0x58000400
 8005bb0:	58020000 	.word	0x58020000
 8005bb4:	58020400 	.word	0x58020400
 8005bb8:	58020800 	.word	0x58020800
 8005bbc:	58020c00 	.word	0x58020c00
 8005bc0:	58021000 	.word	0x58021000
 8005bc4:	58021400 	.word	0x58021400
 8005bc8:	58021800 	.word	0x58021800
 8005bcc:	58021c00 	.word	0x58021c00
 8005bd0:	58022000 	.word	0x58022000
 8005bd4:	58022400 	.word	0x58022400
 8005bd8:	2300      	movs	r3, #0
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	f002 0203 	and.w	r2, r2, #3
 8005be0:	0092      	lsls	r2, r2, #2
 8005be2:	4093      	lsls	r3, r2
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bea:	4938      	ldr	r1, [pc, #224]	@ (8005ccc <HAL_GPIO_Init+0x35c>)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	3301      	adds	r3, #1
 8005cac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f47f ae63 	bne.w	8005984 <HAL_GPIO_Init+0x14>
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	3724      	adds	r7, #36	@ 0x24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	58000400 	.word	0x58000400

08005cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	807b      	strh	r3, [r7, #2]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ce0:	787b      	ldrb	r3, [r7, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cec:	e003      	b.n	8005cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	041a      	lsls	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d0c:	4b19      	ldr	r3, [pc, #100]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d00a      	beq.n	8005d2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d18:	4b16      	ldr	r3, [pc, #88]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d001      	beq.n	8005d2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e01f      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e01d      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d2e:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f023 0207 	bic.w	r2, r3, #7
 8005d36:	490f      	ldr	r1, [pc, #60]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d3e:	f7fb fcd3 	bl	80016e8 <HAL_GetTick>
 8005d42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d44:	e009      	b.n	8005d5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d46:	f7fb fccf 	bl	80016e8 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d54:	d901      	bls.n	8005d5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e007      	b.n	8005d6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_PWREx_ConfigSupply+0x70>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d66:	d1ee      	bne.n	8005d46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	58024800 	.word	0x58024800

08005d78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	@ 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d102      	bne.n	8005d8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f000 bc48 	b.w	800661c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8088 	beq.w	8005eaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d9a:	4b99      	ldr	r3, [pc, #612]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005da4:	4b96      	ldr	r3, [pc, #600]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d007      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x48>
 8005db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db2:	2b18      	cmp	r3, #24
 8005db4:	d111      	bne.n	8005dda <HAL_RCC_OscConfig+0x62>
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d06d      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x130>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d169      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f000 bc21 	b.w	800661c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de2:	d106      	bne.n	8005df2 <HAL_RCC_OscConfig+0x7a>
 8005de4:	4b86      	ldr	r3, [pc, #536]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a85      	ldr	r2, [pc, #532]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e02e      	b.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10c      	bne.n	8005e14 <HAL_RCC_OscConfig+0x9c>
 8005dfa:	4b81      	ldr	r3, [pc, #516]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a80      	ldr	r2, [pc, #512]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	4b7e      	ldr	r3, [pc, #504]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0xc0>
 8005e1e:	4b78      	ldr	r3, [pc, #480]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a77      	ldr	r2, [pc, #476]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b75      	ldr	r3, [pc, #468]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a74      	ldr	r2, [pc, #464]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0xd8>
 8005e38:	4b71      	ldr	r3, [pc, #452]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a70      	ldr	r2, [pc, #448]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b6e      	ldr	r3, [pc, #440]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a6d      	ldr	r2, [pc, #436]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fb fc46 	bl	80016e8 <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fb fc42 	bl	80016e8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e3d4      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e72:	4b63      	ldr	r3, [pc, #396]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0xe8>
 8005e7e:	e014      	b.n	8005eaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fb fc32 	bl	80016e8 <HAL_GetTick>
 8005e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fb fc2e 	bl	80016e8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	@ 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e3c0      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e9a:	4b59      	ldr	r3, [pc, #356]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x110>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80ca 	beq.w	800604c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb8:	4b51      	ldr	r3, [pc, #324]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ec2:	4b4f      	ldr	r3, [pc, #316]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_RCC_OscConfig+0x166>
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	2b18      	cmp	r3, #24
 8005ed2:	d156      	bne.n	8005f82 <HAL_RCC_OscConfig+0x20a>
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d151      	bne.n	8005f82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ede:	4b48      	ldr	r3, [pc, #288]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x17e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e392      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ef6:	4b42      	ldr	r3, [pc, #264]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 0219 	bic.w	r2, r3, #25
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	493f      	ldr	r1, [pc, #252]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fb fbee 	bl	80016e8 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f10:	f7fb fbea 	bl	80016e8 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e37c      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f22:	4b37      	ldr	r3, [pc, #220]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2e:	f7fb fbe7 	bl	8001700 <HAL_GetREVID>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d817      	bhi.n	8005f6c <HAL_RCC_OscConfig+0x1f4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b40      	cmp	r3, #64	@ 0x40
 8005f42:	d108      	bne.n	8005f56 <HAL_RCC_OscConfig+0x1de>
 8005f44:	4b2e      	ldr	r3, [pc, #184]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f54:	e07a      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b2a      	ldr	r3, [pc, #168]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	031b      	lsls	r3, r3, #12
 8005f64:	4926      	ldr	r1, [pc, #152]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6a:	e06f      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b24      	ldr	r3, [pc, #144]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	4921      	ldr	r1, [pc, #132]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f80:	e064      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d047      	beq.n	800601a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 0219 	bic.w	r2, r3, #25
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	491a      	ldr	r1, [pc, #104]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fb fba4 	bl	80016e8 <HAL_GetTick>
 8005fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa4:	f7fb fba0 	bl	80016e8 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e332      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb6:	4b12      	ldr	r3, [pc, #72]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f0      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc2:	f7fb fb9d 	bl	8001700 <HAL_GetREVID>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d819      	bhi.n	8006004 <HAL_RCC_OscConfig+0x28c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b40      	cmp	r3, #64	@ 0x40
 8005fd6:	d108      	bne.n	8005fea <HAL_RCC_OscConfig+0x272>
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005fe0:	4a07      	ldr	r2, [pc, #28]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe6:	6053      	str	r3, [r2, #4]
 8005fe8:	e030      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	031b      	lsls	r3, r3, #12
 8005ff8:	4901      	ldr	r1, [pc, #4]	@ (8006000 <HAL_RCC_OscConfig+0x288>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	604b      	str	r3, [r1, #4]
 8005ffe:	e025      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
 8006000:	58024400 	.word	0x58024400
 8006004:	4b9a      	ldr	r3, [pc, #616]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	4997      	ldr	r1, [pc, #604]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
 8006018:	e018      	b.n	800604c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800601a:	4b95      	ldr	r3, [pc, #596]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a94      	ldr	r2, [pc, #592]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fb fb5f 	bl	80016e8 <HAL_GetTick>
 800602a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602e:	f7fb fb5b 	bl	80016e8 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e2ed      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006040:	4b8b      	ldr	r3, [pc, #556]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f0      	bne.n	800602e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80a9 	beq.w	80061ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605a:	4b85      	ldr	r3, [pc, #532]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006062:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006064:	4b82      	ldr	r3, [pc, #520]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d007      	beq.n	8006080 <HAL_RCC_OscConfig+0x308>
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	2b18      	cmp	r3, #24
 8006074:	d13a      	bne.n	80060ec <HAL_RCC_OscConfig+0x374>
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d135      	bne.n	80060ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006080:	4b7b      	ldr	r3, [pc, #492]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_RCC_OscConfig+0x320>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	2b80      	cmp	r3, #128	@ 0x80
 8006092:	d001      	beq.n	8006098 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e2c1      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006098:	f7fb fb32 	bl	8001700 <HAL_GetREVID>
 800609c:	4603      	mov	r3, r0
 800609e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d817      	bhi.n	80060d6 <HAL_RCC_OscConfig+0x35e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d108      	bne.n	80060c0 <HAL_RCC_OscConfig+0x348>
 80060ae:	4b70      	ldr	r3, [pc, #448]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060b6:	4a6e      	ldr	r2, [pc, #440]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060be:	e075      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	069b      	lsls	r3, r3, #26
 80060ce:	4968      	ldr	r1, [pc, #416]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060d4:	e06a      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060d6:	4b66      	ldr	r3, [pc, #408]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	061b      	lsls	r3, r3, #24
 80060e4:	4962      	ldr	r1, [pc, #392]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060ea:	e05f      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d042      	beq.n	800617a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060f4:	4b5e      	ldr	r3, [pc, #376]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80060fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fb faf2 	bl	80016e8 <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006108:	f7fb faee 	bl	80016e8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e280      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800611a:	4b55      	ldr	r3, [pc, #340]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006126:	f7fb faeb 	bl	8001700 <HAL_GetREVID>
 800612a:	4603      	mov	r3, r0
 800612c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006130:	4293      	cmp	r3, r2
 8006132:	d817      	bhi.n	8006164 <HAL_RCC_OscConfig+0x3ec>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	2b20      	cmp	r3, #32
 800613a:	d108      	bne.n	800614e <HAL_RCC_OscConfig+0x3d6>
 800613c:	4b4c      	ldr	r3, [pc, #304]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006144:	4a4a      	ldr	r2, [pc, #296]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800614a:	6053      	str	r3, [r2, #4]
 800614c:	e02e      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
 800614e:	4b48      	ldr	r3, [pc, #288]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	069b      	lsls	r3, r3, #26
 800615c:	4944      	ldr	r1, [pc, #272]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800615e:	4313      	orrs	r3, r2
 8006160:	604b      	str	r3, [r1, #4]
 8006162:	e023      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
 8006164:	4b42      	ldr	r3, [pc, #264]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	493f      	ldr	r1, [pc, #252]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006174:	4313      	orrs	r3, r2
 8006176:	60cb      	str	r3, [r1, #12]
 8006178:	e018      	b.n	80061ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800617a:	4b3d      	ldr	r3, [pc, #244]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a3c      	ldr	r2, [pc, #240]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006180:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006186:	f7fb faaf 	bl	80016e8 <HAL_GetTick>
 800618a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800618e:	f7fb faab 	bl	80016e8 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e23d      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80061a0:	4b33      	ldr	r3, [pc, #204]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f0      	bne.n	800618e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d036      	beq.n	8006226 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fb fa8c 	bl	80016e8 <HAL_GetTick>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fb fa88 	bl	80016e8 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e21a      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061e6:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x45c>
 80061f2:	e018      	b.n	8006226 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006200:	f7fb fa72 	bl	80016e8 <HAL_GetTick>
 8006204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006208:	f7fb fa6e 	bl	80016e8 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e200      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800621a:	4b15      	ldr	r3, [pc, #84]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d039      	beq.n	80062a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01c      	beq.n	8006274 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a0c      	ldr	r2, [pc, #48]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006244:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006246:	f7fb fa4f 	bl	80016e8 <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800624e:	f7fb fa4b 	bl	80016e8 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e1dd      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006260:	4b03      	ldr	r3, [pc, #12]	@ (8006270 <HAL_RCC_OscConfig+0x4f8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x4d6>
 800626c:	e01b      	b.n	80062a6 <HAL_RCC_OscConfig+0x52e>
 800626e:	bf00      	nop
 8006270:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006274:	4b9b      	ldr	r3, [pc, #620]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a9a      	ldr	r2, [pc, #616]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800627a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800627e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006280:	f7fb fa32 	bl	80016e8 <HAL_GetTick>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006288:	f7fb fa2e 	bl	80016e8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1c0      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800629a:	4b92      	ldr	r3, [pc, #584]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8081 	beq.w	80063b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80062b4:	4b8c      	ldr	r3, [pc, #560]	@ (80064e8 <HAL_RCC_OscConfig+0x770>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a8b      	ldr	r2, [pc, #556]	@ (80064e8 <HAL_RCC_OscConfig+0x770>)
 80062ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c0:	f7fb fa12 	bl	80016e8 <HAL_GetTick>
 80062c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c8:	f7fb fa0e 	bl	80016e8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e1a0      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062da:	4b83      	ldr	r3, [pc, #524]	@ (80064e8 <HAL_RCC_OscConfig+0x770>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d106      	bne.n	80062fc <HAL_RCC_OscConfig+0x584>
 80062ee:	4b7d      	ldr	r3, [pc, #500]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	4a7c      	ldr	r2, [pc, #496]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fa:	e02d      	b.n	8006358 <HAL_RCC_OscConfig+0x5e0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <HAL_RCC_OscConfig+0x5a6>
 8006304:	4b77      	ldr	r3, [pc, #476]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	4a76      	ldr	r2, [pc, #472]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006310:	4b74      	ldr	r3, [pc, #464]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006314:	4a73      	ldr	r2, [pc, #460]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006316:	f023 0304 	bic.w	r3, r3, #4
 800631a:	6713      	str	r3, [r2, #112]	@ 0x70
 800631c:	e01c      	b.n	8006358 <HAL_RCC_OscConfig+0x5e0>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0x5c8>
 8006326:	4b6f      	ldr	r3, [pc, #444]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632a:	4a6e      	ldr	r2, [pc, #440]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800632c:	f043 0304 	orr.w	r3, r3, #4
 8006330:	6713      	str	r3, [r2, #112]	@ 0x70
 8006332:	4b6c      	ldr	r3, [pc, #432]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	4a6b      	ldr	r2, [pc, #428]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6713      	str	r3, [r2, #112]	@ 0x70
 800633e:	e00b      	b.n	8006358 <HAL_RCC_OscConfig+0x5e0>
 8006340:	4b68      	ldr	r3, [pc, #416]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006344:	4a67      	ldr	r2, [pc, #412]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	6713      	str	r3, [r2, #112]	@ 0x70
 800634c:	4b65      	ldr	r3, [pc, #404]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006350:	4a64      	ldr	r2, [pc, #400]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006352:	f023 0304 	bic.w	r3, r3, #4
 8006356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fb f9c2 	bl	80016e8 <HAL_GetTick>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006366:	e00a      	b.n	800637e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006368:	f7fb f9be 	bl	80016e8 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e14e      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800637e:	4b59      	ldr	r3, [pc, #356]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0ee      	beq.n	8006368 <HAL_RCC_OscConfig+0x5f0>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fb f9ac 	bl	80016e8 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fb f9a8 	bl	80016e8 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e138      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80063aa:	4b4e      	ldr	r3, [pc, #312]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1ee      	bne.n	8006394 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 812d 	beq.w	800661a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80063c0:	4b48      	ldr	r3, [pc, #288]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063c8:	2b18      	cmp	r3, #24
 80063ca:	f000 80bd 	beq.w	8006548 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f040 809e 	bne.w	8006514 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d8:	4b42      	ldr	r3, [pc, #264]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a41      	ldr	r2, [pc, #260]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80063de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fb f980 	bl	80016e8 <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fb f97c 	bl	80016e8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e10e      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063fe:	4b39      	ldr	r3, [pc, #228]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800640a:	4b36      	ldr	r3, [pc, #216]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800640c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800640e:	4b37      	ldr	r3, [pc, #220]	@ (80064ec <HAL_RCC_OscConfig+0x774>)
 8006410:	4013      	ands	r3, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800641a:	0112      	lsls	r2, r2, #4
 800641c:	430a      	orrs	r2, r1
 800641e:	4931      	ldr	r1, [pc, #196]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006420:	4313      	orrs	r3, r2
 8006422:	628b      	str	r3, [r1, #40]	@ 0x28
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006428:	3b01      	subs	r3, #1
 800642a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006432:	3b01      	subs	r3, #1
 8006434:	025b      	lsls	r3, r3, #9
 8006436:	b29b      	uxth	r3, r3
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643e:	3b01      	subs	r3, #1
 8006440:	041b      	lsls	r3, r3, #16
 8006442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644c:	3b01      	subs	r3, #1
 800644e:	061b      	lsls	r3, r3, #24
 8006450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006454:	4923      	ldr	r1, [pc, #140]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006456:	4313      	orrs	r3, r2
 8006458:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800645a:	4b22      	ldr	r3, [pc, #136]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	4a21      	ldr	r2, [pc, #132]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006466:	4b1f      	ldr	r3, [pc, #124]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800646a:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <HAL_RCC_OscConfig+0x778>)
 800646c:	4013      	ands	r3, r2
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006472:	00d2      	lsls	r2, r2, #3
 8006474:	491b      	ldr	r1, [pc, #108]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006476:	4313      	orrs	r3, r2
 8006478:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800647a:	4b1a      	ldr	r3, [pc, #104]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	f023 020c 	bic.w	r2, r3, #12
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	4917      	ldr	r1, [pc, #92]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800648c:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	f023 0202 	bic.w	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006498:	4912      	ldr	r1, [pc, #72]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800649e:	4b11      	ldr	r3, [pc, #68]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	4a10      	ldr	r2, [pc, #64]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064aa:	4b0e      	ldr	r3, [pc, #56]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	4a0d      	ldr	r2, [pc, #52]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064b6:	4b0b      	ldr	r3, [pc, #44]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	4a0a      	ldr	r2, [pc, #40]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80064c2:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4a07      	ldr	r2, [pc, #28]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064ce:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a04      	ldr	r2, [pc, #16]	@ (80064e4 <HAL_RCC_OscConfig+0x76c>)
 80064d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064da:	f7fb f905 	bl	80016e8 <HAL_GetTick>
 80064de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e0:	e011      	b.n	8006506 <HAL_RCC_OscConfig+0x78e>
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
 80064e8:	58024800 	.word	0x58024800
 80064ec:	fffffc0c 	.word	0xfffffc0c
 80064f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fb f8f8 	bl	80016e8 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e08a      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006506:	4b47      	ldr	r3, [pc, #284]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x77c>
 8006512:	e082      	b.n	800661a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006514:	4b43      	ldr	r3, [pc, #268]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a42      	ldr	r2, [pc, #264]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800651a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800651e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fb f8e2 	bl	80016e8 <HAL_GetTick>
 8006524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006528:	f7fb f8de 	bl	80016e8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e070      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800653a:	4b3a      	ldr	r3, [pc, #232]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x7b0>
 8006546:	e068      	b.n	800661a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006548:	4b36      	ldr	r3, [pc, #216]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800654e:	4b35      	ldr	r3, [pc, #212]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006552:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b01      	cmp	r3, #1
 800655a:	d031      	beq.n	80065c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006566:	429a      	cmp	r2, r3
 8006568:	d12a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006576:	429a      	cmp	r2, r3
 8006578:	d122      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11a      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0a5b      	lsrs	r3, r3, #9
 800658e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006596:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006598:	429a      	cmp	r2, r3
 800659a:	d111      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d108      	bne.n	80065c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d001      	beq.n	80065c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02b      	b.n	800661c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80065c4:	4b17      	ldr	r3, [pc, #92]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	08db      	lsrs	r3, r3, #3
 80065ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d01f      	beq.n	800661a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065de:	4a11      	ldr	r2, [pc, #68]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065e6:	f7fb f87f 	bl	80016e8 <HAL_GetTick>
 80065ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065ec:	bf00      	nop
 80065ee:	f7fb f87b 	bl	80016e8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d0f9      	beq.n	80065ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 80065fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <HAL_RCC_OscConfig+0x8b0>)
 8006600:	4013      	ands	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006606:	00d2      	lsls	r2, r2, #3
 8006608:	4906      	ldr	r1, [pc, #24]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 800660a:	4313      	orrs	r3, r2
 800660c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800660e:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	4a04      	ldr	r2, [pc, #16]	@ (8006624 <HAL_RCC_OscConfig+0x8ac>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3730      	adds	r7, #48	@ 0x30
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	58024400 	.word	0x58024400
 8006628:	ffff0007 	.word	0xffff0007

0800662c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e19c      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006640:	4b8a      	ldr	r3, [pc, #552]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d910      	bls.n	8006670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	4b87      	ldr	r3, [pc, #540]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 020f 	bic.w	r2, r3, #15
 8006656:	4985      	ldr	r1, [pc, #532]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800665e:	4b83      	ldr	r3, [pc, #524]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e184      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	4b7b      	ldr	r3, [pc, #492]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006688:	429a      	cmp	r2, r3
 800668a:	d908      	bls.n	800669e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800668c:	4b78      	ldr	r3, [pc, #480]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	4975      	ldr	r1, [pc, #468]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800669a:	4313      	orrs	r3, r2
 800669c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d010      	beq.n	80066cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	4b70      	ldr	r3, [pc, #448]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d908      	bls.n	80066cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	496a      	ldr	r1, [pc, #424]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b64      	ldr	r3, [pc, #400]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d908      	bls.n	80066fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066e8:	4b61      	ldr	r3, [pc, #388]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	495e      	ldr	r1, [pc, #376]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d010      	beq.n	8006728 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	4b59      	ldr	r3, [pc, #356]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006712:	429a      	cmp	r2, r3
 8006714:	d908      	bls.n	8006728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006716:	4b56      	ldr	r3, [pc, #344]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	4953      	ldr	r1, [pc, #332]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006724:	4313      	orrs	r3, r2
 8006726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	4b4d      	ldr	r3, [pc, #308]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	429a      	cmp	r2, r3
 8006742:	d908      	bls.n	8006756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b4a      	ldr	r3, [pc, #296]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f023 020f 	bic.w	r2, r3, #15
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4947      	ldr	r1, [pc, #284]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006752:	4313      	orrs	r3, r2
 8006754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d055      	beq.n	800680e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006762:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4940      	ldr	r1, [pc, #256]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006770:	4313      	orrs	r3, r2
 8006772:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800677c:	4b3c      	ldr	r3, [pc, #240]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d121      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0f6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d107      	bne.n	80067a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006794:	4b36      	ldr	r3, [pc, #216]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0ea      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067ac:	4b30      	ldr	r3, [pc, #192]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e0de      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e0d6      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067cc:	4b28      	ldr	r3, [pc, #160]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f023 0207 	bic.w	r2, r3, #7
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4925      	ldr	r1, [pc, #148]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067de:	f7fa ff83 	bl	80016e8 <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e4:	e00a      	b.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e6:	f7fa ff7f 	bl	80016e8 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0be      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	429a      	cmp	r2, r3
 800680c:	d1eb      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d010      	beq.n	800683c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4b14      	ldr	r3, [pc, #80]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	429a      	cmp	r2, r3
 8006828:	d208      	bcs.n	800683c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682a:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f023 020f 	bic.w	r2, r3, #15
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	490e      	ldr	r1, [pc, #56]	@ (8006870 <HAL_RCC_ClockConfig+0x244>)
 8006838:	4313      	orrs	r3, r2
 800683a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800683c:	4b0b      	ldr	r3, [pc, #44]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d214      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684a:	4b08      	ldr	r3, [pc, #32]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 020f 	bic.w	r2, r3, #15
 8006852:	4906      	ldr	r1, [pc, #24]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	4313      	orrs	r3, r2
 8006858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <HAL_RCC_ClockConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d005      	beq.n	8006874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e086      	b.n	800697a <HAL_RCC_ClockConfig+0x34e>
 800686c:	52002000 	.word	0x52002000
 8006870:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	4b3f      	ldr	r3, [pc, #252]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800688c:	429a      	cmp	r2, r3
 800688e:	d208      	bcs.n	80068a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006890:	4b3c      	ldr	r3, [pc, #240]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	4939      	ldr	r1, [pc, #228]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	4b34      	ldr	r3, [pc, #208]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d208      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	492e      	ldr	r1, [pc, #184]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d010      	beq.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	4b28      	ldr	r3, [pc, #160]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d208      	bcs.n	80068fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068ec:	4b25      	ldr	r3, [pc, #148]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	4922      	ldr	r1, [pc, #136]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69da      	ldr	r2, [r3, #28]
 800690e:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006916:	429a      	cmp	r2, r3
 8006918:	d208      	bcs.n	800692c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800691a:	4b1a      	ldr	r3, [pc, #104]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	4917      	ldr	r1, [pc, #92]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006928:	4313      	orrs	r3, r2
 800692a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800692c:	f000 f834 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b14      	ldr	r3, [pc, #80]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4912      	ldr	r1, [pc, #72]	@ (8006988 <HAL_RCC_ClockConfig+0x35c>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800694a:	4b0e      	ldr	r3, [pc, #56]	@ (8006984 <HAL_RCC_ClockConfig+0x358>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	4a0d      	ldr	r2, [pc, #52]	@ (8006988 <HAL_RCC_ClockConfig+0x35c>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	fa22 f303 	lsr.w	r3, r2, r3
 8006960:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <HAL_RCC_ClockConfig+0x360>)
 8006962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006964:	4a0a      	ldr	r2, [pc, #40]	@ (8006990 <HAL_RCC_ClockConfig+0x364>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <HAL_RCC_ClockConfig+0x368>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fa fe70 	bl	8001654 <HAL_InitTick>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400
 8006988:	0800ae8c 	.word	0x0800ae8c
 800698c:	24000004 	.word	0x24000004
 8006990:	24000000 	.word	0x24000000
 8006994:	24000024 	.word	0x24000024

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	b480      	push	{r7}
 800699a:	b089      	sub	sp, #36	@ 0x24
 800699c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800699e:	4bb3      	ldr	r3, [pc, #716]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	f200 8155 	bhi.w	8006c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80069ac:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a19 	.word	0x08006a19
 80069b8:	08006c57 	.word	0x08006c57
 80069bc:	08006c57 	.word	0x08006c57
 80069c0:	08006c57 	.word	0x08006c57
 80069c4:	08006c57 	.word	0x08006c57
 80069c8:	08006c57 	.word	0x08006c57
 80069cc:	08006c57 	.word	0x08006c57
 80069d0:	08006c57 	.word	0x08006c57
 80069d4:	08006a3f 	.word	0x08006a3f
 80069d8:	08006c57 	.word	0x08006c57
 80069dc:	08006c57 	.word	0x08006c57
 80069e0:	08006c57 	.word	0x08006c57
 80069e4:	08006c57 	.word	0x08006c57
 80069e8:	08006c57 	.word	0x08006c57
 80069ec:	08006c57 	.word	0x08006c57
 80069f0:	08006c57 	.word	0x08006c57
 80069f4:	08006a45 	.word	0x08006a45
 80069f8:	08006c57 	.word	0x08006c57
 80069fc:	08006c57 	.word	0x08006c57
 8006a00:	08006c57 	.word	0x08006c57
 8006a04:	08006c57 	.word	0x08006c57
 8006a08:	08006c57 	.word	0x08006c57
 8006a0c:	08006c57 	.word	0x08006c57
 8006a10:	08006c57 	.word	0x08006c57
 8006a14:	08006a4b 	.word	0x08006a4b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a18:	4b94      	ldr	r3, [pc, #592]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a24:	4b91      	ldr	r3, [pc, #580]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	4a90      	ldr	r2, [pc, #576]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a36:	e111      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a38:	4b8d      	ldr	r3, [pc, #564]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a3a:	61bb      	str	r3, [r7, #24]
      break;
 8006a3c:	e10e      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a40:	61bb      	str	r3, [r7, #24]
      break;
 8006a42:	e10b      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a44:	4b8c      	ldr	r3, [pc, #560]	@ (8006c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a46:	61bb      	str	r3, [r7, #24]
      break;
 8006a48:	e108      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a4a:	4b88      	ldr	r3, [pc, #544]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a54:	4b85      	ldr	r3, [pc, #532]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a5e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a60:	4b82      	ldr	r3, [pc, #520]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a6a:	4b80      	ldr	r3, [pc, #512]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a82:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 80e1 	beq.w	8006c50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f000 8083 	beq.w	8006b9c <HAL_RCC_GetSysClockFreq+0x204>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f200 80a1 	bhi.w	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0x114>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d056      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006aaa:	e099      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aac:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02d      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	08db      	lsrs	r3, r3, #3
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	4a6b      	ldr	r2, [pc, #428]	@ (8006c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae2:	4b62      	ldr	r3, [pc, #392]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006af6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006b12:	e087      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b26:	4b51      	ldr	r3, [pc, #324]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b56:	e065      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b40      	ldr	r3, [pc, #256]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b9a:	e043      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b2f      	ldr	r3, [pc, #188]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bde:	e021      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006c24:	4b11      	ldr	r3, [pc, #68]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2e:	3301      	adds	r3, #1
 8006c30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c48:	ee17 3a90 	vmov	r3, s15
 8006c4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c4e:	e005      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	61bb      	str	r3, [r7, #24]
      break;
 8006c54:	e002      	b.n	8006c5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c56:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c58:	61bb      	str	r3, [r7, #24]
      break;
 8006c5a:	bf00      	nop
  }

  return sysclockfreq;
 8006c5c:	69bb      	ldr	r3, [r7, #24]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	@ 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	03d09000 	.word	0x03d09000
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	007a1200 	.word	0x007a1200
 8006c7c:	46000000 	.word	0x46000000
 8006c80:	4c742400 	.word	0x4c742400
 8006c84:	4a742400 	.word	0x4a742400
 8006c88:	4af42400 	.word	0x4af42400

08006c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c92:	f7ff fe81 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b10      	ldr	r3, [pc, #64]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490f      	ldr	r1, [pc, #60]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006cba:	5cd3      	ldrb	r3, [r2, r3]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	4a07      	ldr	r2, [pc, #28]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cca:	4a07      	ldr	r2, [pc, #28]	@ (8006ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	0800ae8c 	.word	0x0800ae8c
 8006ce4:	24000004 	.word	0x24000004
 8006ce8:	24000000 	.word	0x24000000

08006cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cf0:	f7ff ffcc 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	091b      	lsrs	r3, r3, #4
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4904      	ldr	r1, [pc, #16]	@ (8006d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	0800ae8c 	.word	0x0800ae8c

08006d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006d1c:	f7ff ffb6 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8006d20:	4602      	mov	r2, r0
 8006d22:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4904      	ldr	r1, [pc, #16]	@ (8006d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d2e:	5ccb      	ldrb	r3, [r1, r3]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	58024400 	.word	0x58024400
 8006d40:	0800ae8c 	.word	0x0800ae8c

08006d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b0ca      	sub	sp, #296	@ 0x128
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d68:	2500      	movs	r5, #0
 8006d6a:	ea54 0305 	orrs.w	r3, r4, r5
 8006d6e:	d049      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d7a:	d02f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d80:	d828      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d86:	d01a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d8c:	d822      	bhi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d96:	d007      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d98:	e01c      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d9a:	4bb8      	ldr	r3, [pc, #736]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	4ab7      	ldr	r2, [pc, #732]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006da6:	e01a      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	3308      	adds	r3, #8
 8006dae:	2102      	movs	r1, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 fb61 	bl	8009478 <RCCEx_PLL2_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dbc:	e00f      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc2:	3328      	adds	r3, #40	@ 0x28
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f002 fc08 	bl	80095dc <RCCEx_PLL3_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006dd2:	e004      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dda:	e000      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10a      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006de6:	4ba5      	ldr	r3, [pc, #660]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006df4:	4aa1      	ldr	r2, [pc, #644]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	ea58 0309 	orrs.w	r3, r8, r9
 8006e18:	d047      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d82a      	bhi.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e41 	.word	0x08006e41
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e65 	.word	0x08006e65
 8006e38:	08006e83 	.word	0x08006e83
 8006e3c:	08006e83 	.word	0x08006e83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b8e      	ldr	r3, [pc, #568]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a8d      	ldr	r2, [pc, #564]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e4c:	e01a      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	3308      	adds	r3, #8
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f002 fb0e 	bl	8009478 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e62:	e00f      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e68:	3328      	adds	r3, #40	@ 0x28
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f002 fbb5 	bl	80095dc <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e78:	e004      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e80:	e000      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e8c:	4b7b      	ldr	r3, [pc, #492]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	f023 0107 	bic.w	r1, r3, #7
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9a:	4a78      	ldr	r2, [pc, #480]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006eb6:	f04f 0b00 	mov.w	fp, #0
 8006eba:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ebe:	d04c      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eca:	d030      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d829      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed4:	d02d      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed8:	d825      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eda:	2b80      	cmp	r3, #128	@ 0x80
 8006edc:	d018      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ede:	2b80      	cmp	r3, #128	@ 0x80
 8006ee0:	d821      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d007      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006eea:	e01c      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eec:	4b63      	ldr	r3, [pc, #396]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a62      	ldr	r2, [pc, #392]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e01c      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	3308      	adds	r3, #8
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f002 fab8 	bl	8009478 <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e011      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	3328      	adds	r3, #40	@ 0x28
 8006f16:	2100      	movs	r1, #0
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 fb5f 	bl	80095dc <RCCEx_PLL3_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006f24:	e006      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f2c:	e002      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f50:	e003      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006f66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f70:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d053      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f86:	d035      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f8c:	d82e      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f8e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f92:	d031      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f98:	d828      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f9e:	d01a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006fa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fa4:	d822      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006fb0:	e01c      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb2:	4b32      	ldr	r3, [pc, #200]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	4a31      	ldr	r2, [pc, #196]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fbe:	e01c      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f002 fa55 	bl	8009478 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e011      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	3328      	adds	r3, #40	@ 0x28
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 fafc 	bl	80095dc <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fea:	e006      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10b      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007002:	4b1e      	ldr	r3, [pc, #120]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007006:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800700a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007012:	4a1a      	ldr	r2, [pc, #104]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007014:	430b      	orrs	r3, r1
 8007016:	6593      	str	r3, [r2, #88]	@ 0x58
 8007018:	e003      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800702e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007032:	2300      	movs	r3, #0
 8007034:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007038:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800703c:	460b      	mov	r3, r1
 800703e:	4313      	orrs	r3, r2
 8007040:	d056      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800704a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800704e:	d038      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007050:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007054:	d831      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007056:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800705a:	d034      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800705c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007060:	d82b      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007066:	d01d      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800706c:	d825      	bhi.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007078:	e01f      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007080:	4ba2      	ldr	r3, [pc, #648]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	4aa1      	ldr	r2, [pc, #644]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800708a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800708c:	e01c      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	3308      	adds	r3, #8
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f002 f9ee 	bl	8009478 <RCCEx_PLL2_Config>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80070a2:	e011      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a8:	3328      	adds	r3, #40	@ 0x28
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 fa95 	bl	80095dc <RCCEx_PLL3_Config>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070c0:	e002      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80070c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070d0:	4b8e      	ldr	r3, [pc, #568]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070e0:	4a8a      	ldr	r2, [pc, #552]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070e2:	430b      	orrs	r3, r1
 80070e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80070e6:	e003      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007106:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d03a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007116:	2b30      	cmp	r3, #48	@ 0x30
 8007118:	d01f      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800711a:	2b30      	cmp	r3, #48	@ 0x30
 800711c:	d819      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800711e:	2b20      	cmp	r3, #32
 8007120:	d00c      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007122:	2b20      	cmp	r3, #32
 8007124:	d815      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d019      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800712a:	2b10      	cmp	r3, #16
 800712c:	d111      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712e:	4b77      	ldr	r3, [pc, #476]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	4a76      	ldr	r2, [pc, #472]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800713c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007140:	3308      	adds	r3, #8
 8007142:	2102      	movs	r1, #2
 8007144:	4618      	mov	r0, r3
 8007146:	f002 f997 	bl	8009478 <RCCEx_PLL2_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007150:	e006      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800715a:	bf00      	nop
 800715c:	e000      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800715e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007168:	4b68      	ldr	r3, [pc, #416]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800716a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007176:	4a65      	ldr	r2, [pc, #404]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007178:	430b      	orrs	r3, r1
 800717a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800717c:	e003      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007192:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007196:	2300      	movs	r3, #0
 8007198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800719c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4313      	orrs	r3, r2
 80071a4:	d051      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b0:	d035      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80071b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071b6:	d82e      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071bc:	d031      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80071be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071c2:	d828      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c8:	d01a      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80071ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ce:	d822      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d8:	d007      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80071da:	e01c      	b.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071dc:	4b4b      	ldr	r3, [pc, #300]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	4a4a      	ldr	r2, [pc, #296]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071e8:	e01c      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	3308      	adds	r3, #8
 80071f0:	2100      	movs	r1, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f002 f940 	bl	8009478 <RCCEx_PLL2_Config>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071fe:	e011      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007204:	3328      	adds	r3, #40	@ 0x28
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f002 f9e7 	bl	80095dc <RCCEx_PLL3_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007214:	e006      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800721c:	e002      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800722c:	4b37      	ldr	r3, [pc, #220]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800722e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007230:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723a:	4a34      	ldr	r2, [pc, #208]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800723c:	430b      	orrs	r3, r1
 800723e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007240:	e003      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800725a:	2300      	movs	r3, #0
 800725c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007260:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007264:	460b      	mov	r3, r1
 8007266:	4313      	orrs	r3, r2
 8007268:	d056      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800726a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007274:	d033      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007276:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800727a:	d82c      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800727c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007280:	d02f      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007282:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007286:	d826      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007288:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800728c:	d02b      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800728e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007292:	d820      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007298:	d012      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800729a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800729e:	d81a      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d022      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a8:	d115      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ae:	3308      	adds	r3, #8
 80072b0:	2101      	movs	r1, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f002 f8e0 	bl	8009478 <RCCEx_PLL2_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072be:	e015      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c4:	3328      	adds	r3, #40	@ 0x28
 80072c6:	2101      	movs	r1, #1
 80072c8:	4618      	mov	r0, r3
 80072ca:	f002 f987 	bl	80095dc <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072d4:	e00a      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072dc:	e006      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072de:	bf00      	nop
 80072e0:	e004      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e2:	bf00      	nop
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072e6:	bf00      	nop
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007302:	4a02      	ldr	r2, [pc, #8]	@ (800730c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6513      	str	r3, [r2, #80]	@ 0x50
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800732e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d055      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007344:	d033      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800734a:	d82c      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007350:	d02f      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007356:	d826      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800735c:	d02b      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800735e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007362:	d820      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007368:	d012      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800736e:	d81a      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007370:	2b00      	cmp	r3, #0
 8007372:	d022      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007378:	d115      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	3308      	adds	r3, #8
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f002 f878 	bl	8009478 <RCCEx_PLL2_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800738e:	e015      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007394:	3328      	adds	r3, #40	@ 0x28
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f002 f91f 	bl	80095dc <RCCEx_PLL3_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80073a4:	e00a      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ac:	e006      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073ae:	bf00      	nop
 80073b0:	e004      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b2:	bf00      	nop
 80073b4:	e002      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80073ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80073c4:	4ba3      	ldr	r3, [pc, #652]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073d4:	4a9f      	ldr	r2, [pc, #636]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d6:	430b      	orrs	r3, r1
 80073d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80073da:	e003      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073f4:	2300      	movs	r3, #0
 80073f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073fe:	460b      	mov	r3, r1
 8007400:	4313      	orrs	r3, r2
 8007402:	d037      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740e:	d00e      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007414:	d816      	bhi.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d018      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741e:	d111      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007420:	4b8c      	ldr	r3, [pc, #560]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	4a8b      	ldr	r2, [pc, #556]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800742a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800742c:	e00f      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	3308      	adds	r3, #8
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f002 f81e 	bl	8009478 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007442:	e004      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800744a:	e000      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800744c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800744e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10a      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007456:	4b7f      	ldr	r3, [pc, #508]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007464:	4a7b      	ldr	r2, [pc, #492]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007466:	430b      	orrs	r3, r1
 8007468:	6513      	str	r3, [r2, #80]	@ 0x50
 800746a:	e003      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007484:	2300      	movs	r3, #0
 8007486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800748a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800748e:	460b      	mov	r3, r1
 8007490:	4313      	orrs	r3, r2
 8007492:	d039      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800749a:	2b03      	cmp	r3, #3
 800749c:	d81c      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800749e:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074b5 	.word	0x080074b5
 80074ac:	080074c3 	.word	0x080074c3
 80074b0:	080074e1 	.word	0x080074e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b4:	4b67      	ldr	r3, [pc, #412]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	4a66      	ldr	r2, [pc, #408]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074c0:	e00f      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c6:	3308      	adds	r3, #8
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 ffd4 	bl	8009478 <RCCEx_PLL2_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074d6:	e004      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074ea:	4b5a      	ldr	r3, [pc, #360]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ee:	f023 0103 	bic.w	r1, r3, #3
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f8:	4a56      	ldr	r2, [pc, #344]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074fa:	430b      	orrs	r3, r1
 80074fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007514:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800751e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	f000 809f 	beq.w	8007668 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800752a:	4b4b      	ldr	r3, [pc, #300]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4a      	ldr	r2, [pc, #296]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007534:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007536:	f7fa f8d7 	bl	80016e8 <HAL_GetTick>
 800753a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800753e:	e00b      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007540:	f7fa f8d2 	bl	80016e8 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b64      	cmp	r3, #100	@ 0x64
 800754e:	d903      	bls.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007556:	e005      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007558:	4b3f      	ldr	r3, [pc, #252]	@ (8007658 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0ed      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007568:	2b00      	cmp	r3, #0
 800756a:	d179      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800756c:	4b39      	ldr	r3, [pc, #228]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800756e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007578:	4053      	eors	r3, r2
 800757a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800757e:	2b00      	cmp	r3, #0
 8007580:	d015      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007582:	4b34      	ldr	r3, [pc, #208]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800758a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800758e:	4b31      	ldr	r3, [pc, #196]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007592:	4a30      	ldr	r2, [pc, #192]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007598:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800759a:	4b2e      	ldr	r3, [pc, #184]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759e:	4a2d      	ldr	r2, [pc, #180]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80075ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075ba:	d118      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7fa f894 	bl	80016e8 <HAL_GetTick>
 80075c0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075c4:	e00d      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c6:	f7fa f88f 	bl	80016e8 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80075e0:	e005      	b.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0eb      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d129      	bne.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007606:	d10e      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007608:	4b12      	ldr	r3, [pc, #72]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007618:	091a      	lsrs	r2, r3, #4
 800761a:	4b10      	ldr	r3, [pc, #64]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800761c:	4013      	ands	r3, r2
 800761e:	4a0d      	ldr	r2, [pc, #52]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6113      	str	r3, [r2, #16]
 8007624:	e005      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007626:	4b0b      	ldr	r3, [pc, #44]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	4a0a      	ldr	r2, [pc, #40]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800762c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007630:	6113      	str	r3, [r2, #16]
 8007632:	4b08      	ldr	r3, [pc, #32]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007634:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800763e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007642:	4a04      	ldr	r2, [pc, #16]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007644:	430b      	orrs	r3, r1
 8007646:	6713      	str	r3, [r2, #112]	@ 0x70
 8007648:	e00e      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007652:	e009      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007654:	58024400 	.word	0x58024400
 8007658:	58024800 	.word	0x58024800
 800765c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f002 0301 	and.w	r3, r2, #1
 8007674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800767e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	f000 8089 	beq.w	800779c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007690:	2b28      	cmp	r3, #40	@ 0x28
 8007692:	d86b      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007694:	a201      	add	r2, pc, #4	@ (adr r2, 800769c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	08007775 	.word	0x08007775
 80076a0:	0800776d 	.word	0x0800776d
 80076a4:	0800776d 	.word	0x0800776d
 80076a8:	0800776d 	.word	0x0800776d
 80076ac:	0800776d 	.word	0x0800776d
 80076b0:	0800776d 	.word	0x0800776d
 80076b4:	0800776d 	.word	0x0800776d
 80076b8:	0800776d 	.word	0x0800776d
 80076bc:	08007741 	.word	0x08007741
 80076c0:	0800776d 	.word	0x0800776d
 80076c4:	0800776d 	.word	0x0800776d
 80076c8:	0800776d 	.word	0x0800776d
 80076cc:	0800776d 	.word	0x0800776d
 80076d0:	0800776d 	.word	0x0800776d
 80076d4:	0800776d 	.word	0x0800776d
 80076d8:	0800776d 	.word	0x0800776d
 80076dc:	08007757 	.word	0x08007757
 80076e0:	0800776d 	.word	0x0800776d
 80076e4:	0800776d 	.word	0x0800776d
 80076e8:	0800776d 	.word	0x0800776d
 80076ec:	0800776d 	.word	0x0800776d
 80076f0:	0800776d 	.word	0x0800776d
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	0800776d 	.word	0x0800776d
 80076fc:	08007775 	.word	0x08007775
 8007700:	0800776d 	.word	0x0800776d
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	0800776d 	.word	0x0800776d
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800776d 	.word	0x0800776d
 800771c:	08007775 	.word	0x08007775
 8007720:	0800776d 	.word	0x0800776d
 8007724:	0800776d 	.word	0x0800776d
 8007728:	0800776d 	.word	0x0800776d
 800772c:	0800776d 	.word	0x0800776d
 8007730:	0800776d 	.word	0x0800776d
 8007734:	0800776d 	.word	0x0800776d
 8007738:	0800776d 	.word	0x0800776d
 800773c:	08007775 	.word	0x08007775
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007744:	3308      	adds	r3, #8
 8007746:	2101      	movs	r1, #1
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fe95 	bl	8009478 <RCCEx_PLL2_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007754:	e00f      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	3328      	adds	r3, #40	@ 0x28
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f001 ff3c 	bl	80095dc <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800776a:	e004      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007772:	e000      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800777e:	4bbf      	ldr	r3, [pc, #764]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007782:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800778c:	4abb      	ldr	r2, [pc, #748]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800778e:	430b      	orrs	r3, r1
 8007790:	6553      	str	r3, [r2, #84]	@ 0x54
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f002 0302 	and.w	r3, r2, #2
 80077a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80077b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d041      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077c2:	2b05      	cmp	r3, #5
 80077c4:	d824      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80077c6:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007819 	.word	0x08007819
 80077d0:	080077e5 	.word	0x080077e5
 80077d4:	080077fb 	.word	0x080077fb
 80077d8:	08007819 	.word	0x08007819
 80077dc:	08007819 	.word	0x08007819
 80077e0:	08007819 	.word	0x08007819
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	3308      	adds	r3, #8
 80077ea:	2101      	movs	r1, #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 fe43 	bl	8009478 <RCCEx_PLL2_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	3328      	adds	r3, #40	@ 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 feea 	bl	80095dc <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007822:	4b96      	ldr	r3, [pc, #600]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f023 0107 	bic.w	r1, r3, #7
 800782a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007830:	4a92      	ldr	r2, [pc, #584]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6553      	str	r3, [r2, #84]	@ 0x54
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f002 0304 	and.w	r3, r2, #4
 800784c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007856:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800785a:	460b      	mov	r3, r1
 800785c:	4313      	orrs	r3, r2
 800785e:	d044      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007868:	2b05      	cmp	r3, #5
 800786a:	d825      	bhi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800786c:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	080078c1 	.word	0x080078c1
 8007878:	0800788d 	.word	0x0800788d
 800787c:	080078a3 	.word	0x080078a3
 8007880:	080078c1 	.word	0x080078c1
 8007884:	080078c1 	.word	0x080078c1
 8007888:	080078c1 	.word	0x080078c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	3308      	adds	r3, #8
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f001 fdef 	bl	8009478 <RCCEx_PLL2_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078a0:	e00f      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a6:	3328      	adds	r3, #40	@ 0x28
 80078a8:	2101      	movs	r1, #1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fe96 	bl	80095dc <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80078b6:	e004      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80078c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078ca:	4b6c      	ldr	r3, [pc, #432]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	f023 0107 	bic.w	r1, r3, #7
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078da:	4a68      	ldr	r2, [pc, #416]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078dc:	430b      	orrs	r3, r1
 80078de:	6593      	str	r3, [r2, #88]	@ 0x58
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f002 0320 	and.w	r3, r2, #32
 80078f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007904:	460b      	mov	r3, r1
 8007906:	4313      	orrs	r3, r2
 8007908:	d055      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007916:	d033      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800791c:	d82c      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007922:	d02f      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007928:	d826      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800792a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800792e:	d02b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007934:	d820      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800793a:	d012      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800793c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007940:	d81a      	bhi.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d022      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800794a:	d115      	bne.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	3308      	adds	r3, #8
 8007952:	2100      	movs	r1, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f001 fd8f 	bl	8009478 <RCCEx_PLL2_Config>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007960:	e015      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	3328      	adds	r3, #40	@ 0x28
 8007968:	2102      	movs	r1, #2
 800796a:	4618      	mov	r0, r3
 800796c:	f001 fe36 	bl	80095dc <RCCEx_PLL3_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007976:	e00a      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800797e:	e006      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007980:	bf00      	nop
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007996:	4b39      	ldr	r3, [pc, #228]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800799e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a6:	4a35      	ldr	r2, [pc, #212]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80079ac:	e003      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80079b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80079c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079c6:	2300      	movs	r3, #0
 80079c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4313      	orrs	r3, r2
 80079d4:	d058      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80079d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079e2:	d033      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079e8:	d82c      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ee:	d02f      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f4:	d826      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079fa:	d02b      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a00:	d820      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a06:	d012      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a0c:	d81a      	bhi.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d022      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a16:	d115      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 fd29 	bl	8009478 <RCCEx_PLL2_Config>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a2c:	e015      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a32:	3328      	adds	r3, #40	@ 0x28
 8007a34:	2102      	movs	r1, #2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 fdd0 	bl	80095dc <RCCEx_PLL3_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a42:	e00a      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a4a:	e006      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10e      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a62:	4b06      	ldr	r3, [pc, #24]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a66:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a72:	4a02      	ldr	r2, [pc, #8]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a74:	430b      	orrs	r3, r1
 8007a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a78:	e006      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a7a:	bf00      	nop
 8007a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d055      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ab0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007ab4:	d033      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007ab6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007aba:	d82c      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007abc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac0:	d02f      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac6:	d826      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ac8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007acc:	d02b      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007ace:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007ad2:	d820      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad8:	d012      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ade:	d81a      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d022      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae8:	d115      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	3308      	adds	r3, #8
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 fcc0 	bl	8009478 <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007afe:	e015      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	3328      	adds	r3, #40	@ 0x28
 8007b06:	2102      	movs	r1, #2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fd67 	bl	80095dc <RCCEx_PLL3_Config>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b14:	e00a      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b1e:	bf00      	nop
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b34:	4ba1      	ldr	r3, [pc, #644]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b44:	4a9d      	ldr	r2, [pc, #628]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b46:	430b      	orrs	r3, r1
 8007b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b4a:	e003      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f002 0308 	and.w	r3, r2, #8
 8007b60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b64:	2300      	movs	r3, #0
 8007b66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d01e      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b80:	d10c      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	3328      	adds	r3, #40	@ 0x28
 8007b88:	2102      	movs	r1, #2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fd26 	bl	80095dc <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b9c:	4b87      	ldr	r3, [pc, #540]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bac:	4a83      	ldr	r2, [pc, #524]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f002 0310 	and.w	r3, r2, #16
 8007bbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	d01e      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be4:	3328      	adds	r3, #40	@ 0x28
 8007be6:	2102      	movs	r1, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 fcf7 	bl	80095dc <RCCEx_PLL3_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bfa:	4b70      	ldr	r3, [pc, #448]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c0a:	4a6c      	ldr	r2, [pc, #432]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d03e      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3c:	d022      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c42:	d81b      	bhi.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c4c:	d00b      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c4e:	e015      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c54:	3308      	adds	r3, #8
 8007c56:	2100      	movs	r1, #0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 fc0d 	bl	8009478 <RCCEx_PLL2_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	3328      	adds	r3, #40	@ 0x28
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fcb4 	bl	80095dc <RCCEx_PLL3_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c7a:	e004      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c82:	e000      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10b      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c9e:	4a47      	ldr	r2, [pc, #284]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ca4:	e003      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007cba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d03b      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cd6:	d01f      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cdc:	d818      	bhi.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ce2:	d003      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce8:	d007      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007cea:	e011      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cec:	4b33      	ldr	r3, [pc, #204]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	4a32      	ldr	r2, [pc, #200]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007cf8:	e00f      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfe:	3328      	adds	r3, #40	@ 0x28
 8007d00:	2101      	movs	r1, #1
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 fc6a 	bl	80095dc <RCCEx_PLL3_Config>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d0e:	e004      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d16:	e000      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d22:	4b26      	ldr	r3, [pc, #152]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d32:	4a22      	ldr	r2, [pc, #136]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d38:	e003      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d50:	2300      	movs	r3, #0
 8007d52:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	d034      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6c:	d007      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d6e:	e011      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d70:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	4a11      	ldr	r2, [pc, #68]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d7c:	e00e      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	3308      	adds	r3, #8
 8007d84:	2102      	movs	r1, #2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fb76 	bl	8009478 <RCCEx_PLL2_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d92:	e003      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db2:	4a02      	ldr	r2, [pc, #8]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007db8:	e006      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007dde:	460b      	mov	r3, r1
 8007de0:	4313      	orrs	r3, r2
 8007de2:	d00c      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de8:	3328      	adds	r3, #40	@ 0x28
 8007dea:	2102      	movs	r1, #2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fbf5 	bl	80095dc <RCCEx_PLL3_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e14:	460b      	mov	r3, r1
 8007e16:	4313      	orrs	r3, r2
 8007e18:	d038      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e26:	d018      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e2c:	d811      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e32:	d014      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e38:	d80b      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e42:	d106      	bne.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4bc3      	ldr	r3, [pc, #780]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4ac2      	ldr	r2, [pc, #776]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e50:	e008      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e58:	e004      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e5a:	bf00      	nop
 8007e5c:	e002      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10b      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e6c:	4bb9      	ldr	r3, [pc, #740]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e70:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e7c:	4ab5      	ldr	r2, [pc, #724]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e82:	e003      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	d009      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ea8:	4baa      	ldr	r3, [pc, #680]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb6:	4aa7      	ldr	r2, [pc, #668]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ec8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007eca:	2300      	movs	r3, #0
 8007ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	d00a      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ed8:	4b9e      	ldr	r3, [pc, #632]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ee8:	4a9a      	ldr	r2, [pc, #616]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efc:	2300      	movs	r3, #0
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f04:	460b      	mov	r3, r1
 8007f06:	4313      	orrs	r3, r2
 8007f08:	d009      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f0a:	4b92      	ldr	r3, [pc, #584]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f0e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f18:	4a8e      	ldr	r2, [pc, #568]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f30:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f3a:	4b86      	ldr	r3, [pc, #536]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	4a85      	ldr	r2, [pc, #532]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f40:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f44:	6113      	str	r3, [r2, #16]
 8007f46:	4b83      	ldr	r3, [pc, #524]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f48:	6919      	ldr	r1, [r3, #16]
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f52:	4a80      	ldr	r2, [pc, #512]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f54:	430b      	orrs	r3, r1
 8007f56:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d009      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f74:	4b77      	ldr	r3, [pc, #476]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f78:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f82:	4a74      	ldr	r2, [pc, #464]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f84:	430b      	orrs	r3, r1
 8007f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f96:	2300      	movs	r3, #0
 8007f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f9a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	d00a      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb4:	4a67      	ldr	r2, [pc, #412]	@ (8008154 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d011      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2100      	movs	r1, #0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fa4a 	bl	8009478 <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	2100      	movs	r1, #0
 8008004:	6239      	str	r1, [r7, #32]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	627b      	str	r3, [r7, #36]	@ 0x24
 800800c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008010:	460b      	mov	r3, r1
 8008012:	4313      	orrs	r3, r2
 8008014:	d011      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801a:	3308      	adds	r3, #8
 800801c:	2101      	movs	r1, #1
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fa2a 	bl	8009478 <RCCEx_PLL2_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	2100      	movs	r1, #0
 8008044:	61b9      	str	r1, [r7, #24]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008050:	460b      	mov	r3, r1
 8008052:	4313      	orrs	r3, r2
 8008054:	d011      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	3308      	adds	r3, #8
 800805c:	2102      	movs	r1, #2
 800805e:	4618      	mov	r0, r3
 8008060:	f001 fa0a 	bl	8009478 <RCCEx_PLL2_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	2100      	movs	r1, #0
 8008084:	6139      	str	r1, [r7, #16]
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008090:	460b      	mov	r3, r1
 8008092:	4313      	orrs	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	3328      	adds	r3, #40	@ 0x28
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fa9c 	bl	80095dc <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	2100      	movs	r1, #0
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080d0:	460b      	mov	r3, r1
 80080d2:	4313      	orrs	r3, r2
 80080d4:	d011      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	3328      	adds	r3, #40	@ 0x28
 80080dc:	2101      	movs	r1, #1
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fa7c 	bl	80095dc <RCCEx_PLL3_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	2100      	movs	r1, #0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008110:	460b      	mov	r3, r1
 8008112:	4313      	orrs	r3, r2
 8008114:	d011      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	3328      	adds	r3, #40	@ 0x28
 800811c:	2102      	movs	r1, #2
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fa5c 	bl	80095dc <RCCEx_PLL3_Config>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800812a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800813a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
}
 8008148:	4618      	mov	r0, r3
 800814a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800814e:	46bd      	mov	sp, r7
 8008150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008154:	58024400 	.word	0x58024400

08008158 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b090      	sub	sp, #64	@ 0x40
 800815c:	af00      	add	r7, sp, #0
 800815e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008166:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800816a:	430b      	orrs	r3, r1
 800816c:	f040 8094 	bne.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008170:	4b9e      	ldr	r3, [pc, #632]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	2b04      	cmp	r3, #4
 800817e:	f200 8087 	bhi.w	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008182:	a201      	add	r2, pc, #4	@ (adr r2, 8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	0800819d 	.word	0x0800819d
 800818c:	080081c5 	.word	0x080081c5
 8008190:	080081ed 	.word	0x080081ed
 8008194:	08008289 	.word	0x08008289
 8008198:	08008215 	.word	0x08008215
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800819c:	4b93      	ldr	r3, [pc, #588]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a8:	d108      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 f810 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b8:	f000 bd45 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c0:	f000 bd41 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c4:	4b89      	ldr	r3, [pc, #548]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081d0:	d108      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d2:	f107 0318 	add.w	r3, r7, #24
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fd54 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e0:	f000 bd31 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e8:	f000 bd2d 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081ec:	4b7f      	ldr	r3, [pc, #508]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f8:	d108      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fa:	f107 030c 	add.w	r3, r7, #12
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fe94 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008208:	f000 bd1d 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800820c:	2300      	movs	r3, #0
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008210:	f000 bd19 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008214:	4b75      	ldr	r3, [pc, #468]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008218:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800821c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800821e:	4b73      	ldr	r3, [pc, #460]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b04      	cmp	r3, #4
 8008228:	d10c      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800822a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822c:	2b00      	cmp	r3, #0
 800822e:	d109      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008230:	4b6e      	ldr	r3, [pc, #440]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	08db      	lsrs	r3, r3, #3
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	4a6d      	ldr	r2, [pc, #436]	@ (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800823c:	fa22 f303 	lsr.w	r3, r2, r3
 8008240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008242:	e01f      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008244:	4b69      	ldr	r3, [pc, #420]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800824c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008250:	d106      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008258:	d102      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800825a:	4b66      	ldr	r3, [pc, #408]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800825e:	e011      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008260:	4b62      	ldr	r3, [pc, #392]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800826c:	d106      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800826e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008274:	d102      	bne.n	800827c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008276:	4b60      	ldr	r3, [pc, #384]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800827a:	e003      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008280:	f000 bce1 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008284:	f000 bcdf 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008288:	4b5c      	ldr	r3, [pc, #368]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828c:	f000 bcdb 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008294:	f000 bcd7 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800829c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80082a0:	430b      	orrs	r3, r1
 80082a2:	f040 80ad 	bne.w	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80082a6:	4b51      	ldr	r3, [pc, #324]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80082ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082b6:	d056      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082be:	f200 8090 	bhi.w	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80082c6:	f000 8088 	beq.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80082ce:	f200 8088 	bhi.w	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	2b80      	cmp	r3, #128	@ 0x80
 80082d6:	d032      	beq.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	2b80      	cmp	r3, #128	@ 0x80
 80082dc:	f200 8081 	bhi.w	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	2b40      	cmp	r3, #64	@ 0x40
 80082ea:	d014      	beq.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80082ec:	e079      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082ee:	4b3f      	ldr	r3, [pc, #252]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082fa:	d108      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008300:	4618      	mov	r0, r3
 8008302:	f000 ff67 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800830a:	f000 bc9c 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008312:	f000 bc98 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008316:	4b35      	ldr	r3, [pc, #212]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800831e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008322:	d108      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008324:	f107 0318 	add.w	r3, r7, #24
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fcab 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008332:	f000 bc88 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833a:	f000 bc84 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800833e:	4b2b      	ldr	r3, [pc, #172]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800834a:	d108      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fdeb 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835a:	f000 bc74 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008362:	f000 bc70 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008366:	4b21      	ldr	r3, [pc, #132]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800836a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008370:	4b1e      	ldr	r3, [pc, #120]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b04      	cmp	r3, #4
 800837a:	d10c      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800837c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008382:	4b1a      	ldr	r3, [pc, #104]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	08db      	lsrs	r3, r3, #3
 8008388:	f003 0303 	and.w	r3, r3, #3
 800838c:	4a18      	ldr	r2, [pc, #96]	@ (80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800838e:	fa22 f303 	lsr.w	r3, r2, r3
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008394:	e01f      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008396:	4b15      	ldr	r3, [pc, #84]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800839e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a2:	d106      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80083a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083aa:	d102      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083ac:	4b11      	ldr	r3, [pc, #68]	@ (80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083b0:	e011      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b2:	4b0e      	ldr	r3, [pc, #56]	@ (80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083be:	d106      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80083c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083c6:	d102      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083c8:	4b0b      	ldr	r3, [pc, #44]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083cc:	e003      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083d2:	f000 bc38 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083d6:	f000 bc36 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083da:	4b08      	ldr	r3, [pc, #32]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083de:	f000 bc32 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e6:	f000 bc2e 	b.w	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083ea:	bf00      	nop
 80083ec:	58024400 	.word	0x58024400
 80083f0:	03d09000 	.word	0x03d09000
 80083f4:	003d0900 	.word	0x003d0900
 80083f8:	007a1200 	.word	0x007a1200
 80083fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008404:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008408:	430b      	orrs	r3, r1
 800840a:	f040 809c 	bne.w	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800840e:	4b9e      	ldr	r3, [pc, #632]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008412:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008416:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800841e:	d054      	beq.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008426:	f200 808b 	bhi.w	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008430:	f000 8083 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008436:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800843a:	f200 8081 	bhi.w	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008444:	d02f      	beq.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800844c:	d878      	bhi.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800845a:	d012      	beq.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800845c:	e070      	b.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800845e:	4b8a      	ldr	r3, [pc, #552]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800846a:	d107      	bne.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800846c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008470:	4618      	mov	r0, r3
 8008472:	f000 feaf 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800847a:	e3e4      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008480:	e3e1      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008482:	4b81      	ldr	r3, [pc, #516]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800848a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800848e:	d107      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008490:	f107 0318 	add.w	r3, r7, #24
 8008494:	4618      	mov	r0, r3
 8008496:	f000 fbf5 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800849e:	e3d2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a4:	e3cf      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084a6:	4b78      	ldr	r3, [pc, #480]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b2:	d107      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b4:	f107 030c 	add.w	r3, r7, #12
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 fd37 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c2:	e3c0      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084c8:	e3bd      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084ca:	4b6f      	ldr	r3, [pc, #444]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084d4:	4b6c      	ldr	r3, [pc, #432]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d10c      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80084e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e6:	4b68      	ldr	r3, [pc, #416]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	08db      	lsrs	r3, r3, #3
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	4a66      	ldr	r2, [pc, #408]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80084f2:	fa22 f303 	lsr.w	r3, r2, r3
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f8:	e01e      	b.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084fa:	4b63      	ldr	r3, [pc, #396]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008506:	d106      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800850e:	d102      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008510:	4b5f      	ldr	r3, [pc, #380]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008514:	e010      	b.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008516:	4b5c      	ldr	r3, [pc, #368]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800851e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008522:	d106      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800852a:	d102      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800852c:	4b59      	ldr	r3, [pc, #356]	@ (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008536:	e386      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008538:	e385      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800853a:	4b57      	ldr	r3, [pc, #348]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853e:	e382      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008544:	e37f      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800854e:	430b      	orrs	r3, r1
 8008550:	f040 80a7 	bne.w	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008554:	4b4c      	ldr	r3, [pc, #304]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008558:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800855c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008564:	d055      	beq.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800856c:	f200 8096 	bhi.w	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008576:	f000 8084 	beq.w	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008580:	f200 808c 	bhi.w	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800858a:	d030      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008592:	f200 8083 	bhi.w	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085a2:	d012      	beq.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80085a4:	e07a      	b.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085a6:	4b38      	ldr	r3, [pc, #224]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085b2:	d107      	bne.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fe0b 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c2:	e340      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c8:	e33d      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085d6:	d107      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d8:	f107 0318 	add.w	r3, r7, #24
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fb51 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e6:	e32e      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ec:	e32b      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ee:	4b26      	ldr	r3, [pc, #152]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fa:	d107      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085fc:	f107 030c 	add.w	r3, r7, #12
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fc93 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860a:	e31c      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008610:	e319      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008612:	4b1d      	ldr	r3, [pc, #116]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008616:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800861a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800861c:	4b1a      	ldr	r3, [pc, #104]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d10c      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862a:	2b00      	cmp	r3, #0
 800862c:	d109      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800862e:	4b16      	ldr	r3, [pc, #88]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	f003 0303 	and.w	r3, r3, #3
 8008638:	4a14      	ldr	r2, [pc, #80]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800863a:	fa22 f303 	lsr.w	r3, r2, r3
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008640:	e01e      	b.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008642:	4b11      	ldr	r3, [pc, #68]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800864e:	d106      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008656:	d102      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008658:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800865a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800865c:	e010      	b.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800865e:	4b0a      	ldr	r3, [pc, #40]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800866a:	d106      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800866c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008672:	d102      	bne.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008674:	4b07      	ldr	r3, [pc, #28]	@ (8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008678:	e002      	b.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800867e:	e2e2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008680:	e2e1      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008682:	4b05      	ldr	r3, [pc, #20]	@ (8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008686:	e2de      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008688:	58024400 	.word	0x58024400
 800868c:	03d09000 	.word	0x03d09000
 8008690:	003d0900 	.word	0x003d0900
 8008694:	007a1200 	.word	0x007a1200
 8008698:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a0:	e2d1      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80086a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80086aa:	430b      	orrs	r3, r1
 80086ac:	f040 809c 	bne.w	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80086b0:	4b93      	ldr	r3, [pc, #588]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80086b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80086ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086c0:	d054      	beq.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086c8:	f200 808b 	bhi.w	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086d2:	f000 8083 	beq.w	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086dc:	f200 8081 	bhi.w	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e6:	d02f      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80086e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ee:	d878      	bhi.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086fc:	d012      	beq.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80086fe:	e070      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008700:	4b7f      	ldr	r3, [pc, #508]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800870c:	d107      	bne.n	800871e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800870e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008712:	4618      	mov	r0, r3
 8008714:	f000 fd5e 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800871c:	e293      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008722:	e290      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008724:	4b76      	ldr	r3, [pc, #472]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800872c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008730:	d107      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4618      	mov	r0, r3
 8008738:	f000 faa4 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008740:	e281      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008746:	e27e      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008748:	4b6d      	ldr	r3, [pc, #436]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008754:	d107      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008756:	f107 030c 	add.w	r3, r7, #12
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fbe6 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008764:	e26f      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876a:	e26c      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800876c:	4b64      	ldr	r3, [pc, #400]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800876e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008774:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008776:	4b62      	ldr	r3, [pc, #392]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b04      	cmp	r3, #4
 8008780:	d10c      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008788:	4b5d      	ldr	r3, [pc, #372]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	08db      	lsrs	r3, r3, #3
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	4a5c      	ldr	r2, [pc, #368]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
 8008798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800879a:	e01e      	b.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800879c:	4b58      	ldr	r3, [pc, #352]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a8:	d106      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80087aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b0:	d102      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087b2:	4b55      	ldr	r3, [pc, #340]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80087b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b6:	e010      	b.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087b8:	4b51      	ldr	r3, [pc, #324]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c4:	d106      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80087c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087cc:	d102      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087ce:	4b4f      	ldr	r3, [pc, #316]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087d2:	e002      	b.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087d8:	e235      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087da:	e234      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80087dc:	4b4c      	ldr	r3, [pc, #304]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e231      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e6:	e22e      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80087e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80087f0:	430b      	orrs	r3, r1
 80087f2:	f040 808f 	bne.w	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80087f6:	4b42      	ldr	r3, [pc, #264]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80087f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087fa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80087fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008806:	d06b      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800880e:	d874      	bhi.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008816:	d056      	beq.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800881e:	d86c      	bhi.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008826:	d03b      	beq.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800882e:	d864      	bhi.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008836:	d021      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800883e:	d85c      	bhi.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800884c:	d004      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800884e:	e054      	b.n	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008850:	f7fe fa4c 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 8008854:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008856:	e1f6      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008858:	4b29      	ldr	r3, [pc, #164]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008864:	d107      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008866:	f107 0318 	add.w	r3, r7, #24
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fa0a 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008874:	e1e7      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887a:	e1e4      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800887c:	4b20      	ldr	r3, [pc, #128]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008888:	d107      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888a:	f107 030c 	add.w	r3, r7, #12
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fb4c 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008898:	e1d5      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889e:	e1d2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088a0:	4b17      	ldr	r3, [pc, #92]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d109      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088ac:	4b14      	ldr	r3, [pc, #80]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	08db      	lsrs	r3, r3, #3
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	4a13      	ldr	r2, [pc, #76]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
 80088bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088be:	e1c2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c4:	e1bf      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80088c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088d2:	d102      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80088d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d8:	e1b5      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088de:	e1b2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80088e0:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ec:	d102      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80088ee:	4b07      	ldr	r3, [pc, #28]	@ (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80088f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088f2:	e1a8      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f8:	e1a5      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fe:	e1a2      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008900:	58024400 	.word	0x58024400
 8008904:	03d09000 	.word	0x03d09000
 8008908:	003d0900 	.word	0x003d0900
 800890c:	007a1200 	.word	0x007a1200
 8008910:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008918:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800891c:	430b      	orrs	r3, r1
 800891e:	d173      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008920:	4b9c      	ldr	r3, [pc, #624]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008928:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800892a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008930:	d02f      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008938:	d863      	bhi.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008946:	d012      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008948:	e05b      	b.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800894a:	4b92      	ldr	r3, [pc, #584]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008956:	d107      	bne.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008958:	f107 0318 	add.w	r3, r7, #24
 800895c:	4618      	mov	r0, r3
 800895e:	f000 f991 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008966:	e16e      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896c:	e16b      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800896e:	4b89      	ldr	r3, [pc, #548]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897a:	d107      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800897c:	f107 030c 	add.w	r3, r7, #12
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fad3 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898a:	e15c      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	e159      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008992:	4b80      	ldr	r3, [pc, #512]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800899a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800899c:	4b7d      	ldr	r3, [pc, #500]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d10c      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80089a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089ae:	4b79      	ldr	r3, [pc, #484]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	08db      	lsrs	r3, r3, #3
 80089b4:	f003 0303 	and.w	r3, r3, #3
 80089b8:	4a77      	ldr	r2, [pc, #476]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80089ba:	fa22 f303 	lsr.w	r3, r2, r3
 80089be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c0:	e01e      	b.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089c2:	4b74      	ldr	r3, [pc, #464]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ce:	d106      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80089d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089d6:	d102      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089d8:	4b70      	ldr	r3, [pc, #448]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089dc:	e010      	b.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089de:	4b6d      	ldr	r3, [pc, #436]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ea:	d106      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80089ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f2:	d102      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089f4:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f8:	e002      	b.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089fe:	e122      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008a00:	e121      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a06:	e11e      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008a10:	430b      	orrs	r3, r1
 8008a12:	d133      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008a14:	4b5f      	ldr	r3, [pc, #380]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d004      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a2a:	d012      	beq.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008a2c:	e023      	b.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a2e:	4b59      	ldr	r3, [pc, #356]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a3a:	d107      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fbc7 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4a:	e0fc      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a50:	e0f9      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a52:	4b50      	ldr	r3, [pc, #320]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a60:	f107 0318 	add.w	r3, r7, #24
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f90d 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6e:	e0ea      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a74:	e0e7      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7a:	e0e4      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a80:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008a84:	430b      	orrs	r3, r1
 8008a86:	f040 808d 	bne.w	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008a8a:	4b42      	ldr	r3, [pc, #264]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008a92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a9a:	d06b      	beq.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008aa2:	d874      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aaa:	d056      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab2:	d86c      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008aba:	d03b      	beq.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008abe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ac2:	d864      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aca:	d021      	beq.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ad2:	d85c      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d004      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ae0:	d004      	beq.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008ae2:	e054      	b.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ae4:	f000 f8b8 	bl	8008c58 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ae8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008aea:	e0ac      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aec:	4b29      	ldr	r3, [pc, #164]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008af4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008af8:	d107      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008afa:	f107 0318 	add.w	r3, r7, #24
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 f8c0 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b08:	e09d      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0e:	e09a      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b10:	4b20      	ldr	r3, [pc, #128]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b1c:	d107      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b1e:	f107 030c 	add.w	r3, r7, #12
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fa02 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b2c:	e08b      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b32:	e088      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b34:	4b17      	ldr	r3, [pc, #92]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d109      	bne.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b40:	4b14      	ldr	r3, [pc, #80]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	08db      	lsrs	r3, r3, #3
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	4a13      	ldr	r2, [pc, #76]	@ (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b52:	e078      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b58:	e075      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b66:	d102      	bne.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008b68:	4b0c      	ldr	r3, [pc, #48]	@ (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b6c:	e06b      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b72:	e068      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b74:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b80:	d102      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008b82:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b86:	e05e      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b8c:	e05b      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b92:	e058      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b94:	58024400 	.word	0x58024400
 8008b98:	03d09000 	.word	0x03d09000
 8008b9c:	003d0900 	.word	0x003d0900
 8008ba0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008bac:	430b      	orrs	r3, r1
 8008bae:	d148      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008bb0:	4b27      	ldr	r3, [pc, #156]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc0:	d02a      	beq.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc8:	d838      	bhi.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bd6:	d00d      	beq.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008bd8:	e030      	b.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bda:	4b1d      	ldr	r3, [pc, #116]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008be6:	d102      	bne.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008be8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bec:	e02b      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf2:	e028      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bf4:	4b16      	ldr	r3, [pc, #88]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c00:	d107      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fae4 	bl	80091d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c10:	e019      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c16:	e016      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c18:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c24:	d107      	bne.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c26:	f107 0318 	add.w	r3, r7, #24
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f82a 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c34:	e007      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c36:	2300      	movs	r3, #0
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3a:	e004      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c40:	e001      	b.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3740      	adds	r7, #64	@ 0x40
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	58024400 	.word	0x58024400
 8008c54:	007a1200 	.word	0x007a1200

08008c58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c5c:	f7fe f816 	bl	8006c8c <HAL_RCC_GetHCLKFreq>
 8008c60:	4602      	mov	r2, r0
 8008c62:	4b06      	ldr	r3, [pc, #24]	@ (8008c7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	091b      	lsrs	r3, r3, #4
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	4904      	ldr	r1, [pc, #16]	@ (8008c80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	58024400 	.word	0x58024400
 8008c80:	0800ae8c 	.word	0x0800ae8c

08008c84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b089      	sub	sp, #36	@ 0x24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008c96:	4b9f      	ldr	r3, [pc, #636]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9a:	0b1b      	lsrs	r3, r3, #12
 8008c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ca0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca6:	091b      	lsrs	r3, r3, #4
 8008ca8:	f003 0301 	and.w	r3, r3, #1
 8008cac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008cae:	4b99      	ldr	r3, [pc, #612]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb2:	08db      	lsrs	r3, r3, #3
 8008cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8111 	beq.w	8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	f000 8083 	beq.w	8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	f200 80a1 	bhi.w	8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d056      	beq.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008cee:	e099      	b.n	8008e24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf0:	4b88      	ldr	r3, [pc, #544]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0320 	and.w	r3, r3, #32
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d02d      	beq.n	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cfc:	4b85      	ldr	r3, [pc, #532]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	08db      	lsrs	r3, r3, #3
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	4a84      	ldr	r2, [pc, #528]	@ (8008f18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	ee07 3a90 	vmov	s15, r3
 8008d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	4b7b      	ldr	r3, [pc, #492]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008d56:	e087      	b.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008f20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9a:	e065      	b.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b59      	ldr	r3, [pc, #356]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dde:	e043      	b.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df2:	4b48      	ldr	r3, [pc, #288]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e22:	e021      	b.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008f24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e36:	4b37      	ldr	r3, [pc, #220]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008f1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008e68:	4b2a      	ldr	r3, [pc, #168]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	0a5b      	lsrs	r3, r3, #9
 8008e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e8e:	ee17 2a90 	vmov	r2, s15
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008e96:	4b1f      	ldr	r3, [pc, #124]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	0c1b      	lsrs	r3, r3, #16
 8008e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ebc:	ee17 2a90 	vmov	r2, s15
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ec4:	4b13      	ldr	r3, [pc, #76]	@ (8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec8:	0e1b      	lsrs	r3, r3, #24
 8008eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ede:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008eea:	ee17 2a90 	vmov	r2, s15
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008ef2:	e008      	b.n	8008f06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	609a      	str	r2, [r3, #8]
}
 8008f06:	bf00      	nop
 8008f08:	3724      	adds	r7, #36	@ 0x24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	58024400 	.word	0x58024400
 8008f18:	03d09000 	.word	0x03d09000
 8008f1c:	46000000 	.word	0x46000000
 8008f20:	4c742400 	.word	0x4c742400
 8008f24:	4a742400 	.word	0x4a742400
 8008f28:	4af42400 	.word	0x4af42400

08008f2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b089      	sub	sp, #36	@ 0x24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f34:	4ba1      	ldr	r3, [pc, #644]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008f3e:	4b9f      	ldr	r3, [pc, #636]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f42:	0d1b      	lsrs	r3, r3, #20
 8008f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4e:	0a1b      	lsrs	r3, r3, #8
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008f56:	4b99      	ldr	r3, [pc, #612]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f5a:	08db      	lsrs	r3, r3, #3
 8008f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	fb02 f303 	mul.w	r3, r2, r3
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8111 	beq.w	800919c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	f000 8083 	beq.w	8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	f200 80a1 	bhi.w	80090cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d056      	beq.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f96:	e099      	b.n	80090cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f98:	4b88      	ldr	r3, [pc, #544]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0320 	and.w	r3, r3, #32
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d02d      	beq.n	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa4:	4b85      	ldr	r3, [pc, #532]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	08db      	lsrs	r3, r3, #3
 8008faa:	f003 0303 	and.w	r3, r3, #3
 8008fae:	4a84      	ldr	r2, [pc, #528]	@ (80091c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fce:	4b7b      	ldr	r3, [pc, #492]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ffe:	e087      	b.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80091c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800900e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009012:	4b6a      	ldr	r3, [pc, #424]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009022:	ed97 6a03 	vldr	s12, [r7, #12]
 8009026:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800902a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009042:	e065      	b.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009056:	4b59      	ldr	r3, [pc, #356]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009066:	ed97 6a03 	vldr	s12, [r7, #12]
 800906a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800906e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800907a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009086:	e043      	b.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80091d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800909a:	4b48      	ldr	r3, [pc, #288]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090ca:	e021      	b.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80091cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090de:	4b37      	ldr	r3, [pc, #220]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80090f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80091c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009110:	4b2a      	ldr	r3, [pc, #168]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009114:	0a5b      	lsrs	r3, r3, #9
 8009116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800912a:	edd7 6a07 	vldr	s13, [r7, #28]
 800912e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009136:	ee17 2a90 	vmov	r2, s15
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800913e:	4b1f      	ldr	r3, [pc, #124]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009142:	0c1b      	lsrs	r3, r3, #16
 8009144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009158:	edd7 6a07 	vldr	s13, [r7, #28]
 800915c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009164:	ee17 2a90 	vmov	r2, s15
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800916c:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	0e1b      	lsrs	r3, r3, #24
 8009172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009186:	edd7 6a07 	vldr	s13, [r7, #28]
 800918a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800918e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009192:	ee17 2a90 	vmov	r2, s15
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800919a:	e008      	b.n	80091ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	609a      	str	r2, [r3, #8]
}
 80091ae:	bf00      	nop
 80091b0:	3724      	adds	r7, #36	@ 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	58024400 	.word	0x58024400
 80091c0:	03d09000 	.word	0x03d09000
 80091c4:	46000000 	.word	0x46000000
 80091c8:	4c742400 	.word	0x4c742400
 80091cc:	4a742400 	.word	0x4a742400
 80091d0:	4af42400 	.word	0x4af42400

080091d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b089      	sub	sp, #36	@ 0x24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091dc:	4ba0      	ldr	r3, [pc, #640]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80091e6:	4b9e      	ldr	r3, [pc, #632]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	091b      	lsrs	r3, r3, #4
 80091ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80091f2:	4b9b      	ldr	r3, [pc, #620]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091fc:	4b98      	ldr	r3, [pc, #608]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009200:	08db      	lsrs	r3, r3, #3
 8009202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	fb02 f303 	mul.w	r3, r2, r3
 800920c:	ee07 3a90 	vmov	s15, r3
 8009210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009214:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 8111 	beq.w	8009442 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b02      	cmp	r3, #2
 8009224:	f000 8083 	beq.w	800932e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	2b02      	cmp	r3, #2
 800922c:	f200 80a1 	bhi.w	8009372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d056      	beq.n	80092ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800923c:	e099      	b.n	8009372 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800923e:	4b88      	ldr	r3, [pc, #544]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d02d      	beq.n	80092a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800924a:	4b85      	ldr	r3, [pc, #532]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	08db      	lsrs	r3, r3, #3
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	4a83      	ldr	r2, [pc, #524]	@ (8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009256:	fa22 f303 	lsr.w	r3, r2, r3
 800925a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009274:	4b7a      	ldr	r3, [pc, #488]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927c:	ee07 3a90 	vmov	s15, r3
 8009280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009284:	ed97 6a03 	vldr	s12, [r7, #12]
 8009288:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800928c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80092a4:	e087      	b.n	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	ee07 3a90 	vmov	s15, r3
 80092ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b8:	4b69      	ldr	r3, [pc, #420]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80092cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092e8:	e065      	b.n	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009470 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80092f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fc:	4b58      	ldr	r3, [pc, #352]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009310:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009328:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800932c:	e043      	b.n	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	ee07 3a90 	vmov	s15, r3
 8009334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009338:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009474 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800933c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009340:	4b47      	ldr	r3, [pc, #284]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009348:	ee07 3a90 	vmov	s15, r3
 800934c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009350:	ed97 6a03 	vldr	s12, [r7, #12]
 8009354:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009358:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009370:	e021      	b.n	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	ee07 3a90 	vmov	s15, r3
 8009378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800946c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009384:	4b36      	ldr	r3, [pc, #216]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009394:	ed97 6a03 	vldr	s12, [r7, #12]
 8009398:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800939c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80093b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ba:	0a5b      	lsrs	r3, r3, #9
 80093bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093dc:	ee17 2a90 	vmov	r2, s15
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80093e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e8:	0c1b      	lsrs	r3, r3, #16
 80093ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800940a:	ee17 2a90 	vmov	r2, s15
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009412:	4b13      	ldr	r3, [pc, #76]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009416:	0e1b      	lsrs	r3, r3, #24
 8009418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009424:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009428:	ee37 7a87 	vadd.f32	s14, s15, s14
 800942c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009438:	ee17 2a90 	vmov	r2, s15
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009440:	e008      	b.n	8009454 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	609a      	str	r2, [r3, #8]
}
 8009454:	bf00      	nop
 8009456:	3724      	adds	r7, #36	@ 0x24
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	58024400 	.word	0x58024400
 8009464:	03d09000 	.word	0x03d09000
 8009468:	46000000 	.word	0x46000000
 800946c:	4c742400 	.word	0x4c742400
 8009470:	4a742400 	.word	0x4a742400
 8009474:	4af42400 	.word	0x4af42400

08009478 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009486:	4b53      	ldr	r3, [pc, #332]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b03      	cmp	r3, #3
 8009490:	d101      	bne.n	8009496 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e099      	b.n	80095ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009496:	4b4f      	ldr	r3, [pc, #316]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a4e      	ldr	r2, [pc, #312]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800949c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094a2:	f7f8 f921 	bl	80016e8 <HAL_GetTick>
 80094a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094a8:	e008      	b.n	80094bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094aa:	f7f8 f91d 	bl	80016e8 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e086      	b.n	80095ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094bc:	4b45      	ldr	r3, [pc, #276]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1f0      	bne.n	80094aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80094c8:	4b42      	ldr	r3, [pc, #264]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 80094ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	031b      	lsls	r3, r3, #12
 80094d6:	493f      	ldr	r1, [pc, #252]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	628b      	str	r3, [r1, #40]	@ 0x28
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	025b      	lsls	r3, r3, #9
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	431a      	orrs	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	3b01      	subs	r3, #1
 8009506:	061b      	lsls	r3, r3, #24
 8009508:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800950c:	4931      	ldr	r1, [pc, #196]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800950e:	4313      	orrs	r3, r2
 8009510:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009512:	4b30      	ldr	r3, [pc, #192]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009516:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	492d      	ldr	r1, [pc, #180]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009520:	4313      	orrs	r3, r2
 8009522:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009524:	4b2b      	ldr	r3, [pc, #172]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	f023 0220 	bic.w	r2, r3, #32
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	4928      	ldr	r1, [pc, #160]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009532:	4313      	orrs	r3, r2
 8009534:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009536:	4b27      	ldr	r3, [pc, #156]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953a:	4a26      	ldr	r2, [pc, #152]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800953c:	f023 0310 	bic.w	r3, r3, #16
 8009540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009542:	4b24      	ldr	r3, [pc, #144]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009546:	4b24      	ldr	r3, [pc, #144]	@ (80095d8 <RCCEx_PLL2_Config+0x160>)
 8009548:	4013      	ands	r3, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	69d2      	ldr	r2, [r2, #28]
 800954e:	00d2      	lsls	r2, r2, #3
 8009550:	4920      	ldr	r1, [pc, #128]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009552:	4313      	orrs	r3, r2
 8009554:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009556:	4b1f      	ldr	r3, [pc, #124]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955a:	4a1e      	ldr	r2, [pc, #120]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800955c:	f043 0310 	orr.w	r3, r3, #16
 8009560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009568:	4b1a      	ldr	r3, [pc, #104]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800956a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956c:	4a19      	ldr	r2, [pc, #100]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800956e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009574:	e00f      	b.n	8009596 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d106      	bne.n	800958a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800957c:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	4a14      	ldr	r2, [pc, #80]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009582:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009586:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009588:	e005      	b.n	8009596 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800958a:	4b12      	ldr	r3, [pc, #72]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800958c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958e:	4a11      	ldr	r2, [pc, #68]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009594:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009596:	4b0f      	ldr	r3, [pc, #60]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a0e      	ldr	r2, [pc, #56]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 800959c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80095a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095a2:	f7f8 f8a1 	bl	80016e8 <HAL_GetTick>
 80095a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095a8:	e008      	b.n	80095bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095aa:	f7f8 f89d 	bl	80016e8 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d901      	bls.n	80095bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e006      	b.n	80095ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <RCCEx_PLL2_Config+0x15c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0f0      	beq.n	80095aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	58024400 	.word	0x58024400
 80095d8:	ffff0007 	.word	0xffff0007

080095dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095ea:	4b53      	ldr	r3, [pc, #332]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d101      	bne.n	80095fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e099      	b.n	800972e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80095fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a4e      	ldr	r2, [pc, #312]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009606:	f7f8 f86f 	bl	80016e8 <HAL_GetTick>
 800960a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800960c:	e008      	b.n	8009620 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800960e:	f7f8 f86b 	bl	80016e8 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d901      	bls.n	8009620 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e086      	b.n	800972e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009620:	4b45      	ldr	r3, [pc, #276]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1f0      	bne.n	800960e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800962c:	4b42      	ldr	r3, [pc, #264]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 800962e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009630:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	051b      	lsls	r3, r3, #20
 800963a:	493f      	ldr	r1, [pc, #252]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 800963c:	4313      	orrs	r3, r2
 800963e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	3b01      	subs	r3, #1
 8009646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	3b01      	subs	r3, #1
 8009650:	025b      	lsls	r3, r3, #9
 8009652:	b29b      	uxth	r3, r3
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	3b01      	subs	r3, #1
 800965c:	041b      	lsls	r3, r3, #16
 800965e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	3b01      	subs	r3, #1
 800966a:	061b      	lsls	r3, r3, #24
 800966c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009670:	4931      	ldr	r1, [pc, #196]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009672:	4313      	orrs	r3, r2
 8009674:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009676:	4b30      	ldr	r3, [pc, #192]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	492d      	ldr	r1, [pc, #180]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009684:	4313      	orrs	r3, r2
 8009686:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009688:	4b2b      	ldr	r3, [pc, #172]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 800968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	4928      	ldr	r1, [pc, #160]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009696:	4313      	orrs	r3, r2
 8009698:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800969a:	4b27      	ldr	r3, [pc, #156]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 800969c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969e:	4a26      	ldr	r2, [pc, #152]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096a6:	4b24      	ldr	r3, [pc, #144]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096aa:	4b24      	ldr	r3, [pc, #144]	@ (800973c <RCCEx_PLL3_Config+0x160>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	69d2      	ldr	r2, [r2, #28]
 80096b2:	00d2      	lsls	r2, r2, #3
 80096b4:	4920      	ldr	r1, [pc, #128]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80096ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096be:	4a1e      	ldr	r2, [pc, #120]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d106      	bne.n	80096da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80096cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	4a19      	ldr	r2, [pc, #100]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80096d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096d8:	e00f      	b.n	80096fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d106      	bne.n	80096ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80096e0:	4b15      	ldr	r3, [pc, #84]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	4a14      	ldr	r2, [pc, #80]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80096ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096ec:	e005      	b.n	80096fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80096ee:	4b12      	ldr	r3, [pc, #72]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f2:	4a11      	ldr	r2, [pc, #68]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80096fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009706:	f7f7 ffef 	bl	80016e8 <HAL_GetTick>
 800970a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800970c:	e008      	b.n	8009720 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800970e:	f7f7 ffeb 	bl	80016e8 <HAL_GetTick>
 8009712:	4602      	mov	r2, r0
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	d901      	bls.n	8009720 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e006      	b.n	800972e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009720:	4b05      	ldr	r3, [pc, #20]	@ (8009738 <RCCEx_PLL3_Config+0x15c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0f0      	beq.n	800970e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	58024400 	.word	0x58024400
 800973c:	ffff0007 	.word	0xffff0007

08009740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e049      	b.n	80097e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d106      	bne.n	800976c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7f7 fc1e 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3304      	adds	r3, #4
 800977c:	4619      	mov	r1, r3
 800977e:	4610      	mov	r0, r2
 8009780:	f000 f99e 	bl	8009ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b01      	cmp	r3, #1
 8009802:	d001      	beq.n	8009808 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e04c      	b.n	80098a2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a26      	ldr	r2, [pc, #152]	@ (80098b0 <HAL_TIM_Base_Start+0xc0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d022      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009822:	d01d      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a22      	ldr	r2, [pc, #136]	@ (80098b4 <HAL_TIM_Base_Start+0xc4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d018      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a21      	ldr	r2, [pc, #132]	@ (80098b8 <HAL_TIM_Base_Start+0xc8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d013      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a1f      	ldr	r2, [pc, #124]	@ (80098bc <HAL_TIM_Base_Start+0xcc>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00e      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a1e      	ldr	r2, [pc, #120]	@ (80098c0 <HAL_TIM_Base_Start+0xd0>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d009      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1c      	ldr	r2, [pc, #112]	@ (80098c4 <HAL_TIM_Base_Start+0xd4>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIM_Base_Start+0x70>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1b      	ldr	r2, [pc, #108]	@ (80098c8 <HAL_TIM_Base_Start+0xd8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d115      	bne.n	800988c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	4b19      	ldr	r3, [pc, #100]	@ (80098cc <HAL_TIM_Base_Start+0xdc>)
 8009868:	4013      	ands	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b06      	cmp	r3, #6
 8009870:	d015      	beq.n	800989e <HAL_TIM_Base_Start+0xae>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009878:	d011      	beq.n	800989e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	e008      	b.n	800989e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	e000      	b.n	80098a0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40000400 	.word	0x40000400
 80098b8:	40000800 	.word	0x40000800
 80098bc:	40000c00 	.word	0x40000c00
 80098c0:	40010400 	.word	0x40010400
 80098c4:	40001800 	.word	0x40001800
 80098c8:	40014000 	.word	0x40014000
 80098cc:	00010007 	.word	0x00010007

080098d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_TIM_ConfigClockSource+0x1c>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e0dc      	b.n	8009aa6 <HAL_TIM_ConfigClockSource+0x1d6>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	4b6a      	ldr	r3, [pc, #424]	@ (8009ab0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009908:	4013      	ands	r3, r2
 800990a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a64      	ldr	r2, [pc, #400]	@ (8009ab4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009922:	4293      	cmp	r3, r2
 8009924:	f000 80a9 	beq.w	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8009928:	4a62      	ldr	r2, [pc, #392]	@ (8009ab4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800992a:	4293      	cmp	r3, r2
 800992c:	f200 80ae 	bhi.w	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009930:	4a61      	ldr	r2, [pc, #388]	@ (8009ab8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009932:	4293      	cmp	r3, r2
 8009934:	f000 80a1 	beq.w	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8009938:	4a5f      	ldr	r2, [pc, #380]	@ (8009ab8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800993a:	4293      	cmp	r3, r2
 800993c:	f200 80a6 	bhi.w	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009940:	4a5e      	ldr	r2, [pc, #376]	@ (8009abc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009942:	4293      	cmp	r3, r2
 8009944:	f000 8099 	beq.w	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8009948:	4a5c      	ldr	r2, [pc, #368]	@ (8009abc <HAL_TIM_ConfigClockSource+0x1ec>)
 800994a:	4293      	cmp	r3, r2
 800994c:	f200 809e 	bhi.w	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009950:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009954:	f000 8091 	beq.w	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8009958:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800995c:	f200 8096 	bhi.w	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009964:	f000 8089 	beq.w	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 8009968:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800996c:	f200 808e 	bhi.w	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009974:	d03e      	beq.n	80099f4 <HAL_TIM_ConfigClockSource+0x124>
 8009976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800997a:	f200 8087 	bhi.w	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 800997e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009982:	f000 8086 	beq.w	8009a92 <HAL_TIM_ConfigClockSource+0x1c2>
 8009986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800998a:	d87f      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 800998c:	2b70      	cmp	r3, #112	@ 0x70
 800998e:	d01a      	beq.n	80099c6 <HAL_TIM_ConfigClockSource+0xf6>
 8009990:	2b70      	cmp	r3, #112	@ 0x70
 8009992:	d87b      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 8009994:	2b60      	cmp	r3, #96	@ 0x60
 8009996:	d050      	beq.n	8009a3a <HAL_TIM_ConfigClockSource+0x16a>
 8009998:	2b60      	cmp	r3, #96	@ 0x60
 800999a:	d877      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 800999c:	2b50      	cmp	r3, #80	@ 0x50
 800999e:	d03c      	beq.n	8009a1a <HAL_TIM_ConfigClockSource+0x14a>
 80099a0:	2b50      	cmp	r3, #80	@ 0x50
 80099a2:	d873      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80099a4:	2b40      	cmp	r3, #64	@ 0x40
 80099a6:	d058      	beq.n	8009a5a <HAL_TIM_ConfigClockSource+0x18a>
 80099a8:	2b40      	cmp	r3, #64	@ 0x40
 80099aa:	d86f      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80099ac:	2b30      	cmp	r3, #48	@ 0x30
 80099ae:	d064      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80099b0:	2b30      	cmp	r3, #48	@ 0x30
 80099b2:	d86b      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d060      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d867      	bhi.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d05c      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d05a      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0x1aa>
 80099c4:	e062      	b.n	8009a8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099d6:	f000 f991 	bl	8009cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80099e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	609a      	str	r2, [r3, #8]
      break;
 80099f2:	e04f      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a04:	f000 f97a 	bl	8009cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a16:	609a      	str	r2, [r3, #8]
      break;
 8009a18:	e03c      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a26:	461a      	mov	r2, r3
 8009a28:	f000 f8ea 	bl	8009c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2150      	movs	r1, #80	@ 0x50
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f944 	bl	8009cc0 <TIM_ITRx_SetConfig>
      break;
 8009a38:	e02c      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a46:	461a      	mov	r2, r3
 8009a48:	f000 f909 	bl	8009c5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2160      	movs	r1, #96	@ 0x60
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 f934 	bl	8009cc0 <TIM_ITRx_SetConfig>
      break;
 8009a58:	e01c      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a66:	461a      	mov	r2, r3
 8009a68:	f000 f8ca 	bl	8009c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2140      	movs	r1, #64	@ 0x40
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f924 	bl	8009cc0 <TIM_ITRx_SetConfig>
      break;
 8009a78:	e00c      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f000 f91b 	bl	8009cc0 <TIM_ITRx_SetConfig>
      break;
 8009a8a:	e003      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a90:	e000      	b.n	8009a94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	ffceff88 	.word	0xffceff88
 8009ab4:	00100040 	.word	0x00100040
 8009ab8:	00100030 	.word	0x00100030
 8009abc:	00100020 	.word	0x00100020

08009ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a43      	ldr	r2, [pc, #268]	@ (8009be0 <TIM_Base_SetConfig+0x120>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d013      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ade:	d00f      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a40      	ldr	r2, [pc, #256]	@ (8009be4 <TIM_Base_SetConfig+0x124>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00b      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a3f      	ldr	r2, [pc, #252]	@ (8009be8 <TIM_Base_SetConfig+0x128>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d007      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a3e      	ldr	r2, [pc, #248]	@ (8009bec <TIM_Base_SetConfig+0x12c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_Base_SetConfig+0x40>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a3d      	ldr	r2, [pc, #244]	@ (8009bf0 <TIM_Base_SetConfig+0x130>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d108      	bne.n	8009b12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a32      	ldr	r2, [pc, #200]	@ (8009be0 <TIM_Base_SetConfig+0x120>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d01f      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b20:	d01b      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a2f      	ldr	r2, [pc, #188]	@ (8009be4 <TIM_Base_SetConfig+0x124>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d017      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8009be8 <TIM_Base_SetConfig+0x128>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d013      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a2d      	ldr	r2, [pc, #180]	@ (8009bec <TIM_Base_SetConfig+0x12c>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d00f      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8009bf0 <TIM_Base_SetConfig+0x130>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d00b      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a2b      	ldr	r2, [pc, #172]	@ (8009bf4 <TIM_Base_SetConfig+0x134>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d007      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009bf8 <TIM_Base_SetConfig+0x138>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d003      	beq.n	8009b5a <TIM_Base_SetConfig+0x9a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a29      	ldr	r2, [pc, #164]	@ (8009bfc <TIM_Base_SetConfig+0x13c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d108      	bne.n	8009b6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a14      	ldr	r2, [pc, #80]	@ (8009be0 <TIM_Base_SetConfig+0x120>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00f      	beq.n	8009bb2 <TIM_Base_SetConfig+0xf2>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a16      	ldr	r2, [pc, #88]	@ (8009bf0 <TIM_Base_SetConfig+0x130>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00b      	beq.n	8009bb2 <TIM_Base_SetConfig+0xf2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a15      	ldr	r2, [pc, #84]	@ (8009bf4 <TIM_Base_SetConfig+0x134>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d007      	beq.n	8009bb2 <TIM_Base_SetConfig+0xf2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a14      	ldr	r2, [pc, #80]	@ (8009bf8 <TIM_Base_SetConfig+0x138>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d003      	beq.n	8009bb2 <TIM_Base_SetConfig+0xf2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a13      	ldr	r2, [pc, #76]	@ (8009bfc <TIM_Base_SetConfig+0x13c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d103      	bne.n	8009bba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f043 0204 	orr.w	r2, r3, #4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	601a      	str	r2, [r3, #0]
}
 8009bd2:	bf00      	nop
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40000400 	.word	0x40000400
 8009be8:	40000800 	.word	0x40000800
 8009bec:	40000c00 	.word	0x40000c00
 8009bf0:	40010400 	.word	0x40010400
 8009bf4:	40014000 	.word	0x40014000
 8009bf8:	40014400 	.word	0x40014400
 8009bfc:	40014800 	.word	0x40014800

08009c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	f023 0201 	bic.w	r2, r3, #1
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f023 030a 	bic.w	r3, r3, #10
 8009c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b087      	sub	sp, #28
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	f023 0210 	bic.w	r2, r3, #16
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	031b      	lsls	r3, r3, #12
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	011b      	lsls	r3, r3, #4
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
	...

08009cc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	4b09      	ldr	r3, [pc, #36]	@ (8009cf8 <TIM_ITRx_SetConfig+0x38>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f043 0307 	orr.w	r3, r3, #7
 8009ce2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	609a      	str	r2, [r3, #8]
}
 8009cea:	bf00      	nop
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	ffcfff8f 	.word	0xffcfff8f

08009cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	021a      	lsls	r2, r3, #8
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	609a      	str	r2, [r3, #8]
}
 8009d30:	bf00      	nop
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e06d      	b.n	8009e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a30      	ldr	r2, [pc, #192]	@ (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a2f      	ldr	r2, [pc, #188]	@ (8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d108      	bne.n	8009d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009d8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a20      	ldr	r2, [pc, #128]	@ (8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d022      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dc6:	d01d      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d018      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00e      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a15      	ldr	r2, [pc, #84]	@ (8009e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d009      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a16      	ldr	r2, [pc, #88]	@ (8009e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d004      	beq.n	8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a15      	ldr	r2, [pc, #84]	@ (8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10c      	bne.n	8009e1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	40010000 	.word	0x40010000
 8009e40:	40010400 	.word	0x40010400
 8009e44:	40000400 	.word	0x40000400
 8009e48:	40000800 	.word	0x40000800
 8009e4c:	40000c00 	.word	0x40000c00
 8009e50:	40001800 	.word	0x40001800
 8009e54:	40014000 	.word	0x40014000

08009e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e042      	b.n	8009ef0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f83b 	bl	8009ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2224      	movs	r2, #36	@ 0x24
 8009e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0201 	bic.w	r2, r2, #1
 8009e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d002      	beq.n	8009ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fd9a 	bl	800a9dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f82f 	bl	8009f0c <UART_SetConfig>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e01b      	b.n	8009ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f042 0201 	orr.w	r2, r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fe19 	bl	800ab20 <UART_CheckIdleState>
 8009eee:	4603      	mov	r3, r0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f10:	b092      	sub	sp, #72	@ 0x48
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	431a      	orrs	r2, r3
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	4bbe      	ldr	r3, [pc, #760]	@ (800a234 <UART_SetConfig+0x328>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	6812      	ldr	r2, [r2, #0]
 8009f42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f44:	430b      	orrs	r3, r1
 8009f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	68da      	ldr	r2, [r3, #12]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4ab3      	ldr	r2, [pc, #716]	@ (800a238 <UART_SetConfig+0x32c>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d004      	beq.n	8009f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f74:	4313      	orrs	r3, r2
 8009f76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	4baf      	ldr	r3, [pc, #700]	@ (800a23c <UART_SetConfig+0x330>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f92:	f023 010f 	bic.w	r1, r3, #15
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4aa6      	ldr	r2, [pc, #664]	@ (800a240 <UART_SetConfig+0x334>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d177      	bne.n	800a09c <UART_SetConfig+0x190>
 8009fac:	4ba5      	ldr	r3, [pc, #660]	@ (800a244 <UART_SetConfig+0x338>)
 8009fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fb4:	2b28      	cmp	r3, #40	@ 0x28
 8009fb6:	d86d      	bhi.n	800a094 <UART_SetConfig+0x188>
 8009fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <UART_SetConfig+0xb4>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	0800a065 	.word	0x0800a065
 8009fc4:	0800a095 	.word	0x0800a095
 8009fc8:	0800a095 	.word	0x0800a095
 8009fcc:	0800a095 	.word	0x0800a095
 8009fd0:	0800a095 	.word	0x0800a095
 8009fd4:	0800a095 	.word	0x0800a095
 8009fd8:	0800a095 	.word	0x0800a095
 8009fdc:	0800a095 	.word	0x0800a095
 8009fe0:	0800a06d 	.word	0x0800a06d
 8009fe4:	0800a095 	.word	0x0800a095
 8009fe8:	0800a095 	.word	0x0800a095
 8009fec:	0800a095 	.word	0x0800a095
 8009ff0:	0800a095 	.word	0x0800a095
 8009ff4:	0800a095 	.word	0x0800a095
 8009ff8:	0800a095 	.word	0x0800a095
 8009ffc:	0800a095 	.word	0x0800a095
 800a000:	0800a075 	.word	0x0800a075
 800a004:	0800a095 	.word	0x0800a095
 800a008:	0800a095 	.word	0x0800a095
 800a00c:	0800a095 	.word	0x0800a095
 800a010:	0800a095 	.word	0x0800a095
 800a014:	0800a095 	.word	0x0800a095
 800a018:	0800a095 	.word	0x0800a095
 800a01c:	0800a095 	.word	0x0800a095
 800a020:	0800a07d 	.word	0x0800a07d
 800a024:	0800a095 	.word	0x0800a095
 800a028:	0800a095 	.word	0x0800a095
 800a02c:	0800a095 	.word	0x0800a095
 800a030:	0800a095 	.word	0x0800a095
 800a034:	0800a095 	.word	0x0800a095
 800a038:	0800a095 	.word	0x0800a095
 800a03c:	0800a095 	.word	0x0800a095
 800a040:	0800a085 	.word	0x0800a085
 800a044:	0800a095 	.word	0x0800a095
 800a048:	0800a095 	.word	0x0800a095
 800a04c:	0800a095 	.word	0x0800a095
 800a050:	0800a095 	.word	0x0800a095
 800a054:	0800a095 	.word	0x0800a095
 800a058:	0800a095 	.word	0x0800a095
 800a05c:	0800a095 	.word	0x0800a095
 800a060:	0800a08d 	.word	0x0800a08d
 800a064:	2301      	movs	r3, #1
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e222      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a06c:	2304      	movs	r3, #4
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e21e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a074:	2308      	movs	r3, #8
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07a:	e21a      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a07c:	2310      	movs	r3, #16
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a082:	e216      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a084:	2320      	movs	r3, #32
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a08a:	e212      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a08c:	2340      	movs	r3, #64	@ 0x40
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a092:	e20e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a094:	2380      	movs	r3, #128	@ 0x80
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a09a:	e20a      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a69      	ldr	r2, [pc, #420]	@ (800a248 <UART_SetConfig+0x33c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d130      	bne.n	800a108 <UART_SetConfig+0x1fc>
 800a0a6:	4b67      	ldr	r3, [pc, #412]	@ (800a244 <UART_SetConfig+0x338>)
 800a0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0aa:	f003 0307 	and.w	r3, r3, #7
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	d826      	bhi.n	800a100 <UART_SetConfig+0x1f4>
 800a0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b8 <UART_SetConfig+0x1ac>)
 800a0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b8:	0800a0d1 	.word	0x0800a0d1
 800a0bc:	0800a0d9 	.word	0x0800a0d9
 800a0c0:	0800a0e1 	.word	0x0800a0e1
 800a0c4:	0800a0e9 	.word	0x0800a0e9
 800a0c8:	0800a0f1 	.word	0x0800a0f1
 800a0cc:	0800a0f9 	.word	0x0800a0f9
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d6:	e1ec      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a0d8:	2304      	movs	r3, #4
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0de:	e1e8      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e6:	e1e4      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a0e8:	2310      	movs	r3, #16
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ee:	e1e0      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f6:	e1dc      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a0f8:	2340      	movs	r3, #64	@ 0x40
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fe:	e1d8      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a100:	2380      	movs	r3, #128	@ 0x80
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a106:	e1d4      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a4f      	ldr	r2, [pc, #316]	@ (800a24c <UART_SetConfig+0x340>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d130      	bne.n	800a174 <UART_SetConfig+0x268>
 800a112:	4b4c      	ldr	r3, [pc, #304]	@ (800a244 <UART_SetConfig+0x338>)
 800a114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d826      	bhi.n	800a16c <UART_SetConfig+0x260>
 800a11e:	a201      	add	r2, pc, #4	@ (adr r2, 800a124 <UART_SetConfig+0x218>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a145 	.word	0x0800a145
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a15d 	.word	0x0800a15d
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a142:	e1b6      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a144:	2304      	movs	r3, #4
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e1b2      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a14c:	2308      	movs	r3, #8
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e1ae      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a154:	2310      	movs	r3, #16
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e1aa      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a15c:	2320      	movs	r3, #32
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e1a6      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a164:	2340      	movs	r3, #64	@ 0x40
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e1a2      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a16c:	2380      	movs	r3, #128	@ 0x80
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e19e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a35      	ldr	r2, [pc, #212]	@ (800a250 <UART_SetConfig+0x344>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d130      	bne.n	800a1e0 <UART_SetConfig+0x2d4>
 800a17e:	4b31      	ldr	r3, [pc, #196]	@ (800a244 <UART_SetConfig+0x338>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b05      	cmp	r3, #5
 800a188:	d826      	bhi.n	800a1d8 <UART_SetConfig+0x2cc>
 800a18a:	a201      	add	r2, pc, #4	@ (adr r2, 800a190 <UART_SetConfig+0x284>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ae:	e180      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b6:	e17c      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e178      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e174      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e170      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1d0:	2340      	movs	r3, #64	@ 0x40
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e16c      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1d8:	2380      	movs	r3, #128	@ 0x80
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e168      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a254 <UART_SetConfig+0x348>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d142      	bne.n	800a270 <UART_SetConfig+0x364>
 800a1ea:	4b16      	ldr	r3, [pc, #88]	@ (800a244 <UART_SetConfig+0x338>)
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b05      	cmp	r3, #5
 800a1f4:	d838      	bhi.n	800a268 <UART_SetConfig+0x35c>
 800a1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1fc <UART_SetConfig+0x2f0>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a215 	.word	0x0800a215
 800a200:	0800a21d 	.word	0x0800a21d
 800a204:	0800a225 	.word	0x0800a225
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a259 	.word	0x0800a259
 800a210:	0800a261 	.word	0x0800a261
 800a214:	2300      	movs	r3, #0
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21a:	e14a      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a21c:	2304      	movs	r3, #4
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e146      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a224:	2308      	movs	r3, #8
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e142      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a22c:	2310      	movs	r3, #16
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e13e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a234:	cfff69f3 	.word	0xcfff69f3
 800a238:	58000c00 	.word	0x58000c00
 800a23c:	11fff4ff 	.word	0x11fff4ff
 800a240:	40011000 	.word	0x40011000
 800a244:	58024400 	.word	0x58024400
 800a248:	40004400 	.word	0x40004400
 800a24c:	40004800 	.word	0x40004800
 800a250:	40004c00 	.word	0x40004c00
 800a254:	40005000 	.word	0x40005000
 800a258:	2320      	movs	r3, #32
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25e:	e128      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a260:	2340      	movs	r3, #64	@ 0x40
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a266:	e124      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a268:	2380      	movs	r3, #128	@ 0x80
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26e:	e120      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4acb      	ldr	r2, [pc, #812]	@ (800a5a4 <UART_SetConfig+0x698>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d176      	bne.n	800a368 <UART_SetConfig+0x45c>
 800a27a:	4bcb      	ldr	r3, [pc, #812]	@ (800a5a8 <UART_SetConfig+0x69c>)
 800a27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a27e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a282:	2b28      	cmp	r3, #40	@ 0x28
 800a284:	d86c      	bhi.n	800a360 <UART_SetConfig+0x454>
 800a286:	a201      	add	r2, pc, #4	@ (adr r2, 800a28c <UART_SetConfig+0x380>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a331 	.word	0x0800a331
 800a290:	0800a361 	.word	0x0800a361
 800a294:	0800a361 	.word	0x0800a361
 800a298:	0800a361 	.word	0x0800a361
 800a29c:	0800a361 	.word	0x0800a361
 800a2a0:	0800a361 	.word	0x0800a361
 800a2a4:	0800a361 	.word	0x0800a361
 800a2a8:	0800a361 	.word	0x0800a361
 800a2ac:	0800a339 	.word	0x0800a339
 800a2b0:	0800a361 	.word	0x0800a361
 800a2b4:	0800a361 	.word	0x0800a361
 800a2b8:	0800a361 	.word	0x0800a361
 800a2bc:	0800a361 	.word	0x0800a361
 800a2c0:	0800a361 	.word	0x0800a361
 800a2c4:	0800a361 	.word	0x0800a361
 800a2c8:	0800a361 	.word	0x0800a361
 800a2cc:	0800a341 	.word	0x0800a341
 800a2d0:	0800a361 	.word	0x0800a361
 800a2d4:	0800a361 	.word	0x0800a361
 800a2d8:	0800a361 	.word	0x0800a361
 800a2dc:	0800a361 	.word	0x0800a361
 800a2e0:	0800a361 	.word	0x0800a361
 800a2e4:	0800a361 	.word	0x0800a361
 800a2e8:	0800a361 	.word	0x0800a361
 800a2ec:	0800a349 	.word	0x0800a349
 800a2f0:	0800a361 	.word	0x0800a361
 800a2f4:	0800a361 	.word	0x0800a361
 800a2f8:	0800a361 	.word	0x0800a361
 800a2fc:	0800a361 	.word	0x0800a361
 800a300:	0800a361 	.word	0x0800a361
 800a304:	0800a361 	.word	0x0800a361
 800a308:	0800a361 	.word	0x0800a361
 800a30c:	0800a351 	.word	0x0800a351
 800a310:	0800a361 	.word	0x0800a361
 800a314:	0800a361 	.word	0x0800a361
 800a318:	0800a361 	.word	0x0800a361
 800a31c:	0800a361 	.word	0x0800a361
 800a320:	0800a361 	.word	0x0800a361
 800a324:	0800a361 	.word	0x0800a361
 800a328:	0800a361 	.word	0x0800a361
 800a32c:	0800a359 	.word	0x0800a359
 800a330:	2301      	movs	r3, #1
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e0bc      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a338:	2304      	movs	r3, #4
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e0b8      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a340:	2308      	movs	r3, #8
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e0b4      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a348:	2310      	movs	r3, #16
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34e:	e0b0      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a350:	2320      	movs	r3, #32
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a356:	e0ac      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a358:	2340      	movs	r3, #64	@ 0x40
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35e:	e0a8      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a360:	2380      	movs	r3, #128	@ 0x80
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a366:	e0a4      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a8f      	ldr	r2, [pc, #572]	@ (800a5ac <UART_SetConfig+0x6a0>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d130      	bne.n	800a3d4 <UART_SetConfig+0x4c8>
 800a372:	4b8d      	ldr	r3, [pc, #564]	@ (800a5a8 <UART_SetConfig+0x69c>)
 800a374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b05      	cmp	r3, #5
 800a37c:	d826      	bhi.n	800a3cc <UART_SetConfig+0x4c0>
 800a37e:	a201      	add	r2, pc, #4	@ (adr r2, 800a384 <UART_SetConfig+0x478>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a39d 	.word	0x0800a39d
 800a388:	0800a3a5 	.word	0x0800a3a5
 800a38c:	0800a3ad 	.word	0x0800a3ad
 800a390:	0800a3b5 	.word	0x0800a3b5
 800a394:	0800a3bd 	.word	0x0800a3bd
 800a398:	0800a3c5 	.word	0x0800a3c5
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e086      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e082      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e07e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e07a      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3bc:	2320      	movs	r3, #32
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e076      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3c4:	2340      	movs	r3, #64	@ 0x40
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ca:	e072      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3cc:	2380      	movs	r3, #128	@ 0x80
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e06e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a75      	ldr	r2, [pc, #468]	@ (800a5b0 <UART_SetConfig+0x6a4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d130      	bne.n	800a440 <UART_SetConfig+0x534>
 800a3de:	4b72      	ldr	r3, [pc, #456]	@ (800a5a8 <UART_SetConfig+0x69c>)
 800a3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d826      	bhi.n	800a438 <UART_SetConfig+0x52c>
 800a3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f0 <UART_SetConfig+0x4e4>)
 800a3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f0:	0800a409 	.word	0x0800a409
 800a3f4:	0800a411 	.word	0x0800a411
 800a3f8:	0800a419 	.word	0x0800a419
 800a3fc:	0800a421 	.word	0x0800a421
 800a400:	0800a429 	.word	0x0800a429
 800a404:	0800a431 	.word	0x0800a431
 800a408:	2300      	movs	r3, #0
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e050      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a410:	2304      	movs	r3, #4
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e04c      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a418:	2308      	movs	r3, #8
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e048      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a420:	2310      	movs	r3, #16
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e044      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a428:	2320      	movs	r3, #32
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e040      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a430:	2340      	movs	r3, #64	@ 0x40
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e03c      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a438:	2380      	movs	r3, #128	@ 0x80
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e038      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a5b      	ldr	r2, [pc, #364]	@ (800a5b4 <UART_SetConfig+0x6a8>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d130      	bne.n	800a4ac <UART_SetConfig+0x5a0>
 800a44a:	4b57      	ldr	r3, [pc, #348]	@ (800a5a8 <UART_SetConfig+0x69c>)
 800a44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	2b05      	cmp	r3, #5
 800a454:	d826      	bhi.n	800a4a4 <UART_SetConfig+0x598>
 800a456:	a201      	add	r2, pc, #4	@ (adr r2, 800a45c <UART_SetConfig+0x550>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a475 	.word	0x0800a475
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a48d 	.word	0x0800a48d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	2302      	movs	r3, #2
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e01a      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a47c:	2304      	movs	r3, #4
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e016      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a484:	2308      	movs	r3, #8
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e012      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a48c:	2310      	movs	r3, #16
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e00e      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a494:	2320      	movs	r3, #32
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e00a      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a49c:	2340      	movs	r3, #64	@ 0x40
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e006      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a4a4:	2380      	movs	r3, #128	@ 0x80
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e002      	b.n	800a4b2 <UART_SetConfig+0x5a6>
 800a4ac:	2380      	movs	r3, #128	@ 0x80
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a3f      	ldr	r2, [pc, #252]	@ (800a5b4 <UART_SetConfig+0x6a8>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	f040 80f8 	bne.w	800a6ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	dc46      	bgt.n	800a554 <UART_SetConfig+0x648>
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	f2c0 8082 	blt.w	800a5d0 <UART_SetConfig+0x6c4>
 800a4cc:	3b02      	subs	r3, #2
 800a4ce:	2b1e      	cmp	r3, #30
 800a4d0:	d87e      	bhi.n	800a5d0 <UART_SetConfig+0x6c4>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <UART_SetConfig+0x5cc>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a55b 	.word	0x0800a55b
 800a4dc:	0800a5d1 	.word	0x0800a5d1
 800a4e0:	0800a563 	.word	0x0800a563
 800a4e4:	0800a5d1 	.word	0x0800a5d1
 800a4e8:	0800a5d1 	.word	0x0800a5d1
 800a4ec:	0800a5d1 	.word	0x0800a5d1
 800a4f0:	0800a573 	.word	0x0800a573
 800a4f4:	0800a5d1 	.word	0x0800a5d1
 800a4f8:	0800a5d1 	.word	0x0800a5d1
 800a4fc:	0800a5d1 	.word	0x0800a5d1
 800a500:	0800a5d1 	.word	0x0800a5d1
 800a504:	0800a5d1 	.word	0x0800a5d1
 800a508:	0800a5d1 	.word	0x0800a5d1
 800a50c:	0800a5d1 	.word	0x0800a5d1
 800a510:	0800a583 	.word	0x0800a583
 800a514:	0800a5d1 	.word	0x0800a5d1
 800a518:	0800a5d1 	.word	0x0800a5d1
 800a51c:	0800a5d1 	.word	0x0800a5d1
 800a520:	0800a5d1 	.word	0x0800a5d1
 800a524:	0800a5d1 	.word	0x0800a5d1
 800a528:	0800a5d1 	.word	0x0800a5d1
 800a52c:	0800a5d1 	.word	0x0800a5d1
 800a530:	0800a5d1 	.word	0x0800a5d1
 800a534:	0800a5d1 	.word	0x0800a5d1
 800a538:	0800a5d1 	.word	0x0800a5d1
 800a53c:	0800a5d1 	.word	0x0800a5d1
 800a540:	0800a5d1 	.word	0x0800a5d1
 800a544:	0800a5d1 	.word	0x0800a5d1
 800a548:	0800a5d1 	.word	0x0800a5d1
 800a54c:	0800a5d1 	.word	0x0800a5d1
 800a550:	0800a5c3 	.word	0x0800a5c3
 800a554:	2b40      	cmp	r3, #64	@ 0x40
 800a556:	d037      	beq.n	800a5c8 <UART_SetConfig+0x6bc>
 800a558:	e03a      	b.n	800a5d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a55a:	f7fe fb7d 	bl	8008c58 <HAL_RCCEx_GetD3PCLK1Freq>
 800a55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a560:	e03c      	b.n	800a5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fb8c 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	e034      	b.n	800a5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a572:	f107 0318 	add.w	r3, r7, #24
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe fcd8 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a580:	e02c      	b.n	800a5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a582:	4b09      	ldr	r3, [pc, #36]	@ (800a5a8 <UART_SetConfig+0x69c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d016      	beq.n	800a5bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a58e:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <UART_SetConfig+0x69c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	08db      	lsrs	r3, r3, #3
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	4a07      	ldr	r2, [pc, #28]	@ (800a5b8 <UART_SetConfig+0x6ac>)
 800a59a:	fa22 f303 	lsr.w	r3, r2, r3
 800a59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5a0:	e01c      	b.n	800a5dc <UART_SetConfig+0x6d0>
 800a5a2:	bf00      	nop
 800a5a4:	40011400 	.word	0x40011400
 800a5a8:	58024400 	.word	0x58024400
 800a5ac:	40007800 	.word	0x40007800
 800a5b0:	40007c00 	.word	0x40007c00
 800a5b4:	58000c00 	.word	0x58000c00
 800a5b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a5bc:	4b9d      	ldr	r3, [pc, #628]	@ (800a834 <UART_SetConfig+0x928>)
 800a5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c0:	e00c      	b.n	800a5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5c2:	4b9d      	ldr	r3, [pc, #628]	@ (800a838 <UART_SetConfig+0x92c>)
 800a5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c6:	e009      	b.n	800a5dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ce:	e005      	b.n	800a5dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 81de 	beq.w	800a9a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e8:	4a94      	ldr	r2, [pc, #592]	@ (800a83c <UART_SetConfig+0x930>)
 800a5ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	685a      	ldr	r2, [r3, #4]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a604:	429a      	cmp	r2, r3
 800a606:	d305      	bcc.n	800a614 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a610:	429a      	cmp	r2, r3
 800a612:	d903      	bls.n	800a61c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a61a:	e1c1      	b.n	800a9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61e:	2200      	movs	r2, #0
 800a620:	60bb      	str	r3, [r7, #8]
 800a622:	60fa      	str	r2, [r7, #12]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a628:	4a84      	ldr	r2, [pc, #528]	@ (800a83c <UART_SetConfig+0x930>)
 800a62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2200      	movs	r2, #0
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a63a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a63e:	f7f5 fe4b 	bl	80002d8 <__aeabi_uldivmod>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4610      	mov	r0, r2
 800a648:	4619      	mov	r1, r3
 800a64a:	f04f 0200 	mov.w	r2, #0
 800a64e:	f04f 0300 	mov.w	r3, #0
 800a652:	020b      	lsls	r3, r1, #8
 800a654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a658:	0202      	lsls	r2, r0, #8
 800a65a:	6979      	ldr	r1, [r7, #20]
 800a65c:	6849      	ldr	r1, [r1, #4]
 800a65e:	0849      	lsrs	r1, r1, #1
 800a660:	2000      	movs	r0, #0
 800a662:	460c      	mov	r4, r1
 800a664:	4605      	mov	r5, r0
 800a666:	eb12 0804 	adds.w	r8, r2, r4
 800a66a:	eb43 0905 	adc.w	r9, r3, r5
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	469a      	mov	sl, r3
 800a676:	4693      	mov	fp, r2
 800a678:	4652      	mov	r2, sl
 800a67a:	465b      	mov	r3, fp
 800a67c:	4640      	mov	r0, r8
 800a67e:	4649      	mov	r1, r9
 800a680:	f7f5 fe2a 	bl	80002d8 <__aeabi_uldivmod>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4613      	mov	r3, r2
 800a68a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a692:	d308      	bcc.n	800a6a6 <UART_SetConfig+0x79a>
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a69a:	d204      	bcs.n	800a6a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6a2:	60da      	str	r2, [r3, #12]
 800a6a4:	e17c      	b.n	800a9a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a6ac:	e178      	b.n	800a9a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6b6:	f040 80c5 	bne.w	800a844 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a6ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	dc48      	bgt.n	800a754 <UART_SetConfig+0x848>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	db7b      	blt.n	800a7be <UART_SetConfig+0x8b2>
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	d879      	bhi.n	800a7be <UART_SetConfig+0x8b2>
 800a6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d0 <UART_SetConfig+0x7c4>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a75b 	.word	0x0800a75b
 800a6d4:	0800a763 	.word	0x0800a763
 800a6d8:	0800a7bf 	.word	0x0800a7bf
 800a6dc:	0800a7bf 	.word	0x0800a7bf
 800a6e0:	0800a76b 	.word	0x0800a76b
 800a6e4:	0800a7bf 	.word	0x0800a7bf
 800a6e8:	0800a7bf 	.word	0x0800a7bf
 800a6ec:	0800a7bf 	.word	0x0800a7bf
 800a6f0:	0800a77b 	.word	0x0800a77b
 800a6f4:	0800a7bf 	.word	0x0800a7bf
 800a6f8:	0800a7bf 	.word	0x0800a7bf
 800a6fc:	0800a7bf 	.word	0x0800a7bf
 800a700:	0800a7bf 	.word	0x0800a7bf
 800a704:	0800a7bf 	.word	0x0800a7bf
 800a708:	0800a7bf 	.word	0x0800a7bf
 800a70c:	0800a7bf 	.word	0x0800a7bf
 800a710:	0800a78b 	.word	0x0800a78b
 800a714:	0800a7bf 	.word	0x0800a7bf
 800a718:	0800a7bf 	.word	0x0800a7bf
 800a71c:	0800a7bf 	.word	0x0800a7bf
 800a720:	0800a7bf 	.word	0x0800a7bf
 800a724:	0800a7bf 	.word	0x0800a7bf
 800a728:	0800a7bf 	.word	0x0800a7bf
 800a72c:	0800a7bf 	.word	0x0800a7bf
 800a730:	0800a7bf 	.word	0x0800a7bf
 800a734:	0800a7bf 	.word	0x0800a7bf
 800a738:	0800a7bf 	.word	0x0800a7bf
 800a73c:	0800a7bf 	.word	0x0800a7bf
 800a740:	0800a7bf 	.word	0x0800a7bf
 800a744:	0800a7bf 	.word	0x0800a7bf
 800a748:	0800a7bf 	.word	0x0800a7bf
 800a74c:	0800a7bf 	.word	0x0800a7bf
 800a750:	0800a7b1 	.word	0x0800a7b1
 800a754:	2b40      	cmp	r3, #64	@ 0x40
 800a756:	d02e      	beq.n	800a7b6 <UART_SetConfig+0x8aa>
 800a758:	e031      	b.n	800a7be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a75a:	f7fc fac7 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 800a75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a760:	e033      	b.n	800a7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a762:	f7fc fad9 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 800a766:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a768:	e02f      	b.n	800a7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fa88 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a778:	e027      	b.n	800a7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a77a:	f107 0318 	add.w	r3, r7, #24
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fe fbd4 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a788:	e01f      	b.n	800a7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a78a:	4b2d      	ldr	r3, [pc, #180]	@ (800a840 <UART_SetConfig+0x934>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0320 	and.w	r3, r3, #32
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a796:	4b2a      	ldr	r3, [pc, #168]	@ (800a840 <UART_SetConfig+0x934>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	08db      	lsrs	r3, r3, #3
 800a79c:	f003 0303 	and.w	r3, r3, #3
 800a7a0:	4a24      	ldr	r2, [pc, #144]	@ (800a834 <UART_SetConfig+0x928>)
 800a7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7a8:	e00f      	b.n	800a7ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a7aa:	4b22      	ldr	r3, [pc, #136]	@ (800a834 <UART_SetConfig+0x928>)
 800a7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ae:	e00c      	b.n	800a7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7b0:	4b21      	ldr	r3, [pc, #132]	@ (800a838 <UART_SetConfig+0x92c>)
 800a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b4:	e009      	b.n	800a7ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	e005      	b.n	800a7ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 80e7 	beq.w	800a9a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d6:	4a19      	ldr	r2, [pc, #100]	@ (800a83c <UART_SetConfig+0x930>)
 800a7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e4:	005a      	lsls	r2, r3, #1
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	441a      	add	r2, r3
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fa:	2b0f      	cmp	r3, #15
 800a7fc:	d916      	bls.n	800a82c <UART_SetConfig+0x920>
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a804:	d212      	bcs.n	800a82c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a808:	b29b      	uxth	r3, r3
 800a80a:	f023 030f 	bic.w	r3, r3, #15
 800a80e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	085b      	lsrs	r3, r3, #1
 800a814:	b29b      	uxth	r3, r3
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a81e:	4313      	orrs	r3, r2
 800a820:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a828:	60da      	str	r2, [r3, #12]
 800a82a:	e0b9      	b.n	800a9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a832:	e0b5      	b.n	800a9a0 <UART_SetConfig+0xa94>
 800a834:	03d09000 	.word	0x03d09000
 800a838:	003d0900 	.word	0x003d0900
 800a83c:	0800aeb0 	.word	0x0800aeb0
 800a840:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a844:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a848:	2b20      	cmp	r3, #32
 800a84a:	dc49      	bgt.n	800a8e0 <UART_SetConfig+0x9d4>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	db7c      	blt.n	800a94a <UART_SetConfig+0xa3e>
 800a850:	2b20      	cmp	r3, #32
 800a852:	d87a      	bhi.n	800a94a <UART_SetConfig+0xa3e>
 800a854:	a201      	add	r2, pc, #4	@ (adr r2, 800a85c <UART_SetConfig+0x950>)
 800a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85a:	bf00      	nop
 800a85c:	0800a8e7 	.word	0x0800a8e7
 800a860:	0800a8ef 	.word	0x0800a8ef
 800a864:	0800a94b 	.word	0x0800a94b
 800a868:	0800a94b 	.word	0x0800a94b
 800a86c:	0800a8f7 	.word	0x0800a8f7
 800a870:	0800a94b 	.word	0x0800a94b
 800a874:	0800a94b 	.word	0x0800a94b
 800a878:	0800a94b 	.word	0x0800a94b
 800a87c:	0800a907 	.word	0x0800a907
 800a880:	0800a94b 	.word	0x0800a94b
 800a884:	0800a94b 	.word	0x0800a94b
 800a888:	0800a94b 	.word	0x0800a94b
 800a88c:	0800a94b 	.word	0x0800a94b
 800a890:	0800a94b 	.word	0x0800a94b
 800a894:	0800a94b 	.word	0x0800a94b
 800a898:	0800a94b 	.word	0x0800a94b
 800a89c:	0800a917 	.word	0x0800a917
 800a8a0:	0800a94b 	.word	0x0800a94b
 800a8a4:	0800a94b 	.word	0x0800a94b
 800a8a8:	0800a94b 	.word	0x0800a94b
 800a8ac:	0800a94b 	.word	0x0800a94b
 800a8b0:	0800a94b 	.word	0x0800a94b
 800a8b4:	0800a94b 	.word	0x0800a94b
 800a8b8:	0800a94b 	.word	0x0800a94b
 800a8bc:	0800a94b 	.word	0x0800a94b
 800a8c0:	0800a94b 	.word	0x0800a94b
 800a8c4:	0800a94b 	.word	0x0800a94b
 800a8c8:	0800a94b 	.word	0x0800a94b
 800a8cc:	0800a94b 	.word	0x0800a94b
 800a8d0:	0800a94b 	.word	0x0800a94b
 800a8d4:	0800a94b 	.word	0x0800a94b
 800a8d8:	0800a94b 	.word	0x0800a94b
 800a8dc:	0800a93d 	.word	0x0800a93d
 800a8e0:	2b40      	cmp	r3, #64	@ 0x40
 800a8e2:	d02e      	beq.n	800a942 <UART_SetConfig+0xa36>
 800a8e4:	e031      	b.n	800a94a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8e6:	f7fc fa01 	bl	8006cec <HAL_RCC_GetPCLK1Freq>
 800a8ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8ec:	e033      	b.n	800a956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ee:	f7fc fa13 	bl	8006d18 <HAL_RCC_GetPCLK2Freq>
 800a8f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8f4:	e02f      	b.n	800a956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe f9c2 	bl	8008c84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a904:	e027      	b.n	800a956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a906:	f107 0318 	add.w	r3, r7, #24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fb0e 	bl	8008f2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a914:	e01f      	b.n	800a956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a916:	4b2d      	ldr	r3, [pc, #180]	@ (800a9cc <UART_SetConfig+0xac0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d009      	beq.n	800a936 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a922:	4b2a      	ldr	r3, [pc, #168]	@ (800a9cc <UART_SetConfig+0xac0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	08db      	lsrs	r3, r3, #3
 800a928:	f003 0303 	and.w	r3, r3, #3
 800a92c:	4a28      	ldr	r2, [pc, #160]	@ (800a9d0 <UART_SetConfig+0xac4>)
 800a92e:	fa22 f303 	lsr.w	r3, r2, r3
 800a932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a934:	e00f      	b.n	800a956 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a936:	4b26      	ldr	r3, [pc, #152]	@ (800a9d0 <UART_SetConfig+0xac4>)
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93a:	e00c      	b.n	800a956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a93c:	4b25      	ldr	r3, [pc, #148]	@ (800a9d4 <UART_SetConfig+0xac8>)
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e009      	b.n	800a956 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a948:	e005      	b.n	800a956 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a954:	bf00      	nop
    }

    if (pclk != 0U)
 800a956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d021      	beq.n	800a9a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a960:	4a1d      	ldr	r2, [pc, #116]	@ (800a9d8 <UART_SetConfig+0xacc>)
 800a962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a966:	461a      	mov	r2, r3
 800a968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a96a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	085b      	lsrs	r3, r3, #1
 800a974:	441a      	add	r2, r3
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a97e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	2b0f      	cmp	r3, #15
 800a984:	d909      	bls.n	800a99a <UART_SetConfig+0xa8e>
 800a986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a98c:	d205      	bcs.n	800a99a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a990:	b29a      	uxth	r2, r3
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60da      	str	r2, [r3, #12]
 800a998:	e002      	b.n	800a9a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a9bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3748      	adds	r7, #72	@ 0x48
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9ca:	bf00      	nop
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	03d09000 	.word	0x03d09000
 800a9d4:	003d0900 	.word	0x003d0900
 800a9d8:	0800aeb0 	.word	0x0800aeb0

0800a9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e8:	f003 0308 	and.w	r3, r3, #8
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00a      	beq.n	800aa06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	430a      	orrs	r2, r1
 800aa26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00a      	beq.n	800aa4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	430a      	orrs	r2, r1
 800aa48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4e:	f003 0304 	and.w	r3, r3, #4
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa70:	f003 0310 	and.w	r3, r3, #16
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00a      	beq.n	800aa8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	430a      	orrs	r2, r1
 800aaae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01a      	beq.n	800aaf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	430a      	orrs	r2, r1
 800aad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aada:	d10a      	bne.n	800aaf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	605a      	str	r2, [r3, #4]
  }
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b098      	sub	sp, #96	@ 0x60
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab30:	f7f6 fdda 	bl	80016e8 <HAL_GetTick>
 800ab34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d12f      	bne.n	800aba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f88e 	bl	800ac74 <UART_WaitOnFlagUntilTimeout>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d022      	beq.n	800aba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab72:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e6      	bne.n	800ab5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e063      	b.n	800ac6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0304 	and.w	r3, r3, #4
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d149      	bne.n	800ac46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abba:	2200      	movs	r2, #0
 800abbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f857 	bl	800ac74 <UART_WaitOnFlagUntilTimeout>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d03c      	beq.n	800ac46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	623b      	str	r3, [r7, #32]
   return(result);
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abea:	633b      	str	r3, [r7, #48]	@ 0x30
 800abec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e6      	bne.n	800abcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3308      	adds	r3, #8
 800ac04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac1e:	61fa      	str	r2, [r7, #28]
 800ac20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	69b9      	ldr	r1, [r7, #24]
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e5      	bne.n	800abfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2220      	movs	r2, #32
 800ac36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e012      	b.n	800ac6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2220      	movs	r2, #32
 800ac52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3758      	adds	r7, #88	@ 0x58
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac84:	e04f      	b.n	800ad26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8c:	d04b      	beq.n	800ad26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8e:	f7f6 fd2b 	bl	80016e8 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d302      	bcc.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e04e      	b.n	800ad46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0304 	and.w	r3, r3, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d037      	beq.n	800ad26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b80      	cmp	r3, #128	@ 0x80
 800acba:	d034      	beq.n	800ad26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2b40      	cmp	r3, #64	@ 0x40
 800acc0:	d031      	beq.n	800ad26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	f003 0308 	and.w	r3, r3, #8
 800accc:	2b08      	cmp	r3, #8
 800acce:	d110      	bne.n	800acf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2208      	movs	r2, #8
 800acd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 f839 	bl	800ad50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2208      	movs	r2, #8
 800ace2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e029      	b.n	800ad46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad00:	d111      	bne.n	800ad26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f81f 	bl	800ad50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e00f      	b.n	800ad46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	69da      	ldr	r2, [r3, #28]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	bf0c      	ite	eq
 800ad36:	2301      	moveq	r3, #1
 800ad38:	2300      	movne	r3, #0
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d0a0      	beq.n	800ac86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b095      	sub	sp, #84	@ 0x54
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad76:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e6      	bne.n	800ad58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3308      	adds	r3, #8
 800ad90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	4b1e      	ldr	r3, [pc, #120]	@ (800ae18 <UART_EndRxTransfer+0xc8>)
 800ad9e:	4013      	ands	r3, r2
 800ada0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3308      	adds	r3, #8
 800ada8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e5      	bne.n	800ad8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d118      	bne.n	800adf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	e853 3f00 	ldrex	r3, [r3]
 800add2:	60bb      	str	r3, [r7, #8]
   return(result);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f023 0310 	bic.w	r3, r3, #16
 800adda:	647b      	str	r3, [r7, #68]	@ 0x44
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ade4:	61bb      	str	r3, [r7, #24]
 800ade6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	6979      	ldr	r1, [r7, #20]
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	e841 2300 	strex	r3, r2, [r1]
 800adf0:	613b      	str	r3, [r7, #16]
   return(result);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e6      	bne.n	800adc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae0c:	bf00      	nop
 800ae0e:	3754      	adds	r7, #84	@ 0x54
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	effffffe 	.word	0xeffffffe

0800ae1c <memset>:
 800ae1c:	4402      	add	r2, r0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d100      	bne.n	800ae26 <memset+0xa>
 800ae24:	4770      	bx	lr
 800ae26:	f803 1b01 	strb.w	r1, [r3], #1
 800ae2a:	e7f9      	b.n	800ae20 <memset+0x4>

0800ae2c <__libc_init_array>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4d0d      	ldr	r5, [pc, #52]	@ (800ae64 <__libc_init_array+0x38>)
 800ae30:	4c0d      	ldr	r4, [pc, #52]	@ (800ae68 <__libc_init_array+0x3c>)
 800ae32:	1b64      	subs	r4, r4, r5
 800ae34:	10a4      	asrs	r4, r4, #2
 800ae36:	2600      	movs	r6, #0
 800ae38:	42a6      	cmp	r6, r4
 800ae3a:	d109      	bne.n	800ae50 <__libc_init_array+0x24>
 800ae3c:	4d0b      	ldr	r5, [pc, #44]	@ (800ae6c <__libc_init_array+0x40>)
 800ae3e:	4c0c      	ldr	r4, [pc, #48]	@ (800ae70 <__libc_init_array+0x44>)
 800ae40:	f000 f818 	bl	800ae74 <_init>
 800ae44:	1b64      	subs	r4, r4, r5
 800ae46:	10a4      	asrs	r4, r4, #2
 800ae48:	2600      	movs	r6, #0
 800ae4a:	42a6      	cmp	r6, r4
 800ae4c:	d105      	bne.n	800ae5a <__libc_init_array+0x2e>
 800ae4e:	bd70      	pop	{r4, r5, r6, pc}
 800ae50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae54:	4798      	blx	r3
 800ae56:	3601      	adds	r6, #1
 800ae58:	e7ee      	b.n	800ae38 <__libc_init_array+0xc>
 800ae5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5e:	4798      	blx	r3
 800ae60:	3601      	adds	r6, #1
 800ae62:	e7f2      	b.n	800ae4a <__libc_init_array+0x1e>
 800ae64:	0800aed0 	.word	0x0800aed0
 800ae68:	0800aed0 	.word	0x0800aed0
 800ae6c:	0800aed0 	.word	0x0800aed0
 800ae70:	0800aed4 	.word	0x0800aed4

0800ae74 <_init>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	bf00      	nop
 800ae78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7a:	bc08      	pop	{r3}
 800ae7c:	469e      	mov	lr, r3
 800ae7e:	4770      	bx	lr

0800ae80 <_fini>:
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	bf00      	nop
 800ae84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae86:	bc08      	pop	{r3}
 800ae88:	469e      	mov	lr, r3
 800ae8a:	4770      	bx	lr
